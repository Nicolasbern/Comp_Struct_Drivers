
Comp_Struct_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000848  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d98  08006d98  00016d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00016da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006da4  08006da4  00016da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000074  08006e1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  08006e1c  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113f5  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029cb  00000000  00000000  000314dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ee8  00000000  00000000  00033ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b6c  00000000  00000000  00034d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027970  00000000  00000000  000358fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001326b  00000000  00000000  0005d26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed8e5  00000000  00000000  000704d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004478  00000000  00000000  0015ddbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00162234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006538 	.word	0x08006538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006538 	.word	0x08006538

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f003 faa4 	bl	8003ad0 <HAL_UART_Transmit>
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	200000e4 	.word	0x200000e4

08000598 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (ring_buffer_put(&ring_buffer_uart_rx, rx_data) == 0) {
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <HAL_UART_RxCpltCallback+0x38>)
 80005a8:	f000 fc37 	bl	8000e1a <ring_buffer_put>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d102      	bne.n	80005b8 <HAL_UART_RxCpltCallback+0x20>
		printf("Rx buffer is full\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <HAL_UART_RxCpltCallback+0x3c>)
 80005b4:	f005 f958 	bl	8005868 <puts>
	}

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <HAL_UART_RxCpltCallback+0x40>)
 80005be:	f003 fb11 	bl	8003be4 <HAL_UART_Receive_IT>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000188 	.word	0x20000188
 80005d0:	2000017c 	.word	0x2000017c
 80005d4:	08006550 	.word	0x08006550
 80005d8:	200000e4 	.word	0x200000e4

080005dc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	key_event = GPIO_Pin;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	8013      	strh	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000000 	.word	0x20000000

080005fc <keypad_init>:
void keypad_init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	/* Set the rows high to be detected in the columns by rising interrupt */
	ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000608:	619a      	str	r2, [r3, #24]
	ROW_2_GPIO_Port->BSRR = ROW_2_Pin;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <keypad_init+0x2c>)
 800060c:	2208      	movs	r2, #8
 800060e:	619a      	str	r2, [r3, #24]
	ROW_3_GPIO_Port->BSRR = ROW_3_Pin;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <keypad_init+0x2c>)
 8000612:	2220      	movs	r2, #32
 8000614:	619a      	str	r2, [r3, #24]
	ROW_4_GPIO_Port->BSRR = ROW_4_Pin;
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <keypad_init+0x2c>)
 8000618:	2210      	movs	r2, #16
 800061a:	619a      	str	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <keypad_handler>:
uint8_t keypad_handler(uint16_t column_to_evaluate)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF; // Value to return
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	73fb      	strb	r3, [r7, #15]

	/*** Debounce the key press (remove noise in the key) ***/
#define KEY_DEBOUNCE_MS 300 /*!> Minimum time required for since last press */
	static uint32_t last_pressed_tick = 0;
	if (HAL_GetTick() <= (last_pressed_tick + KEY_DEBOUNCE_MS)) {
 800063a:	f000 fe95 	bl	8001368 <HAL_GetTick>
 800063e:	4602      	mov	r2, r0
 8000640:	4b8d      	ldr	r3, [pc, #564]	; (8000878 <keypad_handler+0x24c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000648:	429a      	cmp	r2, r3
 800064a:	d801      	bhi.n	8000650 <keypad_handler+0x24>
		// less than KEY_DEBOUNCE_MS since last press. Probably noise
		return key_pressed; // return 0xFF
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	e176      	b.n	800093e <keypad_handler+0x312>
	}
	last_pressed_tick = HAL_GetTick();
 8000650:	f000 fe8a 	bl	8001368 <HAL_GetTick>
 8000654:	4603      	mov	r3, r0
 8000656:	4a88      	ldr	r2, [pc, #544]	; (8000878 <keypad_handler+0x24c>)
 8000658:	6013      	str	r3, [r2, #0]

	/*** Check in which column the event happened ***/
	switch (column_to_evaluate) {
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000660:	d012      	beq.n	8000688 <keypad_handler+0x5c>
 8000662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000666:	f300 815a 	bgt.w	800091e <keypad_handler+0x2f2>
 800066a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800066e:	f000 80af 	beq.w	80007d0 <keypad_handler+0x1a4>
 8000672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000676:	f300 8152 	bgt.w	800091e <keypad_handler+0x2f2>
 800067a:	2b80      	cmp	r3, #128	; 0x80
 800067c:	f000 8100 	beq.w	8000880 <keypad_handler+0x254>
 8000680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000684:	d050      	beq.n	8000728 <keypad_handler+0xfc>
 8000686:	e14a      	b.n	800091e <keypad_handler+0x2f2>
	case COLUMN_1_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000688:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800068c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000690:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000692:	4b7a      	ldr	r3, [pc, #488]	; (800087c <keypad_handler+0x250>)
 8000694:	2208      	movs	r2, #8
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000698:	4b78      	ldr	r3, [pc, #480]	; (800087c <keypad_handler+0x250>)
 800069a:	2220      	movs	r2, #32
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800069e:	4b77      	ldr	r3, [pc, #476]	; (800087c <keypad_handler+0x250>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fe6b 	bl	8001380 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006aa:	4b74      	ldr	r3, [pc, #464]	; (800087c <keypad_handler+0x250>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <keypad_handler+0x8e>
			key_pressed = 0x01; // if column 1 is still high -> column 1 + row 1 = key 1
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]

		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80006ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80006c4:	4b6d      	ldr	r3, [pc, #436]	; (800087c <keypad_handler+0x250>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80006ca:	2002      	movs	r0, #2
 80006cc:	f000 fe58 	bl	8001380 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006d0:	4b6a      	ldr	r3, [pc, #424]	; (800087c <keypad_handler+0x250>)
 80006d2:	691b      	ldr	r3, [r3, #16]
 80006d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <keypad_handler+0xb4>
			key_pressed = 0x04; // if column 1 is still high -> column 1 + row 2 = key 4
 80006dc:	2304      	movs	r3, #4
 80006de:	73fb      	strb	r3, [r7, #15]

		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80006e0:	4b66      	ldr	r3, [pc, #408]	; (800087c <keypad_handler+0x250>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80006e6:	4b65      	ldr	r3, [pc, #404]	; (800087c <keypad_handler+0x250>)
 80006e8:	2220      	movs	r2, #32
 80006ea:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80006ec:	2002      	movs	r0, #2
 80006ee:	f000 fe47 	bl	8001380 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006f2:	4b62      	ldr	r3, [pc, #392]	; (800087c <keypad_handler+0x250>)
 80006f4:	691b      	ldr	r3, [r3, #16]
 80006f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <keypad_handler+0xd6>
			key_pressed = 0x07; // if column 1 is still high -> column 1 + row 3 = key 7
 80006fe:	2307      	movs	r3, #7
 8000700:	73fb      	strb	r3, [r7, #15]

		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000702:	4b5e      	ldr	r3, [pc, #376]	; (800087c <keypad_handler+0x250>)
 8000704:	2220      	movs	r2, #32
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000708:	4b5c      	ldr	r3, [pc, #368]	; (800087c <keypad_handler+0x250>)
 800070a:	2210      	movs	r2, #16
 800070c:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800070e:	2002      	movs	r0, #2
 8000710:	f000 fe36 	bl	8001380 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 8000714:	4b59      	ldr	r3, [pc, #356]	; (800087c <keypad_handler+0x250>)
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800071c:	2b00      	cmp	r3, #0
 800071e:	f000 8104 	beq.w	800092a <keypad_handler+0x2fe>
			key_pressed = 0x0E; // if column 1 is still high -> column 1 + row 4 = key *
 8000722:	230e      	movs	r3, #14
 8000724:	73fb      	strb	r3, [r7, #15]

		}
	  break;
 8000726:	e100      	b.n	800092a <keypad_handler+0x2fe>

	case COLUMN_2_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000728:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800072c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000730:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000732:	4b52      	ldr	r3, [pc, #328]	; (800087c <keypad_handler+0x250>)
 8000734:	2208      	movs	r2, #8
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000738:	4b50      	ldr	r3, [pc, #320]	; (800087c <keypad_handler+0x250>)
 800073a:	2220      	movs	r2, #32
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800073e:	4b4f      	ldr	r3, [pc, #316]	; (800087c <keypad_handler+0x250>)
 8000740:	2210      	movs	r2, #16
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 8000744:	2002      	movs	r0, #2
 8000746:	f000 fe1b 	bl	8001380 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 800074a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <keypad_handler+0x130>
			key_pressed = 0x02; // if column 1 is still high -> column 1 + row 1 = key 1
 8000758:	2302      	movs	r3, #2
 800075a:	73fb      	strb	r3, [r7, #15]
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 800075c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 8000766:	4b45      	ldr	r3, [pc, #276]	; (800087c <keypad_handler+0x250>)
 8000768:	2208      	movs	r2, #8
 800076a:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fe07 	bl	8001380 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <keypad_handler+0x158>
			key_pressed = 0x05; // if column 1 is still high -> column 1 + row 2 = key 4
 8000780:	2305      	movs	r3, #5
 8000782:	73fb      	strb	r3, [r7, #15]
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 8000784:	4b3d      	ldr	r3, [pc, #244]	; (800087c <keypad_handler+0x250>)
 8000786:	2208      	movs	r2, #8
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <keypad_handler+0x250>)
 800078c:	2220      	movs	r2, #32
 800078e:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000790:	2002      	movs	r0, #2
 8000792:	f000 fdf5 	bl	8001380 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000796:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <keypad_handler+0x17c>
			key_pressed = 0x08; // if column 1 is still high -> column 1 + row 3 = key 7
 80007a4:	2308      	movs	r3, #8
 80007a6:	73fb      	strb	r3, [r7, #15]
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 80007a8:	4b34      	ldr	r3, [pc, #208]	; (800087c <keypad_handler+0x250>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <keypad_handler+0x250>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80007b4:	2002      	movs	r0, #2
 80007b6:	f000 fde3 	bl	8001380 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 80007ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 80b2 	beq.w	800092e <keypad_handler+0x302>
			key_pressed = 0x00; // if column 1 is still high -> column 1 + row 4 = key *
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
		}
	  break;
 80007ce:	e0ae      	b.n	800092e <keypad_handler+0x302>

	case COLUMN_3_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 80007d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007d8:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <keypad_handler+0x250>)
 80007dc:	2208      	movs	r2, #8
 80007de:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <keypad_handler+0x250>)
 80007e2:	2220      	movs	r2, #32
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <keypad_handler+0x250>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80007ec:	2002      	movs	r0, #2
 80007ee:	f000 fdc7 	bl	8001380 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 80007f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <keypad_handler+0x1d8>
			key_pressed = 0x03; // if column 1 is still high -> column 1 + row 1 = key 1
 8000800:	2303      	movs	r3, #3
 8000802:	73fb      	strb	r3, [r7, #15]
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000804:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800080c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <keypad_handler+0x250>)
 8000810:	2208      	movs	r2, #8
 8000812:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000814:	2002      	movs	r0, #2
 8000816:	f000 fdb3 	bl	8001380 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 800081a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800081e:	691b      	ldr	r3, [r3, #16]
 8000820:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <keypad_handler+0x200>
			key_pressed = 0x06; // if column 1 is still high -> column 1 + row 2 = key 4
 8000828:	2306      	movs	r3, #6
 800082a:	73fb      	strb	r3, [r7, #15]
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <keypad_handler+0x250>)
 800082e:	2208      	movs	r2, #8
 8000830:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <keypad_handler+0x250>)
 8000834:	2220      	movs	r2, #32
 8000836:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000838:	2002      	movs	r0, #2
 800083a:	f000 fda1 	bl	8001380 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 800083e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <keypad_handler+0x224>
			key_pressed = 0x09; // if column 1 is still high -> column 1 + row 3 = key 7
 800084c:	2309      	movs	r3, #9
 800084e:	73fb      	strb	r3, [r7, #15]
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <keypad_handler+0x250>)
 8000852:	2220      	movs	r2, #32
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <keypad_handler+0x250>)
 8000858:	2210      	movs	r2, #16
 800085a:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800085c:	2002      	movs	r0, #2
 800085e:	f000 fd8f 	bl	8001380 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 8000862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800086c:	2b00      	cmp	r3, #0
 800086e:	d060      	beq.n	8000932 <keypad_handler+0x306>
			key_pressed = 0x0F; // if column 1 is still high -> column 1 + row 4 = key *;
 8000870:	230f      	movs	r3, #15
 8000872:	73fb      	strb	r3, [r7, #15]
		}
	  break;
 8000874:	e05d      	b.n	8000932 <keypad_handler+0x306>
 8000876:	bf00      	nop
 8000878:	20000198 	.word	0x20000198
 800087c:	48000400 	.word	0x48000400

	case COLUMN_4_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000888:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 800088a:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <keypad_handler+0x31c>)
 800088c:	2208      	movs	r2, #8
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000890:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <keypad_handler+0x31c>)
 8000892:	2220      	movs	r2, #32
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <keypad_handler+0x31c>)
 8000898:	2210      	movs	r2, #16
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 800089c:	2002      	movs	r0, #2
 800089e:	f000 fd6f 	bl	8001380 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <keypad_handler+0x320>)
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <keypad_handler+0x286>
			key_pressed = 0x0A; // if column 1 is still high -> column 1 + row 1 = key 1
 80008ae:	230a      	movs	r3, #10
 80008b0:	73fb      	strb	r3, [r7, #15]
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80008b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80008bc:	4b22      	ldr	r3, [pc, #136]	; (8000948 <keypad_handler+0x31c>)
 80008be:	2208      	movs	r2, #8
 80008c0:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80008c2:	2002      	movs	r0, #2
 80008c4:	f000 fd5c 	bl	8001380 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008c8:	4b20      	ldr	r3, [pc, #128]	; (800094c <keypad_handler+0x320>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <keypad_handler+0x2ac>
			key_pressed = 0x0B; // if column 1 is still high -> column 1 + row 2 = key 4
 80008d4:	230b      	movs	r3, #11
 80008d6:	73fb      	strb	r3, [r7, #15]
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80008d8:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <keypad_handler+0x31c>)
 80008da:	2208      	movs	r2, #8
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <keypad_handler+0x31c>)
 80008e0:	2220      	movs	r2, #32
 80008e2:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80008e4:	2002      	movs	r0, #2
 80008e6:	f000 fd4b 	bl	8001380 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008ea:	4b18      	ldr	r3, [pc, #96]	; (800094c <keypad_handler+0x320>)
 80008ec:	691b      	ldr	r3, [r3, #16]
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <keypad_handler+0x2ce>
			key_pressed = 0x0C; // if column 1 is still high -> column 1 + row 3 = key 7
 80008f6:	230c      	movs	r3, #12
 80008f8:	73fb      	strb	r3, [r7, #15]
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <keypad_handler+0x31c>)
 80008fc:	2220      	movs	r2, #32
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <keypad_handler+0x31c>)
 8000902:	2210      	movs	r2, #16
 8000904:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000906:	2002      	movs	r0, #2
 8000908:	f000 fd3a 	bl	8001380 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <keypad_handler+0x320>)
 800090e:	691b      	ldr	r3, [r3, #16]
 8000910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000914:	2b00      	cmp	r3, #0
 8000916:	d00e      	beq.n	8000936 <keypad_handler+0x30a>
			key_pressed = 0x0D; // if column 1 is still high -> column 1 + row 4 = key *
 8000918:	230d      	movs	r3, #13
 800091a:	73fb      	strb	r3, [r7, #15]
		}
	  break;
 800091c:	e00b      	b.n	8000936 <keypad_handler+0x30a>
	/*!\ TODO: Implement other column cases here */

	default:
		/* This should not be reached */
		printf("Unknown column: %x\r\n", column_to_evaluate);
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4619      	mov	r1, r3
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <keypad_handler+0x324>)
 8000924:	f004 ff3a 	bl	800579c <iprintf>
	  break;
 8000928:	e006      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 800092a:	bf00      	nop
 800092c:	e004      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 800092e:	bf00      	nop
 8000930:	e002      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 8000932:	bf00      	nop
 8000934:	e000      	b.n	8000938 <keypad_handler+0x30c>
	  break;
 8000936:	bf00      	nop
	}

	keypad_init(); // set the columns high again
 8000938:	f7ff fe60 	bl	80005fc <keypad_init>
	return key_pressed; // invalid: 0xFF, valid:[0x00-0x0F]
 800093c:	7bfb      	ldrb	r3, [r7, #15]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	48000400 	.word	0x48000400
 800094c:	48000800 	.word	0x48000800
 8000950:	08006564 	.word	0x08006564

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f000 fc95 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f8c1 	bl	8000ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 f981 	bl	8000c68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000966:	f000 f94f 	bl	8000c08 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800096a:	f000 f90d 	bl	8000b88 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 800096e:	2210      	movs	r2, #16
 8000970:	494f      	ldr	r1, [pc, #316]	; (8000ab0 <main+0x15c>)
 8000972:	4850      	ldr	r0, [pc, #320]	; (8000ab4 <main+0x160>)
 8000974:	f000 fa35 	bl	8000de2 <ring_buffer_init>
  keypad_init(); // Initialize the keypad functionality
 8000978:	f7ff fe40 	bl	80005fc <keypad_init>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	494e      	ldr	r1, [pc, #312]	; (8000ab8 <main+0x164>)
 8000980:	484e      	ldr	r0, [pc, #312]	; (8000abc <main+0x168>)
 8000982:	f003 f92f 	bl	8003be4 <HAL_UART_Receive_IT>

  ssd1306_Init();
 8000986:	f004 fc57 	bl	8005238 <ssd1306_Init>
  ssd1306_Fill(Black);
 800098a:	2000      	movs	r0, #0
 800098c:	f004 fcbe 	bl	800530c <ssd1306_Fill>
  ssd1306_SetCursor(20, 20);
 8000990:	2114      	movs	r1, #20
 8000992:	2014      	movs	r0, #20
 8000994:	f004 fe08 	bl	80055a8 <ssd1306_SetCursor>
  ssd1306_WriteString("<3", Font_7x10, White);
 8000998:	4a49      	ldr	r2, [pc, #292]	; (8000ac0 <main+0x16c>)
 800099a:	2301      	movs	r3, #1
 800099c:	ca06      	ldmia	r2, {r1, r2}
 800099e:	4849      	ldr	r0, [pc, #292]	; (8000ac4 <main+0x170>)
 80009a0:	f004 fddc 	bl	800555c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80009a4:	f004 fcd6 	bl	8005354 <ssd1306_UpdateScreen>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // se ingresa cada vez que se pulsa un tecla del taclado.
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <main+0x174>)
 80009aa:	881b      	ldrh	r3, [r3, #0]
 80009ac:	2bff      	cmp	r3, #255	; 0xff
 80009ae:	d0fb      	beq.n	80009a8 <main+0x54>
	 		  uint16_t key_pressed = keypad_handler(key_event); // call the keypad handler
 80009b0:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <main+0x174>)
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fe39 	bl	800062c <keypad_handler>
 80009ba:	4603      	mov	r3, r0
 80009bc:	80bb      	strh	r3, [r7, #4]
	 		  if (key_pressed != 0xFF) {
 80009be:	88bb      	ldrh	r3, [r7, #4]
 80009c0:	2bff      	cmp	r3, #255	; 0xff
 80009c2:	d015      	beq.n	80009f0 <main+0x9c>
	 			  printf("Key pressed: %x\r\n", key_pressed); // print the key pressed
 80009c4:	88bb      	ldrh	r3, [r7, #4]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4840      	ldr	r0, [pc, #256]	; (8000acc <main+0x178>)
 80009ca:	f004 fee7 	bl	800579c <iprintf>

	 			  // guarda los cuadtro digitos de la key y se presona '#' para finalizar la lectura y proceder con la verificacion.
	 			  if (memory[4] != 0x0F){
 80009ce:	4b40      	ldr	r3, [pc, #256]	; (8000ad0 <main+0x17c>)
 80009d0:	891b      	ldrh	r3, [r3, #8]
 80009d2:	2b0f      	cmp	r3, #15
 80009d4:	d00c      	beq.n	80009f0 <main+0x9c>
	 			  memory[count] = key_pressed;
 80009d6:	4b3f      	ldr	r3, [pc, #252]	; (8000ad4 <main+0x180>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	4a3c      	ldr	r2, [pc, #240]	; (8000ad0 <main+0x17c>)
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	 			  count = count + 1;}
 80009e4:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <main+0x180>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <main+0x180>)
 80009ee:	701a      	strb	r2, [r3, #0]
	 		  	  }

	 		  	  // Validamos si la key corresponde con el año de nacimiento.
	 		  	  // Se valida al preciconar la tecla # para completar las 5 teclas presionadas.
	 		  	  if (memory[4] == 0x0F){
 80009f0:	4b37      	ldr	r3, [pc, #220]	; (8000ad0 <main+0x17c>)
 80009f2:	891b      	ldrh	r3, [r3, #8]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d132      	bne.n	8000a5e <main+0x10a>
	 		  		  // Pe varifica se los valores ingresados coinciden de ser correcto se imprime Pass en la pantalla.
	 		  		  if (memory[0] == 0x02 && memory[1] == 0x00 && memory[2] == 0x00 && memory[3] == 0x02){
 80009f8:	4b35      	ldr	r3, [pc, #212]	; (8000ad0 <main+0x17c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d11d      	bne.n	8000a3c <main+0xe8>
 8000a00:	4b33      	ldr	r3, [pc, #204]	; (8000ad0 <main+0x17c>)
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d119      	bne.n	8000a3c <main+0xe8>
 8000a08:	4b31      	ldr	r3, [pc, #196]	; (8000ad0 <main+0x17c>)
 8000a0a:	889b      	ldrh	r3, [r3, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d115      	bne.n	8000a3c <main+0xe8>
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <main+0x17c>)
 8000a12:	88db      	ldrh	r3, [r3, #6]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	d111      	bne.n	8000a3c <main+0xe8>
	 		  			  ssd1306_Init();
 8000a18:	f004 fc0e 	bl	8005238 <ssd1306_Init>
	 		  			  ssd1306_Fill(Black);
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f004 fc75 	bl	800530c <ssd1306_Fill>
	 		  			  ssd1306_SetCursor(20, 20);
 8000a22:	2114      	movs	r1, #20
 8000a24:	2014      	movs	r0, #20
 8000a26:	f004 fdbf 	bl	80055a8 <ssd1306_SetCursor>
	 		  			  ssd1306_WriteString("Pass", Font_7x10, White);
 8000a2a:	4a25      	ldr	r2, [pc, #148]	; (8000ac0 <main+0x16c>)
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	ca06      	ldmia	r2, {r1, r2}
 8000a30:	4829      	ldr	r0, [pc, #164]	; (8000ad8 <main+0x184>)
 8000a32:	f004 fd93 	bl	800555c <ssd1306_WriteString>
	 		  			  ssd1306_UpdateScreen();
 8000a36:	f004 fc8d 	bl	8005354 <ssd1306_UpdateScreen>
 8000a3a:	e010      	b.n	8000a5e <main+0x10a>
	 		  			  // caso contrario se imprime Fail en la pantalla.
	 		  		  } else {
	 		  			  ssd1306_Init();
 8000a3c:	f004 fbfc 	bl	8005238 <ssd1306_Init>
	 		  			  ssd1306_Fill(Black);
 8000a40:	2000      	movs	r0, #0
 8000a42:	f004 fc63 	bl	800530c <ssd1306_Fill>
	 		  			  ssd1306_SetCursor(20, 20);
 8000a46:	2114      	movs	r1, #20
 8000a48:	2014      	movs	r0, #20
 8000a4a:	f004 fdad 	bl	80055a8 <ssd1306_SetCursor>
	 		  			  ssd1306_WriteString("Fail", Font_7x10, White);
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <main+0x16c>)
 8000a50:	2301      	movs	r3, #1
 8000a52:	ca06      	ldmia	r2, {r1, r2}
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <main+0x188>)
 8000a56:	f004 fd81 	bl	800555c <ssd1306_WriteString>
	 		  			  ssd1306_UpdateScreen();
 8000a5a:	f004 fc7b 	bl	8005354 <ssd1306_UpdateScreen>
	 		  		  	  	  }
	 		  	  	  }
	 		  	  // Una vez ingresados los datos de y se a verificado si es correcta o no la key presione  '*' para ingresar nuevamente una key.
	 		  	  if (key_pressed == 0x0E){
 8000a5e:	88bb      	ldrh	r3, [r7, #4]
 8000a60:	2b0e      	cmp	r3, #14
 8000a62:	d121      	bne.n	8000aa8 <main+0x154>
	 		  		  for (uint8_t i = 0; i < 5 ; i++){
 8000a64:	2300      	movs	r3, #0
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	e00a      	b.n	8000a80 <main+0x12c>
	 		  			  memory[i]= 0;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	4a18      	ldr	r2, [pc, #96]	; (8000ad0 <main+0x17c>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	 		  			  count = 0;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <main+0x180>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
	 		  		  for (uint8_t i = 0; i < 5 ; i++){
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d9f1      	bls.n	8000a6a <main+0x116>
	 		  		  }
	 		  		  ssd1306_Init();
 8000a86:	f004 fbd7 	bl	8005238 <ssd1306_Init>
	 		  		  ssd1306_Fill(Black);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f004 fc3e 	bl	800530c <ssd1306_Fill>
	 		  		  ssd1306_SetCursor(20, 20);
 8000a90:	2114      	movs	r1, #20
 8000a92:	2014      	movs	r0, #20
 8000a94:	f004 fd88 	bl	80055a8 <ssd1306_SetCursor>
	 		  		  ssd1306_WriteString("Ingrese key", Font_7x10, White);
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <main+0x16c>)
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	ca06      	ldmia	r2, {r1, r2}
 8000a9e:	4810      	ldr	r0, [pc, #64]	; (8000ae0 <main+0x18c>)
 8000aa0:	f004 fd5c 	bl	800555c <ssd1306_WriteString>
	 		  		  ssd1306_UpdateScreen();
 8000aa4:	f004 fc56 	bl	8005354 <ssd1306_UpdateScreen>
	 		  	  }
	 		  key_event = 0xFF; // clean the event
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <main+0x174>)
 8000aaa:	22ff      	movs	r2, #255	; 0xff
 8000aac:	801a      	strh	r2, [r3, #0]
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 8000aae:	e77b      	b.n	80009a8 <main+0x54>
 8000ab0:	2000016c 	.word	0x2000016c
 8000ab4:	2000017c 	.word	0x2000017c
 8000ab8:	20000188 	.word	0x20000188
 8000abc:	200000e4 	.word	0x200000e4
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	0800657c 	.word	0x0800657c
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	08006580 	.word	0x08006580
 8000ad0:	2000018c 	.word	0x2000018c
 8000ad4:	20000189 	.word	0x20000189
 8000ad8:	08006594 	.word	0x08006594
 8000adc:	0800659c 	.word	0x0800659c
 8000ae0:	080065a4 	.word	0x080065a4

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b096      	sub	sp, #88	; 0x58
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2244      	movs	r2, #68	; 0x44
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 ff98 	bl	8005a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b0a:	f001 fc81 	bl	8002410 <HAL_PWREx_ControlVoltageScaling>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b14:	f000 f960 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b20:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	2310      	movs	r3, #16
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b32:	230a      	movs	r3, #10
 8000b34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fcb8 	bl	80024bc <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b52:	f000 f941 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 f880 	bl	8002c74 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b7a:	f000 f92d 	bl	8000dd8 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3758      	adds	r7, #88	; 0x58
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000b8e:	4a1c      	ldr	r2, [pc, #112]	; (8000c00 <MX_I2C1_Init+0x78>)
 8000b90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <MX_I2C1_Init+0x7c>)
 8000b96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bc4:	f000 ff6a 	bl	8001a9c <HAL_I2C_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bce:	f000 f903 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000bd6:	f001 fb75 	bl	80022c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000be0:	f000 f8fa 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000be4:	2100      	movs	r1, #0
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_I2C1_Init+0x74>)
 8000be8:	f001 fbb7 	bl	800235a <HAL_I2CEx_ConfigDigitalFilter>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bf2:	f000 f8f1 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000090 	.word	0x20000090
 8000c00:	40005400 	.word	0x40005400
 8000c04:	10909cec 	.word	0x10909cec

08000c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c0e:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <MX_USART2_UART_Init+0x5c>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_USART2_UART_Init+0x58>)
 8000c4c:	f002 fef2 	bl	8003a34 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c56:	f000 f8bf 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000e4 	.word	0x200000e4
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b53      	ldr	r3, [pc, #332]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a52      	ldr	r2, [pc, #328]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b50      	ldr	r3, [pc, #320]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c96:	4b4d      	ldr	r3, [pc, #308]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a4c      	ldr	r2, [pc, #304]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b4a      	ldr	r3, [pc, #296]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b44      	ldr	r3, [pc, #272]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000ccc:	f043 0302 	orr.w	r3, r3, #2
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b3e      	ldr	r3, [pc, #248]	; (8000dcc <MX_GPIO_Init+0x164>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f000 fea8 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2138      	movs	r1, #56	; 0x38
 8000cf0:	4837      	ldr	r0, [pc, #220]	; (8000dd0 <MX_GPIO_Init+0x168>)
 8000cf2:	f000 fea3 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cfc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4831      	ldr	r0, [pc, #196]	; (8000dd4 <MX_GPIO_Init+0x16c>)
 8000d0e:	f000 fceb 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 8000d12:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f000 fcdb 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 8000d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0x168>)
 8000d4a:	f000 fccd 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	4619      	mov	r1, r3
 8000d62:	481c      	ldr	r0, [pc, #112]	; (8000dd4 <MX_GPIO_Init+0x16c>)
 8000d64:	f000 fcc0 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 8000d68:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d82:	f000 fcb1 	bl	80016e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000d86:	2338      	movs	r3, #56	; 0x38
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <MX_GPIO_Init+0x168>)
 8000d9e:	f000 fca3 	bl	80016e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	2017      	movs	r0, #23
 8000da8:	f000 fbe9 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dac:	2017      	movs	r0, #23
 8000dae:	f000 fc02 	bl	80015b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2028      	movs	r0, #40	; 0x28
 8000db8:	f000 fbe1 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dbc:	2028      	movs	r0, #40	; 0x28
 8000dbe:	f000 fbfa 	bl	80015b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>

08000de2 <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	4613      	mov	r3, r2
 8000dee:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	729a      	strb	r2, [r3, #10]
}
 8000e0e:	bf00      	nop
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	460b      	mov	r3, r1
 8000e24:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	8892      	ldrh	r2, [r2, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	78fa      	ldrb	r2, [r7, #3]
 8000e32:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	889b      	ldrh	r3, [r3, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	8912      	ldrh	r2, [r2, #8]
 8000e3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e42:	fb01 f202 	mul.w	r2, r1, r2
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	7a9b      	ldrb	r3, [r3, #10]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d00c      	beq.n	8000e70 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	88db      	ldrh	r3, [r3, #6]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	8912      	ldrh	r2, [r2, #8]
 8000e60:	fb93 f1f2 	sdiv	r1, r3, r2
 8000e64:	fb01 f202 	mul.w	r2, r1, r2
 8000e68:	1a9b      	subs	r3, r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	889a      	ldrh	r2, [r3, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	88db      	ldrh	r3, [r3, #6]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d104      	bne.n	8000e86 <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	729a      	strb	r2, [r3, #10]
		return 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e000      	b.n	8000e88 <ring_buffer_put+0x6e>
	}
	return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b0ac      	sub	sp, #176	; 0xb0
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2288      	movs	r2, #136	; 0x88
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f004 fd93 	bl	8005a28 <memset>
  if(hi2c->Instance==I2C1)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a21      	ldr	r2, [pc, #132]	; (8000f8c <HAL_I2C_MspInit+0xb0>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d13b      	bne.n	8000f84 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f0c:	2340      	movs	r3, #64	; 0x40
 8000f0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 f8cf 	bl	80030bc <HAL_RCCEx_PeriphCLKConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f24:	f7ff ff58 	bl	8000dd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_I2C_MspInit+0xb4>)
 8000f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_I2C_MspInit+0xb4>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_I2C_MspInit+0xb4>)
 8000f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f48:	2312      	movs	r3, #18
 8000f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	2303      	movs	r3, #3
 8000f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f64:	4619      	mov	r1, r3
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <HAL_I2C_MspInit+0xb8>)
 8000f68:	f000 fbbe 	bl	80016e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_I2C_MspInit+0xb4>)
 8000f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_I2C_MspInit+0xb4>)
 8000f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f76:	6593      	str	r3, [r2, #88]	; 0x58
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_I2C_MspInit+0xb4>)
 8000f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	37b0      	adds	r7, #176	; 0xb0
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	40021000 	.word	0x40021000
 8000f94:	48000400 	.word	0x48000400

08000f98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b0ac      	sub	sp, #176	; 0xb0
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2288      	movs	r2, #136	; 0x88
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fd35 	bl	8005a28 <memset>
  if(huart->Instance==USART2)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a25      	ldr	r2, [pc, #148]	; (8001058 <HAL_UART_MspInit+0xc0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d143      	bne.n	8001050 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 f871 	bl	80030bc <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fe0:	f7ff fefa 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <HAL_UART_MspInit+0xc4>)
 8000fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe8:	4a1c      	ldr	r2, [pc, #112]	; (800105c <HAL_UART_MspInit+0xc4>)
 8000fea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fee:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_UART_MspInit+0xc4>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_UART_MspInit+0xc4>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001000:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_UART_MspInit+0xc4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_UART_MspInit+0xc4>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	f003 0301 	and.w	r3, r3, #1
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001014:	230c      	movs	r3, #12
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001036:	4619      	mov	r1, r3
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 fb54 	bl	80016e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2100      	movs	r1, #0
 8001044:	2026      	movs	r0, #38	; 0x26
 8001046:	f000 fa9a 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800104a:	2026      	movs	r0, #38	; 0x26
 800104c:	f000 fab3 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001050:	bf00      	nop
 8001052:	37b0      	adds	r7, #176	; 0xb0
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40004400 	.word	0x40004400
 800105c:	40021000 	.word	0x40021000

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f948 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 80010b8:	2080      	movs	r0, #128	; 0x80
 80010ba:	f000 fcd7 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 80010be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010c2:	f000 fcd3 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 80010c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ca:	f000 fccf 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <USART2_IRQHandler+0x10>)
 80010da:	f002 fdcf 	bl	8003c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000e4 	.word	0x200000e4

080010e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 80010ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010f0:	f000 fcbc 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010f8:	f000 fcb8 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e00a      	b.n	8001128 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001112:	f3af 8000 	nop.w
 8001116:	4601      	mov	r1, r0
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	60ba      	str	r2, [r7, #8]
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <_read+0x12>
  }

  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_close>:
  }
  return len;
}

int _close(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001162:	605a      	str	r2, [r3, #4]
  return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_isatty>:

int _isatty(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f004 fc76 	bl	8005ac4 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20018000 	.word	0x20018000
 8001204:	00000400 	.word	0x00000400
 8001208:	2000019c 	.word	0x2000019c
 800120c:	200006f8 	.word	0x200006f8

08001210 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800126c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001238:	f7ff ffea 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f004 fc35 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001266:	f7ff fb75 	bl	8000954 <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001278:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 800127c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001280:	200006f8 	.word	0x200006f8

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_Init+0x3c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_Init+0x3c>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800129e:	2003      	movs	r0, #3
 80012a0:	f000 f962 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 f80f 	bl	80012c8 <HAL_InitTick>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d002      	beq.n	80012b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	e001      	b.n	80012ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b6:	f7ff fded 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40022000 	.word	0x40022000

080012c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_InitTick+0x6c>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_InitTick+0x70>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f96d 	bl	80015d2 <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10f      	bne.n	800131e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d809      	bhi.n	8001318 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f937 	bl	800157e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_InitTick+0x74>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e007      	b.n	8001328 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e004      	b.n	8001328 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e001      	b.n	8001328 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001328:	7bfb      	ldrb	r3, [r7, #15]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000000c 	.word	0x2000000c
 8001338:	20000004 	.word	0x20000004
 800133c:	20000008 	.word	0x20000008

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	2000000c 	.word	0x2000000c
 8001364:	200001a0 	.word	0x200001a0

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200001a0 	.word	0x200001a0

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	2000000c 	.word	0x2000000c

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	; (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d008      	beq.n	8001614 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2204      	movs	r2, #4
 8001606:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e022      	b.n	800165a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 020e 	bic.w	r2, r2, #14
 8001622:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001638:	f003 021c 	and.w	r2, r3, #28
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	2101      	movs	r1, #1
 8001642:	fa01 f202 	lsl.w	r2, r1, r2
 8001646:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d005      	beq.n	800168a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2204      	movs	r2, #4
 8001682:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e029      	b.n	80016de <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 020e 	bic.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f003 021c 	and.w	r2, r3, #28
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	2101      	movs	r1, #1
 80016b8:	fa01 f202 	lsl.w	r2, r1, r2
 80016bc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4798      	blx	r3
    }
  }
  return status;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	e17f      	b.n	80019f8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa01 f303 	lsl.w	r3, r1, r3
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8171 	beq.w	80019f2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d005      	beq.n	8001728 <HAL_GPIO_Init+0x40>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d130      	bne.n	800178a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	2203      	movs	r2, #3
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4013      	ands	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800175e:	2201      	movs	r2, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	091b      	lsrs	r3, r3, #4
 8001774:	f003 0201 	and.w	r2, r3, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b03      	cmp	r3, #3
 8001794:	d118      	bne.n	80017c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800179c:	2201      	movs	r2, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	08db      	lsrs	r3, r3, #3
 80017b2:	f003 0201 	and.w	r2, r3, #1
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d017      	beq.n	8001804 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	2203      	movs	r2, #3
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	43db      	mvns	r3, r3
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4013      	ands	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d123      	bne.n	8001858 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	08da      	lsrs	r2, r3, #3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3208      	adds	r2, #8
 8001818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	691a      	ldr	r2, [r3, #16]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	6939      	ldr	r1, [r7, #16]
 8001854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	2203      	movs	r2, #3
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80ac 	beq.w	80019f2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800189a:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_GPIO_Init+0x330>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	4a5e      	ldr	r2, [pc, #376]	; (8001a18 <HAL_GPIO_Init+0x330>)
 80018a0:	f043 0301 	orr.w	r3, r3, #1
 80018a4:	6613      	str	r3, [r2, #96]	; 0x60
 80018a6:	4b5c      	ldr	r3, [pc, #368]	; (8001a18 <HAL_GPIO_Init+0x330>)
 80018a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b2:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_GPIO_Init+0x334>)
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x242>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_GPIO_Init+0x338>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x23e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <HAL_GPIO_Init+0x33c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x23a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4d      	ldr	r2, [pc, #308]	; (8001a28 <HAL_GPIO_Init+0x340>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x236>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4c      	ldr	r2, [pc, #304]	; (8001a2c <HAL_GPIO_Init+0x344>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x232>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4b      	ldr	r2, [pc, #300]	; (8001a30 <HAL_GPIO_Init+0x348>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x22e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4a      	ldr	r2, [pc, #296]	; (8001a34 <HAL_GPIO_Init+0x34c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x22a>
 800190e:	2306      	movs	r3, #6
 8001910:	e00c      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001912:	2307      	movs	r3, #7
 8001914:	e00a      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001916:	2305      	movs	r3, #5
 8001918:	e008      	b.n	800192c <HAL_GPIO_Init+0x244>
 800191a:	2304      	movs	r3, #4
 800191c:	e006      	b.n	800192c <HAL_GPIO_Init+0x244>
 800191e:	2303      	movs	r3, #3
 8001920:	e004      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001922:	2302      	movs	r3, #2
 8001924:	e002      	b.n	800192c <HAL_GPIO_Init+0x244>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <HAL_GPIO_Init+0x244>
 800192a:	2300      	movs	r3, #0
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	f002 0203 	and.w	r2, r2, #3
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	4093      	lsls	r3, r2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800193c:	4937      	ldr	r1, [pc, #220]	; (8001a1c <HAL_GPIO_Init+0x334>)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	089b      	lsrs	r3, r3, #2
 8001942:	3302      	adds	r3, #2
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_GPIO_Init+0x350>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196e:	4a32      	ldr	r2, [pc, #200]	; (8001a38 <HAL_GPIO_Init+0x350>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001974:	4b30      	ldr	r3, [pc, #192]	; (8001a38 <HAL_GPIO_Init+0x350>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <HAL_GPIO_Init+0x350>)
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x350>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c2:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_GPIO_Init+0x350>)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_GPIO_Init+0x350>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ec:	4a12      	ldr	r2, [pc, #72]	; (8001a38 <HAL_GPIO_Init+0x350>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f47f ae78 	bne.w	80016f8 <HAL_GPIO_Init+0x10>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	48000400 	.word	0x48000400
 8001a24:	48000800 	.word	0x48000800
 8001a28:	48000c00 	.word	0x48000c00
 8001a2c:	48001000 	.word	0x48001000
 8001a30:	48001400 	.word	0x48001400
 8001a34:	48001800 	.word	0x48001800
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fda6 	bl	80005dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e08d      	b.n	8001bca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff fa0a 	bl	8000edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	; 0x24
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001afc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d107      	bne.n	8001b16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	e006      	b.n	8001b24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d108      	bne.n	8001b3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	e007      	b.n	8001b4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69d9      	ldr	r1, [r3, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	817b      	strh	r3, [r7, #10]
 8001be6:	460b      	mov	r3, r1
 8001be8:	813b      	strh	r3, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	f040 80f9 	bne.w	8001dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_I2C_Mem_Write+0x34>
 8001c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0ed      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Mem_Write+0x4e>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	e0e6      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c2a:	f7ff fb9d 	bl	8001368 <HAL_GetTick>
 8001c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	2319      	movs	r3, #25
 8001c36:	2201      	movs	r2, #1
 8001c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f955 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0d1      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2221      	movs	r2, #33	; 0x21
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6a3a      	ldr	r2, [r7, #32]
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c74:	88f8      	ldrh	r0, [r7, #6]
 8001c76:	893a      	ldrh	r2, [r7, #8]
 8001c78:	8979      	ldrh	r1, [r7, #10]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	4603      	mov	r3, r0
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f000 f8b9 	bl	8001dfc <I2C_RequestMemoryWrite>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0a9      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d90e      	bls.n	8001cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	22ff      	movs	r2, #255	; 0xff
 8001caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	8979      	ldrh	r1, [r7, #10]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	f000 facf 	bl	8002260 <I2C_TransferConfig>
 8001cc2:	e00f      	b.n	8001ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	8979      	ldrh	r1, [r7, #10]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fabe 	bl	8002260 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f94e 	bl	8001f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e07b      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	3b01      	subs	r3, #1
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d034      	beq.n	8001d9c <HAL_I2C_Mem_Write+0x1c8>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d130      	bne.n	8001d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	2200      	movs	r2, #0
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 f8d1 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e04d      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d90e      	bls.n	8001d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	8979      	ldrh	r1, [r7, #10]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fa73 	bl	8002260 <I2C_TransferConfig>
 8001d7a:	e00f      	b.n	8001d9c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	8979      	ldrh	r1, [r7, #10]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fa62 	bl	8002260 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d19e      	bne.n	8001ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f934 	bl	8002018 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e01a      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <HAL_I2C_Mem_Write+0x224>)
 8001dce:	400b      	ands	r3, r1
 8001dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	fe00e800 	.word	0xfe00e800

08001dfc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	817b      	strh	r3, [r7, #10]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	813b      	strh	r3, [r7, #8]
 8001e12:	4613      	mov	r3, r2
 8001e14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	8979      	ldrh	r1, [r7, #10]
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <I2C_RequestMemoryWrite+0xa4>)
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fa1b 	bl	8002260 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	69b9      	ldr	r1, [r7, #24]
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f8ab 	bl	8001f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e02c      	b.n	8001e98 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e4e:	e015      	b.n	8001e7c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f891 	bl	8001f8a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e012      	b.n	8001e98 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e72:	893b      	ldrh	r3, [r7, #8]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	68f8      	ldr	r0, [r7, #12]
 8001e88:	f000 f830 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	80002000 	.word	0x80002000

08001ea4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d103      	bne.n	8001ec2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d007      	beq.n	8001ee0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0201 	orr.w	r2, r2, #1
 8001ede:	619a      	str	r2, [r3, #24]
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001efc:	e031      	b.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d02d      	beq.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7ff fa2f 	bl	8001368 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d122      	bne.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	4013      	ands	r3, r2
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	bf0c      	ite	eq
 8001f2c:	2301      	moveq	r3, #1
 8001f2e:	2300      	movne	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d113      	bne.n	8001f62 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f043 0220 	orr.w	r2, r3, #32
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	bf0c      	ite	eq
 8001f72:	2301      	moveq	r3, #1
 8001f74:	2300      	movne	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d0be      	beq.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f96:	e033      	b.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f87f 	bl	80020a0 <I2C_IsErrorOccurred>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e031      	b.n	8002010 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d025      	beq.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb4:	f7ff f9d8 	bl	8001368 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d302      	bcc.n	8001fca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11a      	bne.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d013      	beq.n	8002000 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fdc:	f043 0220 	orr.w	r2, r3, #32
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e007      	b.n	8002010 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b02      	cmp	r3, #2
 800200c:	d1c4      	bne.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	60f8      	str	r0, [r7, #12]
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002024:	e02f      	b.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f838 	bl	80020a0 <I2C_IsErrorOccurred>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e02d      	b.n	8002096 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203a:	f7ff f995 	bl	8001368 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	429a      	cmp	r2, r3
 8002048:	d302      	bcc.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d11a      	bne.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b20      	cmp	r3, #32
 800205c:	d013      	beq.n	8002086 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f043 0220 	orr.w	r2, r3, #32
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b20      	cmp	r3, #32
 8002092:	d1c8      	bne.n	8002026 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08a      	sub	sp, #40	; 0x28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d068      	beq.n	800219e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2210      	movs	r2, #16
 80020d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020d4:	e049      	b.n	800216a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020dc:	d045      	beq.n	800216a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7ff f943 	bl	8001368 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d302      	bcc.n	80020f4 <I2C_IsErrorOccurred+0x54>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d13a      	bne.n	800216a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002116:	d121      	bne.n	800215c <I2C_IsErrorOccurred+0xbc>
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800211e:	d01d      	beq.n	800215c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	2b20      	cmp	r3, #32
 8002124:	d01a      	beq.n	800215c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002136:	f7ff f917 	bl	8001368 <HAL_GetTick>
 800213a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800213c:	e00e      	b.n	800215c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800213e:	f7ff f913 	bl	8001368 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b19      	cmp	r3, #25
 800214a:	d907      	bls.n	800215c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	f043 0320 	orr.w	r3, r3, #32
 8002152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800215a:	e006      	b.n	800216a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b20      	cmp	r3, #32
 8002168:	d1e9      	bne.n	800213e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b20      	cmp	r3, #32
 8002176:	d003      	beq.n	8002180 <I2C_IsErrorOccurred+0xe0>
 8002178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0aa      	beq.n	80020d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002184:	2b00      	cmp	r3, #0
 8002186:	d103      	bne.n	8002190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2220      	movs	r2, #32
 800218e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00b      	beq.n	80021c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00b      	beq.n	80021ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80021d2:	6a3b      	ldr	r3, [r7, #32]
 80021d4:	f043 0308 	orr.w	r3, r3, #8
 80021d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00b      	beq.n	800220c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	f043 0302 	orr.w	r3, r3, #2
 80021fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800220c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01c      	beq.n	800224e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fe45 	bl	8001ea4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <I2C_IsErrorOccurred+0x1bc>)
 8002226:	400b      	ands	r3, r1
 8002228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	431a      	orrs	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800224e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002252:	4618      	mov	r0, r3
 8002254:	3728      	adds	r7, #40	; 0x28
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	fe00e800 	.word	0xfe00e800

08002260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	4613      	mov	r3, r2
 8002270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002278:	7a7b      	ldrb	r3, [r7, #9]
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002286:	6a3b      	ldr	r3, [r7, #32]
 8002288:	4313      	orrs	r3, r2
 800228a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800228e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	0d5b      	lsrs	r3, r3, #21
 800229a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <I2C_TransferConfig+0x60>)
 80022a0:	430b      	orrs	r3, r1
 80022a2:	43db      	mvns	r3, r3
 80022a4:	ea02 0103 	and.w	r1, r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	03ff63ff 	.word	0x03ff63ff

080022c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d138      	bne.n	800234c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e032      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6819      	ldr	r1, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800235a:	b480      	push	{r7}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b20      	cmp	r3, #32
 800236e:	d139      	bne.n	80023e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800237a:	2302      	movs	r3, #2
 800237c:	e033      	b.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	; 0x24
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0201 	bic.w	r2, r2, #1
 800239c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	021b      	lsls	r3, r3, #8
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0201 	orr.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_PWREx_GetVoltageRange+0x18>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40007000 	.word	0x40007000

08002410 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800241e:	d130      	bne.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002420:	4b23      	ldr	r3, [pc, #140]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800242c:	d038      	beq.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002436:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2232      	movs	r2, #50	; 0x32
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	4a1b      	ldr	r2, [pc, #108]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0c9b      	lsrs	r3, r3, #18
 8002450:	3301      	adds	r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002454:	e002      	b.n	800245c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b01      	subs	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002468:	d102      	bne.n	8002470 <HAL_PWREx_ControlVoltageScaling+0x60>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f2      	bne.n	8002456 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247c:	d110      	bne.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e00f      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002482:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800248a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800248e:	d007      	beq.n	80024a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002498:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800249e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40007000 	.word	0x40007000
 80024b4:	20000004 	.word	0x20000004
 80024b8:	431bde83 	.word	0x431bde83

080024bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e3ca      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b97      	ldr	r3, [pc, #604]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d8:	4b94      	ldr	r3, [pc, #592]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80e4 	beq.w	80026b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_RCC_OscConfig+0x4a>
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b0c      	cmp	r3, #12
 80024fa:	f040 808b 	bne.w	8002614 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b01      	cmp	r3, #1
 8002502:	f040 8087 	bne.w	8002614 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002506:	4b89      	ldr	r3, [pc, #548]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_RCC_OscConfig+0x62>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e3a2      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	4b82      	ldr	r3, [pc, #520]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d004      	beq.n	8002538 <HAL_RCC_OscConfig+0x7c>
 800252e:	4b7f      	ldr	r3, [pc, #508]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002536:	e005      	b.n	8002544 <HAL_RCC_OscConfig+0x88>
 8002538:	4b7c      	ldr	r3, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800253a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	4293      	cmp	r3, r2
 8002546:	d223      	bcs.n	8002590 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 fd55 	bl	8002ffc <RCC_SetFlashLatencyFromMSIRange>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e383      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255c:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a72      	ldr	r2, [pc, #456]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002562:	f043 0308 	orr.w	r3, r3, #8
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	496d      	ldr	r1, [pc, #436]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257a:	4b6c      	ldr	r3, [pc, #432]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	021b      	lsls	r3, r3, #8
 8002588:	4968      	ldr	r1, [pc, #416]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800258a:	4313      	orrs	r3, r2
 800258c:	604b      	str	r3, [r1, #4]
 800258e:	e025      	b.n	80025dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a65      	ldr	r2, [pc, #404]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002596:	f043 0308 	orr.w	r3, r3, #8
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b63      	ldr	r3, [pc, #396]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	4960      	ldr	r1, [pc, #384]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	495b      	ldr	r1, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fd15 	bl	8002ffc <RCC_SetFlashLatencyFromMSIRange>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e343      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025dc:	f000 fc4a 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	4950      	ldr	r1, [pc, #320]	; (8002730 <HAL_RCC_OscConfig+0x274>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
 80025f8:	4a4e      	ldr	r2, [pc, #312]	; (8002734 <HAL_RCC_OscConfig+0x278>)
 80025fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025fc:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fe fe61 	bl	80012c8 <HAL_InitTick>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800260a:	7bfb      	ldrb	r3, [r7, #15]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d052      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002610:	7bfb      	ldrb	r3, [r7, #15]
 8002612:	e327      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d032      	beq.n	8002682 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002628:	f7fe fe9e 	bl	8001368 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002630:	f7fe fe9a 	bl	8001368 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e310      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002642:	4b3a      	ldr	r3, [pc, #232]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a36      	ldr	r2, [pc, #216]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002654:	f043 0308 	orr.w	r3, r3, #8
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b34      	ldr	r3, [pc, #208]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	4931      	ldr	r1, [pc, #196]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002668:	4313      	orrs	r3, r2
 800266a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	492c      	ldr	r1, [pc, #176]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800267c:	4313      	orrs	r3, r2
 800267e:	604b      	str	r3, [r1, #4]
 8002680:	e01a      	b.n	80026b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002682:	4b2a      	ldr	r3, [pc, #168]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a29      	ldr	r2, [pc, #164]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800268e:	f7fe fe6b 	bl	8001368 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002696:	f7fe fe67 	bl	8001368 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e2dd      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026a8:	4b20      	ldr	r3, [pc, #128]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x1da>
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d074      	beq.n	80027ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d005      	beq.n	80026d6 <HAL_RCC_OscConfig+0x21a>
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d10e      	bne.n	80026ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d10b      	bne.n	80026ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d6:	4b15      	ldr	r3, [pc, #84]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d064      	beq.n	80027ac <HAL_RCC_OscConfig+0x2f0>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d160      	bne.n	80027ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e2ba      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x24a>
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_RCC_OscConfig+0x270>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002702:	6013      	str	r3, [r2, #0]
 8002704:	e026      	b.n	8002754 <HAL_RCC_OscConfig+0x298>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800270e:	d115      	bne.n	800273c <HAL_RCC_OscConfig+0x280>
 8002710:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a05      	ldr	r2, [pc, #20]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b03      	ldr	r3, [pc, #12]	; (800272c <HAL_RCC_OscConfig+0x270>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a02      	ldr	r2, [pc, #8]	; (800272c <HAL_RCC_OscConfig+0x270>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e014      	b.n	8002754 <HAL_RCC_OscConfig+0x298>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
 8002730:	080065b0 	.word	0x080065b0
 8002734:	20000004 	.word	0x20000004
 8002738:	20000008 	.word	0x20000008
 800273c:	4ba0      	ldr	r3, [pc, #640]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a9f      	ldr	r2, [pc, #636]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	4b9d      	ldr	r3, [pc, #628]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a9c      	ldr	r2, [pc, #624]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800274e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe fe04 	bl	8001368 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7fe fe00 	bl	8001368 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e276      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002776:	4b92      	ldr	r3, [pc, #584]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x2a8>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe fdf0 	bl	8001368 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7fe fdec 	bl	8001368 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e262      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279e:	4b88      	ldr	r3, [pc, #544]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x2d0>
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d060      	beq.n	800287c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x310>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d116      	bne.n	80027fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	4b7c      	ldr	r3, [pc, #496]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x328>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e23f      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b76      	ldr	r3, [pc, #472]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4973      	ldr	r1, [pc, #460]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	e040      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d023      	beq.n	800284a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002802:	4b6f      	ldr	r3, [pc, #444]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6e      	ldr	r2, [pc, #440]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7fe fdab 	bl	8001368 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002816:	f7fe fda7 	bl	8001368 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e21d      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002828:	4b65      	ldr	r3, [pc, #404]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b62      	ldr	r3, [pc, #392]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	495f      	ldr	r1, [pc, #380]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	e018      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284a:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a5c      	ldr	r2, [pc, #368]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fd87 	bl	8001368 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fd83 	bl	8001368 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1f9      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d03c      	beq.n	8002902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01c      	beq.n	80028ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7fe fd62 	bl	8001368 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7fe fd5e 	bl	8001368 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e1d4      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ba:	4b41      	ldr	r3, [pc, #260]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3ec>
 80028c8:	e01b      	b.n	8002902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	4b3d      	ldr	r3, [pc, #244]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d0:	4a3b      	ldr	r2, [pc, #236]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7fe fd45 	bl	8001368 <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7fe fd41 	bl	8001368 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1b7      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f4:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ef      	bne.n	80028e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80a6 	beq.w	8002a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002914:	4b2a      	ldr	r3, [pc, #168]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a26      	ldr	r2, [pc, #152]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002938:	2301      	movs	r3, #1
 800293a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293c:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <HAL_RCC_OscConfig+0x508>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d118      	bne.n	800297a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b1e      	ldr	r3, [pc, #120]	; (80029c4 <HAL_RCC_OscConfig+0x508>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <HAL_RCC_OscConfig+0x508>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002954:	f7fe fd08 	bl	8001368 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fd04 	bl	8001368 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e17a      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_RCC_OscConfig+0x508>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x4d8>
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002992:	e029      	b.n	80029e8 <HAL_RCC_OscConfig+0x52c>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d115      	bne.n	80029c8 <HAL_RCC_OscConfig+0x50c>
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a03      	ldr	r2, [pc, #12]	; (80029c0 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029bc:	e014      	b.n	80029e8 <HAL_RCC_OscConfig+0x52c>
 80029be:	bf00      	nop
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	4b9c      	ldr	r3, [pc, #624]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	4a9b      	ldr	r2, [pc, #620]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029d8:	4b98      	ldr	r3, [pc, #608]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a97      	ldr	r2, [pc, #604]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d016      	beq.n	8002a1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fcba 	bl	8001368 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fcb6 	bl	8001368 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e12a      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a0e:	4b8b      	ldr	r3, [pc, #556]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0ed      	beq.n	80029f8 <HAL_RCC_OscConfig+0x53c>
 8002a1c:	e015      	b.n	8002a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fca3 	bl	8001368 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fc9f 	bl	8001368 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e113      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	4b7f      	ldr	r3, [pc, #508]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1ed      	bne.n	8002a26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4b7a      	ldr	r3, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a79      	ldr	r2, [pc, #484]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 80fe 	beq.w	8002c62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	f040 80d0 	bne.w	8002c10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a70:	4b72      	ldr	r3, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d130      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d127      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d11f      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab0:	2a07      	cmp	r2, #7
 8002ab2:	bf14      	ite	ne
 8002ab4:	2201      	movne	r2, #1
 8002ab6:	2200      	moveq	r2, #0
 8002ab8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d06e      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d069      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002af8:	4b50      	ldr	r3, [pc, #320]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0ad      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4b      	ldr	r2, [pc, #300]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b14:	f7fe fc28 	bl	8001368 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fc24 	bl	8001368 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e09a      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2e:	4b43      	ldr	r3, [pc, #268]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3a:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b3c:	68da      	ldr	r2, [r3, #12]
 8002b3e:	4b40      	ldr	r3, [pc, #256]	; (8002c40 <HAL_RCC_OscConfig+0x784>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b4a:	3a01      	subs	r2, #1
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	4311      	orrs	r1, r2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b54:	0212      	lsls	r2, r2, #8
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b5c:	0852      	lsrs	r2, r2, #1
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0552      	lsls	r2, r2, #21
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b68:	0852      	lsrs	r2, r2, #1
 8002b6a:	3a01      	subs	r2, #1
 8002b6c:	0652      	lsls	r2, r2, #25
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b74:	0912      	lsrs	r2, r2, #4
 8002b76:	0452      	lsls	r2, r2, #17
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	4930      	ldr	r1, [pc, #192]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b80:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a2d      	ldr	r2, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a2a      	ldr	r2, [pc, #168]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b98:	f7fe fbe6 	bl	8001368 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fbe2 	bl	8001368 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e058      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb2:	4b22      	ldr	r3, [pc, #136]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d0f0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bbe:	e050      	b.n	8002c62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e04f      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d148      	bne.n	8002c62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a19      	ldr	r2, [pc, #100]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bdc:	4b17      	ldr	r3, [pc, #92]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002be6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002be8:	f7fe fbbe 	bl	8001368 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fbba 	bl	8001368 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e030      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c02:	4b0e      	ldr	r3, [pc, #56]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x734>
 8002c0e:	e028      	b.n	8002c62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d023      	beq.n	8002c5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c16:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <HAL_RCC_OscConfig+0x780>)
 8002c1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c22:	f7fe fba1 	bl	8001368 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c28:	e00c      	b.n	8002c44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c2a:	f7fe fb9d 	bl	8001368 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	2b02      	cmp	r3, #2
 8002c36:	d905      	bls.n	8002c44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e013      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <HAL_RCC_OscConfig+0x7b0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ec      	bne.n	8002c2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <HAL_RCC_OscConfig+0x7b0>)
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	4905      	ldr	r1, [pc, #20]	; (8002c6c <HAL_RCC_OscConfig+0x7b0>)
 8002c56:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_OscConfig+0x7b4>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60cb      	str	r3, [r1, #12]
 8002c5c:	e001      	b.n	8002c62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3720      	adds	r7, #32
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	feeefffc 	.word	0xfeeefffc

08002c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e0e7      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c88:	4b75      	ldr	r3, [pc, #468]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d910      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	4b72      	ldr	r3, [pc, #456]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 0207 	bic.w	r2, r3, #7
 8002c9e:	4970      	ldr	r1, [pc, #448]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0cf      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d010      	beq.n	8002ce6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b66      	ldr	r3, [pc, #408]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d908      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd4:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	4960      	ldr	r1, [pc, #384]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04c      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d107      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cfa:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d121      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0a6      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d12:	4b54      	ldr	r3, [pc, #336]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d115      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e09a      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d2a:	4b4e      	ldr	r3, [pc, #312]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e08e      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d3a:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e086      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d4a:	4b46      	ldr	r3, [pc, #280]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f023 0203 	bic.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4943      	ldr	r1, [pc, #268]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe fb04 	bl	8001368 <HAL_GetTick>
 8002d60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fb00 	bl	8001368 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e06e      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 020c 	and.w	r2, r3, #12
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1eb      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689a      	ldr	r2, [r3, #8]
 8002d9c:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d208      	bcs.n	8002dba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b2e      	ldr	r3, [pc, #184]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	492b      	ldr	r1, [pc, #172]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dba:	4b29      	ldr	r3, [pc, #164]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d210      	bcs.n	8002dea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 0207 	bic.w	r2, r3, #7
 8002dd0:	4923      	ldr	r1, [pc, #140]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd8:	4b21      	ldr	r3, [pc, #132]	; (8002e60 <HAL_RCC_ClockConfig+0x1ec>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e036      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002df6:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	4918      	ldr	r1, [pc, #96]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4910      	ldr	r1, [pc, #64]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e28:	f000 f824 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	091b      	lsrs	r3, r3, #4
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	490b      	ldr	r1, [pc, #44]	; (8002e68 <HAL_RCC_ClockConfig+0x1f4>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
 8002e44:	4a09      	ldr	r2, [pc, #36]	; (8002e6c <HAL_RCC_ClockConfig+0x1f8>)
 8002e46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCC_ClockConfig+0x1fc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fa3b 	bl	80012c8 <HAL_InitTick>
 8002e52:	4603      	mov	r3, r0
 8002e54:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e56:	7afb      	ldrb	r3, [r7, #11]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40022000 	.word	0x40022000
 8002e64:	40021000 	.word	0x40021000
 8002e68:	080065b0 	.word	0x080065b0
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	20000008 	.word	0x20000008

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e82:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d121      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d11e      	bne.n	8002ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ea8:	4b34      	ldr	r3, [pc, #208]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eb4:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 030f 	and.w	r3, r3, #15
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e005      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ec4:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	091b      	lsrs	r3, r3, #4
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ed0:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10d      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee4:	e00a      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d102      	bne.n	8002ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	e004      	b.n	8002efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b08      	cmp	r3, #8
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d134      	bne.n	8002f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f02:	4b1e      	ldr	r3, [pc, #120]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d003      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0xac>
 8002f18:	e005      	b.n	8002f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f1c:	617b      	str	r3, [r7, #20]
      break;
 8002f1e:	e005      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f22:	617b      	str	r3, [r7, #20]
      break;
 8002f24:	e002      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	617b      	str	r3, [r7, #20]
      break;
 8002f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	3301      	adds	r3, #1
 8002f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	0a1b      	lsrs	r3, r3, #8
 8002f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	fb03 f202 	mul.w	r2, r3, r2
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f52:	4b0a      	ldr	r3, [pc, #40]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	0e5b      	lsrs	r3, r3, #25
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	080065c8 	.word	0x080065c8
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a1b      	lsrs	r3, r3, #8
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4904      	ldr	r1, [pc, #16]	; (8002fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	f003 031f 	and.w	r3, r3, #31
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	080065c0 	.word	0x080065c0

08002fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fd4:	f7ff ffda 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	0adb      	lsrs	r3, r3, #11
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	4904      	ldr	r1, [pc, #16]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fe6:	5ccb      	ldrb	r3, [r1, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	080065c0 	.word	0x080065c0

08002ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003004:	2300      	movs	r3, #0
 8003006:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003008:	4b2a      	ldr	r3, [pc, #168]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003014:	f7ff f9ee 	bl	80023f4 <HAL_PWREx_GetVoltageRange>
 8003018:	6178      	str	r0, [r7, #20]
 800301a:	e014      	b.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	6593      	str	r3, [r2, #88]	; 0x58
 8003028:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003034:	f7ff f9de 	bl	80023f4 <HAL_PWREx_GetVoltageRange>
 8003038:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4b1e      	ldr	r3, [pc, #120]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003044:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304c:	d10b      	bne.n	8003066 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b80      	cmp	r3, #128	; 0x80
 8003052:	d919      	bls.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2ba0      	cmp	r3, #160	; 0xa0
 8003058:	d902      	bls.n	8003060 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800305a:	2302      	movs	r3, #2
 800305c:	613b      	str	r3, [r7, #16]
 800305e:	e013      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003060:	2301      	movs	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
 8003064:	e010      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b80      	cmp	r3, #128	; 0x80
 800306a:	d902      	bls.n	8003072 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800306c:	2303      	movs	r3, #3
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	e00a      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	d102      	bne.n	800307e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003078:	2302      	movs	r3, #2
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	e004      	b.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d101      	bne.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003084:	2301      	movs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f023 0207 	bic.w	r2, r3, #7
 8003090:	4909      	ldr	r1, [pc, #36]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003098:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40022000 	.word	0x40022000

080030bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030c4:	2300      	movs	r3, #0
 80030c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030c8:	2300      	movs	r3, #0
 80030ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d041      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030e0:	d02a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030e6:	d824      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030ec:	d008      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80030f2:	d81e      	bhi.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030fc:	d010      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030fe:	e018      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003100:	4b86      	ldr	r3, [pc, #536]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a85      	ldr	r2, [pc, #532]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800310c:	e015      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3304      	adds	r3, #4
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fabb 	bl	8003690 <RCCEx_PLLSAI1_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800311e:	e00c      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3320      	adds	r3, #32
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fba6 	bl	8003878 <RCCEx_PLLSAI2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003130:	e003      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	74fb      	strb	r3, [r7, #19]
      break;
 8003136:	e000      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313a:	7cfb      	ldrb	r3, [r7, #19]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10b      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003140:	4b76      	ldr	r3, [pc, #472]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800314e:	4973      	ldr	r1, [pc, #460]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003156:	e001      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	7cfb      	ldrb	r3, [r7, #19]
 800315a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d041      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003170:	d02a      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003176:	d824      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800317c:	d008      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800317e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003182:	d81e      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800318c:	d010      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800318e:	e018      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003190:	4b62      	ldr	r3, [pc, #392]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	4a61      	ldr	r2, [pc, #388]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800319c:	e015      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 fa73 	bl	8003690 <RCCEx_PLLSAI1_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031ae:	e00c      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3320      	adds	r3, #32
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fb5e 	bl	8003878 <RCCEx_PLLSAI2_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	74fb      	strb	r3, [r7, #19]
      break;
 80031c6:	e000      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ca:	7cfb      	ldrb	r3, [r7, #19]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10b      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031d0:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031de:	494f      	ldr	r1, [pc, #316]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031e6:	e001      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	7cfb      	ldrb	r3, [r7, #19]
 80031ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a0 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fa:	2300      	movs	r3, #0
 80031fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031fe:	4b47      	ldr	r3, [pc, #284]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800320a:	2301      	movs	r3, #1
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800320e:	2300      	movs	r3, #0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00d      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003214:	4b41      	ldr	r3, [pc, #260]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003218:	4a40      	ldr	r2, [pc, #256]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321e:	6593      	str	r3, [r2, #88]	; 0x58
 8003220:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003228:	60bb      	str	r3, [r7, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322c:	2301      	movs	r3, #1
 800322e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003230:	4b3b      	ldr	r3, [pc, #236]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a3a      	ldr	r2, [pc, #232]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800323c:	f7fe f894 	bl	8001368 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003242:	e009      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fe f890 	bl	8001368 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d902      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	74fb      	strb	r3, [r7, #19]
        break;
 8003256:	e005      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003258:	4b31      	ldr	r3, [pc, #196]	; (8003320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0ef      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003264:	7cfb      	ldrb	r3, [r7, #19]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d15c      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800326a:	4b2c      	ldr	r3, [pc, #176]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003274:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01f      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	429a      	cmp	r2, r3
 8003286:	d019      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003288:	4b24      	ldr	r3, [pc, #144]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003294:	4b21      	ldr	r3, [pc, #132]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	4a1c      	ldr	r2, [pc, #112]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe f84f 	bl	8001368 <HAL_GetTick>
 80032ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032cc:	e00b      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe f84b 	bl	8001368 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032dc:	4293      	cmp	r3, r2
 80032de:	d902      	bls.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	74fb      	strb	r3, [r7, #19]
            break;
 80032e4:	e006      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0ec      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10c      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800330a:	4904      	ldr	r1, [pc, #16]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330c:	4313      	orrs	r3, r2
 800330e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003312:	e009      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
 8003318:	e006      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003324:	7cfb      	ldrb	r3, [r7, #19]
 8003326:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003328:	7c7b      	ldrb	r3, [r7, #17]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800332e:	4b9e      	ldr	r3, [pc, #632]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003332:	4a9d      	ldr	r2, [pc, #628]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003346:	4b98      	ldr	r3, [pc, #608]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	f023 0203 	bic.w	r2, r3, #3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	4994      	ldr	r1, [pc, #592]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003356:	4313      	orrs	r3, r2
 8003358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003368:	4b8f      	ldr	r3, [pc, #572]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	f023 020c 	bic.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003376:	498c      	ldr	r1, [pc, #560]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800338a:	4b87      	ldr	r3, [pc, #540]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	4983      	ldr	r1, [pc, #524]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033ac:	4b7e      	ldr	r3, [pc, #504]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	497b      	ldr	r1, [pc, #492]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033dc:	4972      	ldr	r1, [pc, #456]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033f0:	4b6d      	ldr	r3, [pc, #436]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	496a      	ldr	r1, [pc, #424]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003420:	4961      	ldr	r1, [pc, #388]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003434:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003442:	4959      	ldr	r1, [pc, #356]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003456:	4b54      	ldr	r3, [pc, #336]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	4950      	ldr	r1, [pc, #320]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003478:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	4948      	ldr	r1, [pc, #288]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	4313      	orrs	r3, r2
 800348a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a8:	493f      	ldr	r1, [pc, #252]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d028      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034bc:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ca:	4937      	ldr	r1, [pc, #220]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034da:	d106      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b32      	ldr	r3, [pc, #200]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a31      	ldr	r2, [pc, #196]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
 80034e8:	e011      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f2:	d10c      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8c8 	bl	8003690 <RCCEx_PLLSAI1_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d028      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	491f      	ldr	r1, [pc, #124]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003538:	d106      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	4a1a      	ldr	r2, [pc, #104]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003544:	60d3      	str	r3, [r2, #12]
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003550:	d10c      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f899 	bl	8003690 <RCCEx_PLLSAI1_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003562:	7cfb      	ldrb	r3, [r7, #19]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003568:	7cfb      	ldrb	r3, [r7, #19]
 800356a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02b      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003586:	4908      	ldr	r1, [pc, #32]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003596:	d109      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	4a02      	ldr	r2, [pc, #8]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a2:	60d3      	str	r3, [r2, #12]
 80035a4:	e014      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2101      	movs	r1, #1
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 f867 	bl	8003690 <RCCEx_PLLSAI1_Config>
 80035c2:	4603      	mov	r3, r0
 80035c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035c6:	7cfb      	ldrb	r3, [r7, #19]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d02f      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ea:	4928      	ldr	r1, [pc, #160]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035fa:	d10d      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3304      	adds	r3, #4
 8003600:	2102      	movs	r1, #2
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f844 	bl	8003690 <RCCEx_PLLSAI1_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d014      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	74bb      	strb	r3, [r7, #18]
 8003616:	e011      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003620:	d10c      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3320      	adds	r3, #32
 8003626:	2102      	movs	r1, #2
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f925 	bl	8003878 <RCCEx_PLLSAI2_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003656:	490d      	ldr	r1, [pc, #52]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800366a:	4b08      	ldr	r3, [pc, #32]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800367a:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003682:	7cbb      	ldrb	r3, [r7, #18]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800369e:	4b75      	ldr	r3, [pc, #468]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d018      	beq.n	80036dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036aa:	4b72      	ldr	r3, [pc, #456]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0203 	and.w	r2, r3, #3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d10d      	bne.n	80036d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
       ||
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036c2:	4b6c      	ldr	r3, [pc, #432]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
       ||
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d047      	beq.n	8003766 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
 80036da:	e044      	b.n	8003766 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d018      	beq.n	8003716 <RCCEx_PLLSAI1_Config+0x86>
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d825      	bhi.n	8003734 <RCCEx_PLLSAI1_Config+0xa4>
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d002      	beq.n	80036f2 <RCCEx_PLLSAI1_Config+0x62>
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d009      	beq.n	8003704 <RCCEx_PLLSAI1_Config+0x74>
 80036f0:	e020      	b.n	8003734 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036f2:	4b60      	ldr	r3, [pc, #384]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d11d      	bne.n	800373a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003702:	e01a      	b.n	800373a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003704:	4b5b      	ldr	r3, [pc, #364]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370c:	2b00      	cmp	r3, #0
 800370e:	d116      	bne.n	800373e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003714:	e013      	b.n	800373e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003716:	4b57      	ldr	r3, [pc, #348]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003722:	4b54      	ldr	r3, [pc, #336]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003732:	e006      	b.n	8003742 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      break;
 8003738:	e004      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373a:	bf00      	nop
 800373c:	e002      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800373e:	bf00      	nop
 8003740:	e000      	b.n	8003744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003742:	bf00      	nop
    }

    if(status == HAL_OK)
 8003744:	7bfb      	ldrb	r3, [r7, #15]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10d      	bne.n	8003766 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800374a:	4b4a      	ldr	r3, [pc, #296]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6819      	ldr	r1, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	430b      	orrs	r3, r1
 8003760:	4944      	ldr	r1, [pc, #272]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d17d      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003778:	f7fd fdf6 	bl	8001368 <HAL_GetTick>
 800377c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800377e:	e009      	b.n	8003794 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003780:	f7fd fdf2 	bl	8001368 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d902      	bls.n	8003794 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	73fb      	strb	r3, [r7, #15]
        break;
 8003792:	e005      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003794:	4b37      	ldr	r3, [pc, #220]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ef      	bne.n	8003780 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d160      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6892      	ldr	r2, [r2, #8]
 80037bc:	0211      	lsls	r1, r2, #8
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	68d2      	ldr	r2, [r2, #12]
 80037c2:	0912      	lsrs	r2, r2, #4
 80037c4:	0452      	lsls	r2, r2, #17
 80037c6:	430a      	orrs	r2, r1
 80037c8:	492a      	ldr	r1, [pc, #168]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	610b      	str	r3, [r1, #16]
 80037ce:	e027      	b.n	8003820 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d112      	bne.n	80037fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037d6:	4b27      	ldr	r3, [pc, #156]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6892      	ldr	r2, [r2, #8]
 80037e6:	0211      	lsls	r1, r2, #8
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6912      	ldr	r2, [r2, #16]
 80037ec:	0852      	lsrs	r2, r2, #1
 80037ee:	3a01      	subs	r2, #1
 80037f0:	0552      	lsls	r2, r2, #21
 80037f2:	430a      	orrs	r2, r1
 80037f4:	491f      	ldr	r1, [pc, #124]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	610b      	str	r3, [r1, #16]
 80037fa:	e011      	b.n	8003820 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6892      	ldr	r2, [r2, #8]
 800380c:	0211      	lsls	r1, r2, #8
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6952      	ldr	r2, [r2, #20]
 8003812:	0852      	lsrs	r2, r2, #1
 8003814:	3a01      	subs	r2, #1
 8003816:	0652      	lsls	r2, r2, #25
 8003818:	430a      	orrs	r2, r1
 800381a:	4916      	ldr	r1, [pc, #88]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381c:	4313      	orrs	r3, r2
 800381e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800382a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382c:	f7fd fd9c 	bl	8001368 <HAL_GetTick>
 8003830:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003832:	e009      	b.n	8003848 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003834:	f7fd fd98 	bl	8001368 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d902      	bls.n	8003848 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	73fb      	strb	r3, [r7, #15]
          break;
 8003846:	e005      	b.n	8003854 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003848:	4b0a      	ldr	r3, [pc, #40]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ef      	beq.n	8003834 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003854:	7bfb      	ldrb	r3, [r7, #15]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	691a      	ldr	r2, [r3, #16]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000

08003878 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003886:	4b6a      	ldr	r3, [pc, #424]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d018      	beq.n	80038c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003892:	4b67      	ldr	r3, [pc, #412]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0203 	and.w	r2, r3, #3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d10d      	bne.n	80038be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
       ||
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d009      	beq.n	80038be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038aa:	4b61      	ldr	r3, [pc, #388]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
       ||
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d047      	beq.n	800394e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
 80038c2:	e044      	b.n	800394e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d018      	beq.n	80038fe <RCCEx_PLLSAI2_Config+0x86>
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d825      	bhi.n	800391c <RCCEx_PLLSAI2_Config+0xa4>
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d002      	beq.n	80038da <RCCEx_PLLSAI2_Config+0x62>
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d009      	beq.n	80038ec <RCCEx_PLLSAI2_Config+0x74>
 80038d8:	e020      	b.n	800391c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038da:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d11d      	bne.n	8003922 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ea:	e01a      	b.n	8003922 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d116      	bne.n	8003926 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038fc:	e013      	b.n	8003926 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038fe:	4b4c      	ldr	r3, [pc, #304]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10f      	bne.n	800392a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800390a:	4b49      	ldr	r3, [pc, #292]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800391a:	e006      	b.n	800392a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	73fb      	strb	r3, [r7, #15]
      break;
 8003920:	e004      	b.n	800392c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800392a:	bf00      	nop
    }

    if(status == HAL_OK)
 800392c:	7bfb      	ldrb	r3, [r7, #15]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10d      	bne.n	800394e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003932:	4b3f      	ldr	r3, [pc, #252]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	430b      	orrs	r3, r1
 8003948:	4939      	ldr	r1, [pc, #228]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800394e:	7bfb      	ldrb	r3, [r7, #15]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d167      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003954:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a35      	ldr	r2, [pc, #212]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800395e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003960:	f7fd fd02 	bl	8001368 <HAL_GetTick>
 8003964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003966:	e009      	b.n	800397c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003968:	f7fd fcfe 	bl	8001368 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d902      	bls.n	800397c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	73fb      	strb	r3, [r7, #15]
        break;
 800397a:	e005      	b.n	8003988 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800397c:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1ef      	bne.n	8003968 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d14a      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003994:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800399c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	0211      	lsls	r1, r2, #8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	0912      	lsrs	r2, r2, #4
 80039ac:	0452      	lsls	r2, r2, #17
 80039ae:	430a      	orrs	r2, r1
 80039b0:	491f      	ldr	r1, [pc, #124]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	614b      	str	r3, [r1, #20]
 80039b6:	e011      	b.n	80039dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039b8:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6892      	ldr	r2, [r2, #8]
 80039c8:	0211      	lsls	r1, r2, #8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6912      	ldr	r2, [r2, #16]
 80039ce:	0852      	lsrs	r2, r2, #1
 80039d0:	3a01      	subs	r2, #1
 80039d2:	0652      	lsls	r2, r2, #25
 80039d4:	430a      	orrs	r2, r1
 80039d6:	4916      	ldr	r1, [pc, #88]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fd fcbe 	bl	8001368 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039f0:	f7fd fcba 	bl	8001368 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
          break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0ef      	beq.n	80039f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	4904      	ldr	r1, [pc, #16]	; (8003a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000

08003a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e040      	b.n	8003ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd fa9e 	bl	8000f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2224      	movs	r2, #36	; 0x24
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fec0 	bl	8004800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fc05 	bl	8004290 <UART_SetConfig>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e01b      	b.n	8003ac8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 ff3f 	bl	8004944 <UART_CheckIdleState>
 8003ac6:	4603      	mov	r3, r0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	603b      	str	r3, [r7, #0]
 8003adc:	4613      	mov	r3, r2
 8003ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae4:	2b20      	cmp	r3, #32
 8003ae6:	d178      	bne.n	8003bda <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_UART_Transmit+0x24>
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e071      	b.n	8003bdc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2221      	movs	r2, #33	; 0x21
 8003b04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b06:	f7fd fc2f 	bl	8001368 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b24:	d108      	bne.n	8003b38 <HAL_UART_Transmit+0x68>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d104      	bne.n	8003b38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	e003      	b.n	8003b40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b40:	e030      	b.n	8003ba4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 ffa1 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e03c      	b.n	8003bdc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10b      	bne.n	8003b80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	881a      	ldrh	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	b292      	uxth	r2, r2
 8003b76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	61bb      	str	r3, [r7, #24]
 8003b7e:	e008      	b.n	8003b92 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b292      	uxth	r2, r2
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	3301      	adds	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1c8      	bne.n	8003b42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2140      	movs	r1, #64	; 0x40
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 ff6a 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e005      	b.n	8003bdc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	e000      	b.n	8003bdc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003bda:	2302      	movs	r3, #2
  }
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08a      	sub	sp, #40	; 0x28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d137      	bne.n	8003c6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Receive_IT+0x24>
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e030      	b.n	8003c6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <HAL_UART_Receive_IT+0x94>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01f      	beq.n	8003c5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d018      	beq.n	8003c5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	613b      	str	r3, [r7, #16]
   return(result);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	623b      	str	r3, [r7, #32]
 8003c4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	69f9      	ldr	r1, [r7, #28]
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 ff7e 	bl	8004b64 <UART_Start_Receive_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	e000      	b.n	8003c6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3728      	adds	r7, #40	; 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40008000 	.word	0x40008000

08003c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0ba      	sub	sp, #232	; 0xe8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ca6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003caa:	4013      	ands	r3, r2
 8003cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d115      	bne.n	8003ce4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc8:	f003 0320 	and.w	r3, r3, #32
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d009      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 82ae 	beq.w	8004236 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
      }
      return;
 8003ce2:	e2a8      	b.n	8004236 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 8117 	beq.w	8003f1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cfe:	4b85      	ldr	r3, [pc, #532]	; (8003f14 <HAL_UART_IRQHandler+0x298>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 810a 	beq.w	8003f1c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d011      	beq.n	8003d38 <HAL_UART_IRQHandler+0xbc>
 8003d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	f043 0201 	orr.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d011      	beq.n	8003d68 <HAL_UART_IRQHandler+0xec>
 8003d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00b      	beq.n	8003d68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2202      	movs	r2, #2
 8003d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d5e:	f043 0204 	orr.w	r2, r3, #4
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d011      	beq.n	8003d98 <HAL_UART_IRQHandler+0x11c>
 8003d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2204      	movs	r2, #4
 8003d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	f043 0202 	orr.w	r2, r3, #2
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d017      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d105      	bne.n	8003dbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003db0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003db4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00b      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d012      	beq.n	8003e06 <HAL_UART_IRQHandler+0x18a>
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00c      	beq.n	8003e06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8214 	beq.w	800423a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e22:	f003 0320 	and.w	r3, r3, #32
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d003      	beq.n	8003e3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d005      	beq.n	8003e5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04f      	beq.n	8003efe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 ff46 	bl	8004cf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d141      	bne.n	8003ef6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003eae:	e841 2300 	strex	r3, r2, [r1]
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1d9      	bne.n	8003e72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d013      	beq.n	8003eee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	4a13      	ldr	r2, [pc, #76]	; (8003f18 <HAL_UART_IRQHandler+0x29c>)
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fbc7 	bl	8001666 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d017      	beq.n	8003f0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eec:	e00f      	b.n	8003f0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9b8 	bl	8004264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef4:	e00b      	b.n	8003f0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f9b4 	bl	8004264 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efc:	e007      	b.n	8003f0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f9b0 	bl	8004264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003f0c:	e195      	b.n	800423a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f0e:	bf00      	nop
    return;
 8003f10:	e193      	b.n	800423a <HAL_UART_IRQHandler+0x5be>
 8003f12:	bf00      	nop
 8003f14:	04000120 	.word	0x04000120
 8003f18:	08004db9 	.word	0x08004db9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	f040 814e 	bne.w	80041c2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8147 	beq.w	80041c2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8140 	beq.w	80041c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2210      	movs	r2, #16
 8003f48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f54:	2b40      	cmp	r3, #64	; 0x40
 8003f56:	f040 80b8 	bne.w	80040ca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8167 	beq.w	800423e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	f080 815f 	bcs.w	800423e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 8086 	bne.w	80040a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1da      	bne.n	8003f9c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3308      	adds	r3, #8
 8003fec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800400a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800400e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004012:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800401c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e1      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800402c:	e853 3f00 	ldrex	r3, [r3]
 8004030:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004038:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3308      	adds	r3, #8
 8004042:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004046:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004048:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800404c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e3      	bne.n	8004022 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	e853 3f00 	ldrex	r3, [r3]
 8004074:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004078:	f023 0310 	bic.w	r3, r3, #16
 800407c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	461a      	mov	r2, r3
 8004086:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800408a:	65bb      	str	r3, [r7, #88]	; 0x58
 800408c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004090:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e4      	bne.n	8004068 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd faa1 	bl	80015ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8d8 	bl	8004278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040c8:	e0b9      	b.n	800423e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f000 80ab 	beq.w	8004242 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80040ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f000 80a6 	beq.w	8004242 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800410a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
 800411a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800411e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e4      	bne.n	80040f6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	623b      	str	r3, [r7, #32]
   return(result);
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004150:	633a      	str	r2, [r7, #48]	; 0x30
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e3      	bne.n	800412c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2220      	movs	r2, #32
 8004168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	60fb      	str	r3, [r7, #12]
   return(result);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f023 0310 	bic.w	r3, r3, #16
 800418c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800419a:	61fb      	str	r3, [r7, #28]
 800419c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419e:	69b9      	ldr	r1, [r7, #24]
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	617b      	str	r3, [r7, #20]
   return(result);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1e4      	bne.n	8004178 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041b8:	4619      	mov	r1, r3
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 f85c 	bl	8004278 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041c0:	e03f      	b.n	8004242 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00e      	beq.n	80041ec <HAL_UART_IRQHandler+0x570>
 80041ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 ffe3 	bl	80051b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041ea:	e02d      	b.n	8004248 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	4798      	blx	r3
    }
    return;
 8004214:	e017      	b.n	8004246 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d012      	beq.n	8004248 <HAL_UART_IRQHandler+0x5cc>
 8004222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00c      	beq.n	8004248 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fdd8 	bl	8004de4 <UART_EndTransmit_IT>
    return;
 8004234:	e008      	b.n	8004248 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004236:	bf00      	nop
 8004238:	e006      	b.n	8004248 <HAL_UART_IRQHandler+0x5cc>
    return;
 800423a:	bf00      	nop
 800423c:	e004      	b.n	8004248 <HAL_UART_IRQHandler+0x5cc>
      return;
 800423e:	bf00      	nop
 8004240:	e002      	b.n	8004248 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004242:	bf00      	nop
 8004244:	e000      	b.n	8004248 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004246:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004248:	37e8      	adds	r7, #232	; 0xe8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop

08004250 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004264:	b480      	push	{r7}
 8004266:	b083      	sub	sp, #12
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b08a      	sub	sp, #40	; 0x28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	431a      	orrs	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4ba4      	ldr	r3, [pc, #656]	; (8004550 <UART_SetConfig+0x2c0>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a99      	ldr	r2, [pc, #612]	; (8004554 <UART_SetConfig+0x2c4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d004      	beq.n	80042fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f8:	4313      	orrs	r3, r2
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430c:	430a      	orrs	r2, r1
 800430e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a90      	ldr	r2, [pc, #576]	; (8004558 <UART_SetConfig+0x2c8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d126      	bne.n	8004368 <UART_SetConfig+0xd8>
 800431a:	4b90      	ldr	r3, [pc, #576]	; (800455c <UART_SetConfig+0x2cc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b03      	cmp	r3, #3
 8004326:	d81b      	bhi.n	8004360 <UART_SetConfig+0xd0>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0xa0>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004341 	.word	0x08004341
 8004334:	08004351 	.word	0x08004351
 8004338:	08004349 	.word	0x08004349
 800433c:	08004359 	.word	0x08004359
 8004340:	2301      	movs	r3, #1
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e116      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004348:	2302      	movs	r3, #2
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800434e:	e112      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004356:	e10e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800435e:	e10a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004366:	e106      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a7c      	ldr	r2, [pc, #496]	; (8004560 <UART_SetConfig+0x2d0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d138      	bne.n	80043e4 <UART_SetConfig+0x154>
 8004372:	4b7a      	ldr	r3, [pc, #488]	; (800455c <UART_SetConfig+0x2cc>)
 8004374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004378:	f003 030c 	and.w	r3, r3, #12
 800437c:	2b0c      	cmp	r3, #12
 800437e:	d82d      	bhi.n	80043dc <UART_SetConfig+0x14c>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0xf8>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043bd 	.word	0x080043bd
 800438c:	080043dd 	.word	0x080043dd
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043dd 	.word	0x080043dd
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
 80043a8:	080043c5 	.word	0x080043c5
 80043ac:	080043dd 	.word	0x080043dd
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	080043dd 	.word	0x080043dd
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	e0d8      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043c4:	2302      	movs	r3, #2
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ca:	e0d4      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043cc:	2304      	movs	r3, #4
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043d2:	e0d0      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043d4:	2308      	movs	r3, #8
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043da:	e0cc      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043dc:	2310      	movs	r3, #16
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043e2:	e0c8      	b.n	8004576 <UART_SetConfig+0x2e6>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a5e      	ldr	r2, [pc, #376]	; (8004564 <UART_SetConfig+0x2d4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d125      	bne.n	800443a <UART_SetConfig+0x1aa>
 80043ee:	4b5b      	ldr	r3, [pc, #364]	; (800455c <UART_SetConfig+0x2cc>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043f8:	2b30      	cmp	r3, #48	; 0x30
 80043fa:	d016      	beq.n	800442a <UART_SetConfig+0x19a>
 80043fc:	2b30      	cmp	r3, #48	; 0x30
 80043fe:	d818      	bhi.n	8004432 <UART_SetConfig+0x1a2>
 8004400:	2b20      	cmp	r3, #32
 8004402:	d00a      	beq.n	800441a <UART_SetConfig+0x18a>
 8004404:	2b20      	cmp	r3, #32
 8004406:	d814      	bhi.n	8004432 <UART_SetConfig+0x1a2>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <UART_SetConfig+0x182>
 800440c:	2b10      	cmp	r3, #16
 800440e:	d008      	beq.n	8004422 <UART_SetConfig+0x192>
 8004410:	e00f      	b.n	8004432 <UART_SetConfig+0x1a2>
 8004412:	2300      	movs	r3, #0
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004418:	e0ad      	b.n	8004576 <UART_SetConfig+0x2e6>
 800441a:	2302      	movs	r3, #2
 800441c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004420:	e0a9      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004422:	2304      	movs	r3, #4
 8004424:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004428:	e0a5      	b.n	8004576 <UART_SetConfig+0x2e6>
 800442a:	2308      	movs	r3, #8
 800442c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004430:	e0a1      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004432:	2310      	movs	r3, #16
 8004434:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004438:	e09d      	b.n	8004576 <UART_SetConfig+0x2e6>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a4a      	ldr	r2, [pc, #296]	; (8004568 <UART_SetConfig+0x2d8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d125      	bne.n	8004490 <UART_SetConfig+0x200>
 8004444:	4b45      	ldr	r3, [pc, #276]	; (800455c <UART_SetConfig+0x2cc>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800444e:	2bc0      	cmp	r3, #192	; 0xc0
 8004450:	d016      	beq.n	8004480 <UART_SetConfig+0x1f0>
 8004452:	2bc0      	cmp	r3, #192	; 0xc0
 8004454:	d818      	bhi.n	8004488 <UART_SetConfig+0x1f8>
 8004456:	2b80      	cmp	r3, #128	; 0x80
 8004458:	d00a      	beq.n	8004470 <UART_SetConfig+0x1e0>
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d814      	bhi.n	8004488 <UART_SetConfig+0x1f8>
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <UART_SetConfig+0x1d8>
 8004462:	2b40      	cmp	r3, #64	; 0x40
 8004464:	d008      	beq.n	8004478 <UART_SetConfig+0x1e8>
 8004466:	e00f      	b.n	8004488 <UART_SetConfig+0x1f8>
 8004468:	2300      	movs	r3, #0
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	e082      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004470:	2302      	movs	r3, #2
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004476:	e07e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447e:	e07a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004486:	e076      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448e:	e072      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a35      	ldr	r2, [pc, #212]	; (800456c <UART_SetConfig+0x2dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d12a      	bne.n	80044f0 <UART_SetConfig+0x260>
 800449a:	4b30      	ldr	r3, [pc, #192]	; (800455c <UART_SetConfig+0x2cc>)
 800449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a8:	d01a      	beq.n	80044e0 <UART_SetConfig+0x250>
 80044aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ae:	d81b      	bhi.n	80044e8 <UART_SetConfig+0x258>
 80044b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b4:	d00c      	beq.n	80044d0 <UART_SetConfig+0x240>
 80044b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ba:	d815      	bhi.n	80044e8 <UART_SetConfig+0x258>
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <UART_SetConfig+0x238>
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c4:	d008      	beq.n	80044d8 <UART_SetConfig+0x248>
 80044c6:	e00f      	b.n	80044e8 <UART_SetConfig+0x258>
 80044c8:	2300      	movs	r3, #0
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ce:	e052      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044d0:	2302      	movs	r3, #2
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d6:	e04e      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044d8:	2304      	movs	r3, #4
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e04a      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044e0:	2308      	movs	r3, #8
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e046      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044e8:	2310      	movs	r3, #16
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e042      	b.n	8004576 <UART_SetConfig+0x2e6>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a17      	ldr	r2, [pc, #92]	; (8004554 <UART_SetConfig+0x2c4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d13a      	bne.n	8004570 <UART_SetConfig+0x2e0>
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <UART_SetConfig+0x2cc>)
 80044fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004508:	d01a      	beq.n	8004540 <UART_SetConfig+0x2b0>
 800450a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800450e:	d81b      	bhi.n	8004548 <UART_SetConfig+0x2b8>
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004514:	d00c      	beq.n	8004530 <UART_SetConfig+0x2a0>
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451a:	d815      	bhi.n	8004548 <UART_SetConfig+0x2b8>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x298>
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004524:	d008      	beq.n	8004538 <UART_SetConfig+0x2a8>
 8004526:	e00f      	b.n	8004548 <UART_SetConfig+0x2b8>
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e022      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004530:	2302      	movs	r3, #2
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004536:	e01e      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	e01a      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004546:	e016      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454e:	e012      	b.n	8004576 <UART_SetConfig+0x2e6>
 8004550:	efff69f3 	.word	0xefff69f3
 8004554:	40008000 	.word	0x40008000
 8004558:	40013800 	.word	0x40013800
 800455c:	40021000 	.word	0x40021000
 8004560:	40004400 	.word	0x40004400
 8004564:	40004800 	.word	0x40004800
 8004568:	40004c00 	.word	0x40004c00
 800456c:	40005000 	.word	0x40005000
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a9f      	ldr	r2, [pc, #636]	; (80047f8 <UART_SetConfig+0x568>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d17a      	bne.n	8004676 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004580:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004584:	2b08      	cmp	r3, #8
 8004586:	d824      	bhi.n	80045d2 <UART_SetConfig+0x342>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x300>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045b5 	.word	0x080045b5
 8004594:	080045d3 	.word	0x080045d3
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045d3 	.word	0x080045d3
 80045a0:	080045c3 	.word	0x080045c3
 80045a4:	080045d3 	.word	0x080045d3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045d3 	.word	0x080045d3
 80045b0:	080045cb 	.word	0x080045cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe fcf6 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
        break;
 80045ba:	e010      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045bc:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <UART_SetConfig+0x56c>)
 80045be:	61fb      	str	r3, [r7, #28]
        break;
 80045c0:	e00d      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045c2:	f7fe fc57 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 80045c6:	61f8      	str	r0, [r7, #28]
        break;
 80045c8:	e009      	b.n	80045de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ce:	61fb      	str	r3, [r7, #28]
        break;
 80045d0:	e005      	b.n	80045de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80045dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80fb 	beq.w	80047dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d305      	bcc.n	8004602 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d903      	bls.n	800460a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004608:	e0e8      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2200      	movs	r2, #0
 800460e:	461c      	mov	r4, r3
 8004610:	4615      	mov	r5, r2
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	022b      	lsls	r3, r5, #8
 800461c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004620:	0222      	lsls	r2, r4, #8
 8004622:	68f9      	ldr	r1, [r7, #12]
 8004624:	6849      	ldr	r1, [r1, #4]
 8004626:	0849      	lsrs	r1, r1, #1
 8004628:	2000      	movs	r0, #0
 800462a:	4688      	mov	r8, r1
 800462c:	4681      	mov	r9, r0
 800462e:	eb12 0a08 	adds.w	sl, r2, r8
 8004632:	eb43 0b09 	adc.w	fp, r3, r9
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004644:	4650      	mov	r0, sl
 8004646:	4659      	mov	r1, fp
 8004648:	f7fb fe12 	bl	8000270 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4613      	mov	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800465a:	d308      	bcc.n	800466e <UART_SetConfig+0x3de>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d204      	bcs.n	800466e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e0b6      	b.n	80047dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004674:	e0b2      	b.n	80047dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d15e      	bne.n	800473e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004680:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004684:	2b08      	cmp	r3, #8
 8004686:	d828      	bhi.n	80046da <UART_SetConfig+0x44a>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x400>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	080046db 	.word	0x080046db
 80046a0:	080046cb 	.word	0x080046cb
 80046a4:	080046db 	.word	0x080046db
 80046a8:	080046db 	.word	0x080046db
 80046ac:	080046db 	.word	0x080046db
 80046b0:	080046d3 	.word	0x080046d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe fc76 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 80046b8:	61f8      	str	r0, [r7, #28]
        break;
 80046ba:	e014      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046bc:	f7fe fc88 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 80046c0:	61f8      	str	r0, [r7, #28]
        break;
 80046c2:	e010      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046c4:	4b4d      	ldr	r3, [pc, #308]	; (80047fc <UART_SetConfig+0x56c>)
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e00d      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ca:	f7fe fbd3 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 80046ce:	61f8      	str	r0, [r7, #28]
        break;
 80046d0:	e009      	b.n	80046e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d6:	61fb      	str	r3, [r7, #28]
        break;
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d077      	beq.n	80047dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	005a      	lsls	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	441a      	add	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004700:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	2b0f      	cmp	r3, #15
 8004706:	d916      	bls.n	8004736 <UART_SetConfig+0x4a6>
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470e:	d212      	bcs.n	8004736 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	b29b      	uxth	r3, r3
 8004714:	f023 030f 	bic.w	r3, r3, #15
 8004718:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	b29a      	uxth	r2, r3
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	4313      	orrs	r3, r2
 800472a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	8afa      	ldrh	r2, [r7, #22]
 8004732:	60da      	str	r2, [r3, #12]
 8004734:	e052      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800473c:	e04e      	b.n	80047dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800473e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004742:	2b08      	cmp	r3, #8
 8004744:	d827      	bhi.n	8004796 <UART_SetConfig+0x506>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x4bc>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe fc18 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8004774:	61f8      	str	r0, [r7, #28]
        break;
 8004776:	e014      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fc2a 	bl	8002fd0 <HAL_RCC_GetPCLK2Freq>
 800477c:	61f8      	str	r0, [r7, #28]
        break;
 800477e:	e010      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b1e      	ldr	r3, [pc, #120]	; (80047fc <UART_SetConfig+0x56c>)
 8004782:	61fb      	str	r3, [r7, #28]
        break;
 8004784:	e00d      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe fb75 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 800478a:	61f8      	str	r0, [r7, #28]
        break;
 800478c:	e009      	b.n	80047a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	61fb      	str	r3, [r7, #28]
        break;
 8004794:	e005      	b.n	80047a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a0:	bf00      	nop
    }

    if (pclk != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d019      	beq.n	80047dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	085a      	lsrs	r2, r3, #1
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	441a      	add	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d909      	bls.n	80047d6 <UART_SetConfig+0x546>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c8:	d205      	bcs.n	80047d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60da      	str	r2, [r3, #12]
 80047d4:	e002      	b.n	80047dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80047e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f6:	bf00      	nop
 80047f8:	40008000 	.word	0x40008000
 80047fc:	00f42400 	.word	0x00f42400

08004800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d00a      	beq.n	800482a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fe:	d10a      	bne.n	8004916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b098      	sub	sp, #96	; 0x60
 8004948:	af02      	add	r7, sp, #8
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004954:	f7fc fd08 	bl	8001368 <HAL_GetTick>
 8004958:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b08      	cmp	r3, #8
 8004966:	d12e      	bne.n	80049c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004970:	2200      	movs	r2, #0
 8004972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f88c 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d021      	beq.n	80049c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498a:	e853 3f00 	ldrex	r3, [r3]
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004996:	653b      	str	r3, [r7, #80]	; 0x50
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	647b      	str	r3, [r7, #68]	; 0x44
 80049a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e6      	bne.n	8004982 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e062      	b.n	8004a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d149      	bne.n	8004a68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049dc:	2200      	movs	r2, #0
 80049de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f856 	bl	8004a94 <UART_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03c      	beq.n	8004a68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	623b      	str	r3, [r7, #32]
   return(result);
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a40:	61fa      	str	r2, [r7, #28]
 8004a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e5      	bne.n	8004a20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e011      	b.n	8004a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3758      	adds	r7, #88	; 0x58
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa4:	e049      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aac:	d045      	beq.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aae:	f7fc fc5b 	bl	8001368 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d302      	bcc.n	8004ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e048      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d031      	beq.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f003 0308 	and.w	r3, r3, #8
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d110      	bne.n	8004b06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f8ff 	bl	8004cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2208      	movs	r2, #8
 8004af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e029      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b14:	d111      	bne.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f8e5 	bl	8004cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e00f      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	4013      	ands	r3, r2
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	bf0c      	ite	eq
 8004b4a:	2301      	moveq	r3, #1
 8004b4c:	2300      	movne	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	79fb      	ldrb	r3, [r7, #7]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d0a6      	beq.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b097      	sub	sp, #92	; 0x5c
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d10e      	bne.n	8004bb6 <UART_Start_Receive_IT+0x52>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d105      	bne.n	8004bac <UART_Start_Receive_IT+0x48>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004ba6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004baa:	e02d      	b.n	8004c08 <UART_Start_Receive_IT+0xa4>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	22ff      	movs	r2, #255	; 0xff
 8004bb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bb4:	e028      	b.n	8004c08 <UART_Start_Receive_IT+0xa4>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <UART_Start_Receive_IT+0x76>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <UART_Start_Receive_IT+0x6c>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bce:	e01b      	b.n	8004c08 <UART_Start_Receive_IT+0xa4>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	227f      	movs	r2, #127	; 0x7f
 8004bd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bd8:	e016      	b.n	8004c08 <UART_Start_Receive_IT+0xa4>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be2:	d10d      	bne.n	8004c00 <UART_Start_Receive_IT+0x9c>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <UART_Start_Receive_IT+0x92>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	227f      	movs	r2, #127	; 0x7f
 8004bf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bf4:	e008      	b.n	8004c08 <UART_Start_Receive_IT+0xa4>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	223f      	movs	r2, #63	; 0x3f
 8004bfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004bfe:	e003      	b.n	8004c08 <UART_Start_Receive_IT+0xa4>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2222      	movs	r2, #34	; 0x22
 8004c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3308      	adds	r3, #8
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c22:	e853 3f00 	ldrex	r3, [r3]
 8004c26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2a:	f043 0301 	orr.w	r3, r3, #1
 8004c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3308      	adds	r3, #8
 8004c36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c38:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c40:	e841 2300 	strex	r3, r2, [r1]
 8004c44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d1e5      	bne.n	8004c18 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c54:	d107      	bne.n	8004c66 <UART_Start_Receive_IT+0x102>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a21      	ldr	r2, [pc, #132]	; (8004ce8 <UART_Start_Receive_IT+0x184>)
 8004c62:	669a      	str	r2, [r3, #104]	; 0x68
 8004c64:	e002      	b.n	8004c6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <UART_Start_Receive_IT+0x188>)
 8004c6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d019      	beq.n	8004ca8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
 8004c94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e6      	bne.n	8004c74 <UART_Start_Receive_IT+0x110>
 8004ca6:	e018      	b.n	8004cda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
 8004cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc6:	623b      	str	r3, [r7, #32]
 8004cc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	69f9      	ldr	r1, [r7, #28]
 8004ccc:	6a3a      	ldr	r2, [r7, #32]
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e6      	bne.n	8004ca8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	375c      	adds	r7, #92	; 0x5c
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	08004ff5 	.word	0x08004ff5
 8004cec:	08004e39 	.word	0x08004e39

08004cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b095      	sub	sp, #84	; 0x54
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d16:	643b      	str	r3, [r7, #64]	; 0x40
 8004d18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e6      	bne.n	8004cf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3308      	adds	r3, #8
 8004d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	3308      	adds	r3, #8
 8004d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e5      	bne.n	8004d2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d118      	bne.n	8004d98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f023 0310 	bic.w	r3, r3, #16
 8004d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6979      	ldr	r1, [r7, #20]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	613b      	str	r3, [r7, #16]
   return(result);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e6      	bne.n	8004d66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004dac:	bf00      	nop
 8004dae:	3754      	adds	r7, #84	; 0x54
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff fa44 	bl	8004264 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6979      	ldr	r1, [r7, #20]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e6      	bne.n	8004dec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2220      	movs	r2, #32
 8004e22:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7ff fa10 	bl	8004250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e30:	bf00      	nop
 8004e32:	3720      	adds	r7, #32
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b09c      	sub	sp, #112	; 0x70
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e50:	2b22      	cmp	r3, #34	; 0x22
 8004e52:	f040 80be 	bne.w	8004fd2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004e5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e64:	b2d9      	uxtb	r1, r3
 8004e66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e70:	400a      	ands	r2, r1
 8004e72:	b2d2      	uxtb	r2, r2
 8004e74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f040 80a3 	bne.w	8004fe6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3308      	adds	r3, #8
 8004ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3308      	adds	r3, #8
 8004ef0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004ef2:	647a      	str	r2, [r7, #68]	; 0x44
 8004ef4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004efa:	e841 2300 	strex	r3, r2, [r1]
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1e5      	bne.n	8004ed2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2220      	movs	r2, #32
 8004f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a34      	ldr	r2, [pc, #208]	; (8004ff0 <UART_RxISR_8BIT+0x1b8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d01f      	beq.n	8004f64 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d018      	beq.n	8004f64 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f46:	663b      	str	r3, [r7, #96]	; 0x60
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f50:	633b      	str	r3, [r7, #48]	; 0x30
 8004f52:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e6      	bne.n	8004f32 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d12e      	bne.n	8004fca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0310 	bic.w	r3, r3, #16
 8004f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	e841 2300 	strex	r3, r2, [r1]
 8004f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e6      	bne.n	8004f72 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b10      	cmp	r3, #16
 8004fb0:	d103      	bne.n	8004fba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff f958 	bl	8004278 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fc8:	e00d      	b.n	8004fe6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fb fae4 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8004fd0:	e009      	b.n	8004fe6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	8b1b      	ldrh	r3, [r3, #24]
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f042 0208 	orr.w	r2, r2, #8
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	831a      	strh	r2, [r3, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	3770      	adds	r7, #112	; 0x70
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40008000 	.word	0x40008000

08004ff4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b09c      	sub	sp, #112	; 0x70
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005002:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800500c:	2b22      	cmp	r3, #34	; 0x22
 800500e:	f040 80be 	bne.w	800518e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005018:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005020:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005022:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005026:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800502a:	4013      	ands	r3, r2
 800502c:	b29a      	uxth	r2, r3
 800502e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005030:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 80a3 	bne.w	80051a2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800506a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800506c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005070:	667b      	str	r3, [r7, #100]	; 0x64
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	461a      	mov	r2, r3
 8005078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800507a:	657b      	str	r3, [r7, #84]	; 0x54
 800507c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005082:	e841 2300 	strex	r3, r2, [r1]
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1e6      	bne.n	800505c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3308      	adds	r3, #8
 8005094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	e853 3f00 	ldrex	r3, [r3]
 800509c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	663b      	str	r3, [r7, #96]	; 0x60
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3308      	adds	r3, #8
 80050ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050ae:	643a      	str	r2, [r7, #64]	; 0x40
 80050b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050b6:	e841 2300 	strex	r3, r2, [r1]
 80050ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d1e5      	bne.n	800508e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2220      	movs	r2, #32
 80050c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a34      	ldr	r2, [pc, #208]	; (80051ac <UART_RxISR_16BIT+0x1b8>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d01f      	beq.n	8005120 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d018      	beq.n	8005120 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e6      	bne.n	80050ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	2b01      	cmp	r3, #1
 8005126:	d12e      	bne.n	8005186 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	60bb      	str	r3, [r7, #8]
   return(result);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f023 0310 	bic.w	r3, r3, #16
 8005142:	65bb      	str	r3, [r7, #88]	; 0x58
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6979      	ldr	r1, [r7, #20]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	613b      	str	r3, [r7, #16]
   return(result);
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b10      	cmp	r3, #16
 800516c:	d103      	bne.n	8005176 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2210      	movs	r2, #16
 8005174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff f87a 	bl	8004278 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005184:	e00d      	b.n	80051a2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fb fa06 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 800518c:	e009      	b.n	80051a2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	8b1b      	ldrh	r3, [r3, #24]
 8005194:	b29a      	uxth	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0208 	orr.w	r2, r2, #8
 800519e:	b292      	uxth	r2, r2
 80051a0:	831a      	strh	r2, [r3, #24]
}
 80051a2:	bf00      	nop
 80051a4:	3770      	adds	r7, #112	; 0x70
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40008000 	.word	0x40008000

080051b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af04      	add	r7, sp, #16
 80051da:	4603      	mov	r3, r0
 80051dc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80051de:	f04f 33ff 	mov.w	r3, #4294967295
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	2301      	movs	r3, #1
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	1dfb      	adds	r3, r7, #7
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2301      	movs	r3, #1
 80051ee:	2200      	movs	r2, #0
 80051f0:	2178      	movs	r1, #120	; 0x78
 80051f2:	4803      	ldr	r0, [pc, #12]	; (8005200 <ssd1306_WriteCommand+0x2c>)
 80051f4:	f7fc fcee 	bl	8001bd4 <HAL_I2C_Mem_Write>
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000090 	.word	0x20000090

08005204 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af04      	add	r7, sp, #16
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	9202      	str	r2, [sp, #8]
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	9300      	str	r3, [sp, #0]
 800521e:	2301      	movs	r3, #1
 8005220:	2240      	movs	r2, #64	; 0x40
 8005222:	2178      	movs	r1, #120	; 0x78
 8005224:	4803      	ldr	r0, [pc, #12]	; (8005234 <ssd1306_WriteData+0x30>)
 8005226:	f7fc fcd5 	bl	8001bd4 <HAL_I2C_Mem_Write>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000090 	.word	0x20000090

08005238 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800523c:	f7ff ffc2 	bl	80051c4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005240:	2064      	movs	r0, #100	; 0x64
 8005242:	f7fc f89d 	bl	8001380 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005246:	2000      	movs	r0, #0
 8005248:	f000 f9da 	bl	8005600 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800524c:	2020      	movs	r0, #32
 800524e:	f7ff ffc1 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005252:	2000      	movs	r0, #0
 8005254:	f7ff ffbe 	bl	80051d4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005258:	20b0      	movs	r0, #176	; 0xb0
 800525a:	f7ff ffbb 	bl	80051d4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800525e:	20c8      	movs	r0, #200	; 0xc8
 8005260:	f7ff ffb8 	bl	80051d4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005264:	2000      	movs	r0, #0
 8005266:	f7ff ffb5 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800526a:	2010      	movs	r0, #16
 800526c:	f7ff ffb2 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005270:	2040      	movs	r0, #64	; 0x40
 8005272:	f7ff ffaf 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005276:	20ff      	movs	r0, #255	; 0xff
 8005278:	f000 f9ae 	bl	80055d8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800527c:	20a1      	movs	r0, #161	; 0xa1
 800527e:	f7ff ffa9 	bl	80051d4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005282:	20a6      	movs	r0, #166	; 0xa6
 8005284:	f7ff ffa6 	bl	80051d4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005288:	20a8      	movs	r0, #168	; 0xa8
 800528a:	f7ff ffa3 	bl	80051d4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800528e:	203f      	movs	r0, #63	; 0x3f
 8005290:	f7ff ffa0 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005294:	20a4      	movs	r0, #164	; 0xa4
 8005296:	f7ff ff9d 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800529a:	20d3      	movs	r0, #211	; 0xd3
 800529c:	f7ff ff9a 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7ff ff97 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80052a6:	20d5      	movs	r0, #213	; 0xd5
 80052a8:	f7ff ff94 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80052ac:	20f0      	movs	r0, #240	; 0xf0
 80052ae:	f7ff ff91 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80052b2:	20d9      	movs	r0, #217	; 0xd9
 80052b4:	f7ff ff8e 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80052b8:	2022      	movs	r0, #34	; 0x22
 80052ba:	f7ff ff8b 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80052be:	20da      	movs	r0, #218	; 0xda
 80052c0:	f7ff ff88 	bl	80051d4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80052c4:	2012      	movs	r0, #18
 80052c6:	f7ff ff85 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80052ca:	20db      	movs	r0, #219	; 0xdb
 80052cc:	f7ff ff82 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80052d0:	2020      	movs	r0, #32
 80052d2:	f7ff ff7f 	bl	80051d4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80052d6:	208d      	movs	r0, #141	; 0x8d
 80052d8:	f7ff ff7c 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80052dc:	2014      	movs	r0, #20
 80052de:	f7ff ff79 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80052e2:	2001      	movs	r0, #1
 80052e4:	f000 f98c 	bl	8005600 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80052e8:	2000      	movs	r0, #0
 80052ea:	f000 f80f 	bl	800530c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80052ee:	f000 f831 	bl	8005354 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80052f2:	4b05      	ldr	r3, [pc, #20]	; (8005308 <ssd1306_Init+0xd0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <ssd1306_Init+0xd0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80052fe:	4b02      	ldr	r3, [pc, #8]	; (8005308 <ssd1306_Init+0xd0>)
 8005300:	2201      	movs	r2, #1
 8005302:	711a      	strb	r2, [r3, #4]
}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200005a4 	.word	0x200005a4

0800530c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e00d      	b.n	8005338 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800531c:	79fb      	ldrb	r3, [r7, #7]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <ssd1306_Fill+0x1a>
 8005322:	2100      	movs	r1, #0
 8005324:	e000      	b.n	8005328 <ssd1306_Fill+0x1c>
 8005326:	21ff      	movs	r1, #255	; 0xff
 8005328:	4a09      	ldr	r2, [pc, #36]	; (8005350 <ssd1306_Fill+0x44>)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	460a      	mov	r2, r1
 8005330:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	3301      	adds	r3, #1
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d3ed      	bcc.n	800531c <ssd1306_Fill+0x10>
    }
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	200001a4 	.word	0x200001a4

08005354 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800535a:	2300      	movs	r3, #0
 800535c:	71fb      	strb	r3, [r7, #7]
 800535e:	e016      	b.n	800538e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005360:	79fb      	ldrb	r3, [r7, #7]
 8005362:	3b50      	subs	r3, #80	; 0x50
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ff34 	bl	80051d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800536c:	2000      	movs	r0, #0
 800536e:	f7ff ff31 	bl	80051d4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005372:	2010      	movs	r0, #16
 8005374:	f7ff ff2e 	bl	80051d4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	01db      	lsls	r3, r3, #7
 800537c:	4a08      	ldr	r2, [pc, #32]	; (80053a0 <ssd1306_UpdateScreen+0x4c>)
 800537e:	4413      	add	r3, r2
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff ff3e 	bl	8005204 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005388:	79fb      	ldrb	r3, [r7, #7]
 800538a:	3301      	adds	r3, #1
 800538c:	71fb      	strb	r3, [r7, #7]
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	2b07      	cmp	r3, #7
 8005392:	d9e5      	bls.n	8005360 <ssd1306_UpdateScreen+0xc>
    }
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	200001a4 	.word	0x200001a4

080053a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4603      	mov	r3, r0
 80053ac:	71fb      	strb	r3, [r7, #7]
 80053ae:	460b      	mov	r3, r1
 80053b0:	71bb      	strb	r3, [r7, #6]
 80053b2:	4613      	mov	r3, r2
 80053b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80053b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	db3d      	blt.n	800543a <ssd1306_DrawPixel+0x96>
 80053be:	79bb      	ldrb	r3, [r7, #6]
 80053c0:	2b3f      	cmp	r3, #63	; 0x3f
 80053c2:	d83a      	bhi.n	800543a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80053c4:	797b      	ldrb	r3, [r7, #5]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d11a      	bne.n	8005400 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80053ca:	79fa      	ldrb	r2, [r7, #7]
 80053cc:	79bb      	ldrb	r3, [r7, #6]
 80053ce:	08db      	lsrs	r3, r3, #3
 80053d0:	b2d8      	uxtb	r0, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	01db      	lsls	r3, r3, #7
 80053d6:	4413      	add	r3, r2
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <ssd1306_DrawPixel+0xa4>)
 80053da:	5cd3      	ldrb	r3, [r2, r3]
 80053dc:	b25a      	sxtb	r2, r3
 80053de:	79bb      	ldrb	r3, [r7, #6]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f303 	lsl.w	r3, r1, r3
 80053ea:	b25b      	sxtb	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b259      	sxtb	r1, r3
 80053f0:	79fa      	ldrb	r2, [r7, #7]
 80053f2:	4603      	mov	r3, r0
 80053f4:	01db      	lsls	r3, r3, #7
 80053f6:	4413      	add	r3, r2
 80053f8:	b2c9      	uxtb	r1, r1
 80053fa:	4a13      	ldr	r2, [pc, #76]	; (8005448 <ssd1306_DrawPixel+0xa4>)
 80053fc:	54d1      	strb	r1, [r2, r3]
 80053fe:	e01d      	b.n	800543c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005400:	79fa      	ldrb	r2, [r7, #7]
 8005402:	79bb      	ldrb	r3, [r7, #6]
 8005404:	08db      	lsrs	r3, r3, #3
 8005406:	b2d8      	uxtb	r0, r3
 8005408:	4603      	mov	r3, r0
 800540a:	01db      	lsls	r3, r3, #7
 800540c:	4413      	add	r3, r2
 800540e:	4a0e      	ldr	r2, [pc, #56]	; (8005448 <ssd1306_DrawPixel+0xa4>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	b25a      	sxtb	r2, r3
 8005414:	79bb      	ldrb	r3, [r7, #6]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f303 	lsl.w	r3, r1, r3
 8005420:	b25b      	sxtb	r3, r3
 8005422:	43db      	mvns	r3, r3
 8005424:	b25b      	sxtb	r3, r3
 8005426:	4013      	ands	r3, r2
 8005428:	b259      	sxtb	r1, r3
 800542a:	79fa      	ldrb	r2, [r7, #7]
 800542c:	4603      	mov	r3, r0
 800542e:	01db      	lsls	r3, r3, #7
 8005430:	4413      	add	r3, r2
 8005432:	b2c9      	uxtb	r1, r1
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <ssd1306_DrawPixel+0xa4>)
 8005436:	54d1      	strb	r1, [r2, r3]
 8005438:	e000      	b.n	800543c <ssd1306_DrawPixel+0x98>
        return;
 800543a:	bf00      	nop
    }
}
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	200001a4 	.word	0x200001a4

0800544c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800544c:	b590      	push	{r4, r7, lr}
 800544e:	b089      	sub	sp, #36	; 0x24
 8005450:	af00      	add	r7, sp, #0
 8005452:	4604      	mov	r4, r0
 8005454:	1d38      	adds	r0, r7, #4
 8005456:	e880 0006 	stmia.w	r0, {r1, r2}
 800545a:	461a      	mov	r2, r3
 800545c:	4623      	mov	r3, r4
 800545e:	73fb      	strb	r3, [r7, #15]
 8005460:	4613      	mov	r3, r2
 8005462:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b1f      	cmp	r3, #31
 8005468:	d902      	bls.n	8005470 <ssd1306_WriteChar+0x24>
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b7e      	cmp	r3, #126	; 0x7e
 800546e:	d901      	bls.n	8005474 <ssd1306_WriteChar+0x28>
        return 0;
 8005470:	2300      	movs	r3, #0
 8005472:	e06d      	b.n	8005550 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8005474:	4b38      	ldr	r3, [pc, #224]	; (8005558 <ssd1306_WriteChar+0x10c>)
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	793b      	ldrb	r3, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	dc06      	bgt.n	8005490 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8005482:	4b35      	ldr	r3, [pc, #212]	; (8005558 <ssd1306_WriteChar+0x10c>)
 8005484:	885b      	ldrh	r3, [r3, #2]
 8005486:	461a      	mov	r2, r3
 8005488:	797b      	ldrb	r3, [r7, #5]
 800548a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	dd01      	ble.n	8005494 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8005490:	2300      	movs	r3, #0
 8005492:	e05d      	b.n	8005550 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	e04c      	b.n	8005534 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	3b20      	subs	r3, #32
 80054a0:	7979      	ldrb	r1, [r7, #5]
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	440b      	add	r3, r1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	4413      	add	r3, r2
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
 80054b8:	e034      	b.n	8005524 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d012      	beq.n	80054f0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80054ca:	4b23      	ldr	r3, [pc, #140]	; (8005558 <ssd1306_WriteChar+0x10c>)
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	4413      	add	r3, r2
 80054d6:	b2d8      	uxtb	r0, r3
 80054d8:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <ssd1306_WriteChar+0x10c>)
 80054da:	885b      	ldrh	r3, [r3, #2]
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	4413      	add	r3, r2
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	7bba      	ldrb	r2, [r7, #14]
 80054e8:	4619      	mov	r1, r3
 80054ea:	f7ff ff5b 	bl	80053a4 <ssd1306_DrawPixel>
 80054ee:	e016      	b.n	800551e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80054f0:	4b19      	ldr	r3, [pc, #100]	; (8005558 <ssd1306_WriteChar+0x10c>)
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	4413      	add	r3, r2
 80054fc:	b2d8      	uxtb	r0, r3
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <ssd1306_WriteChar+0x10c>)
 8005500:	885b      	ldrh	r3, [r3, #2]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4413      	add	r3, r2
 800550a:	b2d9      	uxtb	r1, r3
 800550c:	7bbb      	ldrb	r3, [r7, #14]
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	f7ff ff43 	bl	80053a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	3301      	adds	r3, #1
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	793b      	ldrb	r3, [r7, #4]
 8005526:	461a      	mov	r2, r3
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	4293      	cmp	r3, r2
 800552c:	d3c5      	bcc.n	80054ba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	3301      	adds	r3, #1
 8005532:	61fb      	str	r3, [r7, #28]
 8005534:	797b      	ldrb	r3, [r7, #5]
 8005536:	461a      	mov	r2, r3
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4293      	cmp	r3, r2
 800553c:	d3ad      	bcc.n	800549a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800553e:	4b06      	ldr	r3, [pc, #24]	; (8005558 <ssd1306_WriteChar+0x10c>)
 8005540:	881a      	ldrh	r2, [r3, #0]
 8005542:	793b      	ldrb	r3, [r7, #4]
 8005544:	b29b      	uxth	r3, r3
 8005546:	4413      	add	r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	4b03      	ldr	r3, [pc, #12]	; (8005558 <ssd1306_WriteChar+0x10c>)
 800554c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3724      	adds	r7, #36	; 0x24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd90      	pop	{r4, r7, pc}
 8005558:	200005a4 	.word	0x200005a4

0800555c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	1d38      	adds	r0, r7, #4
 8005566:	e880 0006 	stmia.w	r0, {r1, r2}
 800556a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800556c:	e012      	b.n	8005594 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	7818      	ldrb	r0, [r3, #0]
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	1d3a      	adds	r2, r7, #4
 8005576:	ca06      	ldmia	r2, {r1, r2}
 8005578:	f7ff ff68 	bl	800544c <ssd1306_WriteChar>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d002      	beq.n	800558e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	e008      	b.n	80055a0 <ssd1306_WriteString+0x44>
        }
        str++;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e8      	bne.n	800556e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	781b      	ldrb	r3, [r3, #0]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	460a      	mov	r2, r1
 80055b2:	71fb      	strb	r3, [r7, #7]
 80055b4:	4613      	mov	r3, r2
 80055b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80055b8:	79fb      	ldrb	r3, [r7, #7]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <ssd1306_SetCursor+0x2c>)
 80055be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80055c0:	79bb      	ldrb	r3, [r7, #6]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <ssd1306_SetCursor+0x2c>)
 80055c6:	805a      	strh	r2, [r3, #2]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr
 80055d4:	200005a4 	.word	0x200005a4

080055d8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80055e2:	2381      	movs	r3, #129	; 0x81
 80055e4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fdf3 	bl	80051d4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fdef 	bl	80051d4 <ssd1306_WriteCommand>
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
	...

08005600 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800560a:	79fb      	ldrb	r3, [r7, #7]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8005610:	23af      	movs	r3, #175	; 0xaf
 8005612:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005614:	4b08      	ldr	r3, [pc, #32]	; (8005638 <ssd1306_SetDisplayOn+0x38>)
 8005616:	2201      	movs	r2, #1
 8005618:	715a      	strb	r2, [r3, #5]
 800561a:	e004      	b.n	8005626 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800561c:	23ae      	movs	r3, #174	; 0xae
 800561e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8005620:	4b05      	ldr	r3, [pc, #20]	; (8005638 <ssd1306_SetDisplayOn+0x38>)
 8005622:	2200      	movs	r2, #0
 8005624:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fdd3 	bl	80051d4 <ssd1306_WriteCommand>
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200005a4 	.word	0x200005a4

0800563c <std>:
 800563c:	2300      	movs	r3, #0
 800563e:	b510      	push	{r4, lr}
 8005640:	4604      	mov	r4, r0
 8005642:	e9c0 3300 	strd	r3, r3, [r0]
 8005646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800564a:	6083      	str	r3, [r0, #8]
 800564c:	8181      	strh	r1, [r0, #12]
 800564e:	6643      	str	r3, [r0, #100]	; 0x64
 8005650:	81c2      	strh	r2, [r0, #14]
 8005652:	6183      	str	r3, [r0, #24]
 8005654:	4619      	mov	r1, r3
 8005656:	2208      	movs	r2, #8
 8005658:	305c      	adds	r0, #92	; 0x5c
 800565a:	f000 f9e5 	bl	8005a28 <memset>
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <std+0x38>)
 8005660:	6263      	str	r3, [r4, #36]	; 0x24
 8005662:	4b05      	ldr	r3, [pc, #20]	; (8005678 <std+0x3c>)
 8005664:	62a3      	str	r3, [r4, #40]	; 0x28
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <std+0x40>)
 8005668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <std+0x44>)
 800566c:	6224      	str	r4, [r4, #32]
 800566e:	6323      	str	r3, [r4, #48]	; 0x30
 8005670:	bd10      	pop	{r4, pc}
 8005672:	bf00      	nop
 8005674:	08005879 	.word	0x08005879
 8005678:	0800589b 	.word	0x0800589b
 800567c:	080058d3 	.word	0x080058d3
 8005680:	080058f7 	.word	0x080058f7

08005684 <stdio_exit_handler>:
 8005684:	4a02      	ldr	r2, [pc, #8]	; (8005690 <stdio_exit_handler+0xc>)
 8005686:	4903      	ldr	r1, [pc, #12]	; (8005694 <stdio_exit_handler+0x10>)
 8005688:	4803      	ldr	r0, [pc, #12]	; (8005698 <stdio_exit_handler+0x14>)
 800568a:	f000 b869 	b.w	8005760 <_fwalk_sglue>
 800568e:	bf00      	nop
 8005690:	20000018 	.word	0x20000018
 8005694:	080063c1 	.word	0x080063c1
 8005698:	20000024 	.word	0x20000024

0800569c <cleanup_stdio>:
 800569c:	6841      	ldr	r1, [r0, #4]
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <cleanup_stdio+0x34>)
 80056a0:	4299      	cmp	r1, r3
 80056a2:	b510      	push	{r4, lr}
 80056a4:	4604      	mov	r4, r0
 80056a6:	d001      	beq.n	80056ac <cleanup_stdio+0x10>
 80056a8:	f000 fe8a 	bl	80063c0 <_fflush_r>
 80056ac:	68a1      	ldr	r1, [r4, #8]
 80056ae:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <cleanup_stdio+0x38>)
 80056b0:	4299      	cmp	r1, r3
 80056b2:	d002      	beq.n	80056ba <cleanup_stdio+0x1e>
 80056b4:	4620      	mov	r0, r4
 80056b6:	f000 fe83 	bl	80063c0 <_fflush_r>
 80056ba:	68e1      	ldr	r1, [r4, #12]
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <cleanup_stdio+0x3c>)
 80056be:	4299      	cmp	r1, r3
 80056c0:	d004      	beq.n	80056cc <cleanup_stdio+0x30>
 80056c2:	4620      	mov	r0, r4
 80056c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056c8:	f000 be7a 	b.w	80063c0 <_fflush_r>
 80056cc:	bd10      	pop	{r4, pc}
 80056ce:	bf00      	nop
 80056d0:	200005ac 	.word	0x200005ac
 80056d4:	20000614 	.word	0x20000614
 80056d8:	2000067c 	.word	0x2000067c

080056dc <global_stdio_init.part.0>:
 80056dc:	b510      	push	{r4, lr}
 80056de:	4b0b      	ldr	r3, [pc, #44]	; (800570c <global_stdio_init.part.0+0x30>)
 80056e0:	4c0b      	ldr	r4, [pc, #44]	; (8005710 <global_stdio_init.part.0+0x34>)
 80056e2:	4a0c      	ldr	r2, [pc, #48]	; (8005714 <global_stdio_init.part.0+0x38>)
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	4620      	mov	r0, r4
 80056e8:	2200      	movs	r2, #0
 80056ea:	2104      	movs	r1, #4
 80056ec:	f7ff ffa6 	bl	800563c <std>
 80056f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80056f4:	2201      	movs	r2, #1
 80056f6:	2109      	movs	r1, #9
 80056f8:	f7ff ffa0 	bl	800563c <std>
 80056fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005700:	2202      	movs	r2, #2
 8005702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005706:	2112      	movs	r1, #18
 8005708:	f7ff bf98 	b.w	800563c <std>
 800570c:	200006e4 	.word	0x200006e4
 8005710:	200005ac 	.word	0x200005ac
 8005714:	08005685 	.word	0x08005685

08005718 <__sfp_lock_acquire>:
 8005718:	4801      	ldr	r0, [pc, #4]	; (8005720 <__sfp_lock_acquire+0x8>)
 800571a:	f000 b9fd 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 800571e:	bf00      	nop
 8005720:	200006ed 	.word	0x200006ed

08005724 <__sfp_lock_release>:
 8005724:	4801      	ldr	r0, [pc, #4]	; (800572c <__sfp_lock_release+0x8>)
 8005726:	f000 b9f8 	b.w	8005b1a <__retarget_lock_release_recursive>
 800572a:	bf00      	nop
 800572c:	200006ed 	.word	0x200006ed

08005730 <__sinit>:
 8005730:	b510      	push	{r4, lr}
 8005732:	4604      	mov	r4, r0
 8005734:	f7ff fff0 	bl	8005718 <__sfp_lock_acquire>
 8005738:	6a23      	ldr	r3, [r4, #32]
 800573a:	b11b      	cbz	r3, 8005744 <__sinit+0x14>
 800573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005740:	f7ff bff0 	b.w	8005724 <__sfp_lock_release>
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <__sinit+0x28>)
 8005746:	6223      	str	r3, [r4, #32]
 8005748:	4b04      	ldr	r3, [pc, #16]	; (800575c <__sinit+0x2c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1f5      	bne.n	800573c <__sinit+0xc>
 8005750:	f7ff ffc4 	bl	80056dc <global_stdio_init.part.0>
 8005754:	e7f2      	b.n	800573c <__sinit+0xc>
 8005756:	bf00      	nop
 8005758:	0800569d 	.word	0x0800569d
 800575c:	200006e4 	.word	0x200006e4

08005760 <_fwalk_sglue>:
 8005760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005764:	4607      	mov	r7, r0
 8005766:	4688      	mov	r8, r1
 8005768:	4614      	mov	r4, r2
 800576a:	2600      	movs	r6, #0
 800576c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005770:	f1b9 0901 	subs.w	r9, r9, #1
 8005774:	d505      	bpl.n	8005782 <_fwalk_sglue+0x22>
 8005776:	6824      	ldr	r4, [r4, #0]
 8005778:	2c00      	cmp	r4, #0
 800577a:	d1f7      	bne.n	800576c <_fwalk_sglue+0xc>
 800577c:	4630      	mov	r0, r6
 800577e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d907      	bls.n	8005798 <_fwalk_sglue+0x38>
 8005788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800578c:	3301      	adds	r3, #1
 800578e:	d003      	beq.n	8005798 <_fwalk_sglue+0x38>
 8005790:	4629      	mov	r1, r5
 8005792:	4638      	mov	r0, r7
 8005794:	47c0      	blx	r8
 8005796:	4306      	orrs	r6, r0
 8005798:	3568      	adds	r5, #104	; 0x68
 800579a:	e7e9      	b.n	8005770 <_fwalk_sglue+0x10>

0800579c <iprintf>:
 800579c:	b40f      	push	{r0, r1, r2, r3}
 800579e:	b507      	push	{r0, r1, r2, lr}
 80057a0:	4906      	ldr	r1, [pc, #24]	; (80057bc <iprintf+0x20>)
 80057a2:	ab04      	add	r3, sp, #16
 80057a4:	6808      	ldr	r0, [r1, #0]
 80057a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057aa:	6881      	ldr	r1, [r0, #8]
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	f000 fad7 	bl	8005d60 <_vfiprintf_r>
 80057b2:	b003      	add	sp, #12
 80057b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr
 80057bc:	20000070 	.word	0x20000070

080057c0 <_puts_r>:
 80057c0:	6a03      	ldr	r3, [r0, #32]
 80057c2:	b570      	push	{r4, r5, r6, lr}
 80057c4:	6884      	ldr	r4, [r0, #8]
 80057c6:	4605      	mov	r5, r0
 80057c8:	460e      	mov	r6, r1
 80057ca:	b90b      	cbnz	r3, 80057d0 <_puts_r+0x10>
 80057cc:	f7ff ffb0 	bl	8005730 <__sinit>
 80057d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057d2:	07db      	lsls	r3, r3, #31
 80057d4:	d405      	bmi.n	80057e2 <_puts_r+0x22>
 80057d6:	89a3      	ldrh	r3, [r4, #12]
 80057d8:	0598      	lsls	r0, r3, #22
 80057da:	d402      	bmi.n	80057e2 <_puts_r+0x22>
 80057dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057de:	f000 f99b 	bl	8005b18 <__retarget_lock_acquire_recursive>
 80057e2:	89a3      	ldrh	r3, [r4, #12]
 80057e4:	0719      	lsls	r1, r3, #28
 80057e6:	d513      	bpl.n	8005810 <_puts_r+0x50>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	b18b      	cbz	r3, 8005810 <_puts_r+0x50>
 80057ec:	3e01      	subs	r6, #1
 80057ee:	68a3      	ldr	r3, [r4, #8]
 80057f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057f4:	3b01      	subs	r3, #1
 80057f6:	60a3      	str	r3, [r4, #8]
 80057f8:	b9e9      	cbnz	r1, 8005836 <_puts_r+0x76>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da2e      	bge.n	800585c <_puts_r+0x9c>
 80057fe:	4622      	mov	r2, r4
 8005800:	210a      	movs	r1, #10
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f87b 	bl	80058fe <__swbuf_r>
 8005808:	3001      	adds	r0, #1
 800580a:	d007      	beq.n	800581c <_puts_r+0x5c>
 800580c:	250a      	movs	r5, #10
 800580e:	e007      	b.n	8005820 <_puts_r+0x60>
 8005810:	4621      	mov	r1, r4
 8005812:	4628      	mov	r0, r5
 8005814:	f000 f8b0 	bl	8005978 <__swsetup_r>
 8005818:	2800      	cmp	r0, #0
 800581a:	d0e7      	beq.n	80057ec <_puts_r+0x2c>
 800581c:	f04f 35ff 	mov.w	r5, #4294967295
 8005820:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005822:	07da      	lsls	r2, r3, #31
 8005824:	d405      	bmi.n	8005832 <_puts_r+0x72>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	059b      	lsls	r3, r3, #22
 800582a:	d402      	bmi.n	8005832 <_puts_r+0x72>
 800582c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800582e:	f000 f974 	bl	8005b1a <__retarget_lock_release_recursive>
 8005832:	4628      	mov	r0, r5
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	2b00      	cmp	r3, #0
 8005838:	da04      	bge.n	8005844 <_puts_r+0x84>
 800583a:	69a2      	ldr	r2, [r4, #24]
 800583c:	429a      	cmp	r2, r3
 800583e:	dc06      	bgt.n	800584e <_puts_r+0x8e>
 8005840:	290a      	cmp	r1, #10
 8005842:	d004      	beq.n	800584e <_puts_r+0x8e>
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	7019      	strb	r1, [r3, #0]
 800584c:	e7cf      	b.n	80057ee <_puts_r+0x2e>
 800584e:	4622      	mov	r2, r4
 8005850:	4628      	mov	r0, r5
 8005852:	f000 f854 	bl	80058fe <__swbuf_r>
 8005856:	3001      	adds	r0, #1
 8005858:	d1c9      	bne.n	80057ee <_puts_r+0x2e>
 800585a:	e7df      	b.n	800581c <_puts_r+0x5c>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	250a      	movs	r5, #10
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	6022      	str	r2, [r4, #0]
 8005864:	701d      	strb	r5, [r3, #0]
 8005866:	e7db      	b.n	8005820 <_puts_r+0x60>

08005868 <puts>:
 8005868:	4b02      	ldr	r3, [pc, #8]	; (8005874 <puts+0xc>)
 800586a:	4601      	mov	r1, r0
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	f7ff bfa7 	b.w	80057c0 <_puts_r>
 8005872:	bf00      	nop
 8005874:	20000070 	.word	0x20000070

08005878 <__sread>:
 8005878:	b510      	push	{r4, lr}
 800587a:	460c      	mov	r4, r1
 800587c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005880:	f000 f8fc 	bl	8005a7c <_read_r>
 8005884:	2800      	cmp	r0, #0
 8005886:	bfab      	itete	ge
 8005888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800588a:	89a3      	ldrhlt	r3, [r4, #12]
 800588c:	181b      	addge	r3, r3, r0
 800588e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005892:	bfac      	ite	ge
 8005894:	6563      	strge	r3, [r4, #84]	; 0x54
 8005896:	81a3      	strhlt	r3, [r4, #12]
 8005898:	bd10      	pop	{r4, pc}

0800589a <__swrite>:
 800589a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800589e:	461f      	mov	r7, r3
 80058a0:	898b      	ldrh	r3, [r1, #12]
 80058a2:	05db      	lsls	r3, r3, #23
 80058a4:	4605      	mov	r5, r0
 80058a6:	460c      	mov	r4, r1
 80058a8:	4616      	mov	r6, r2
 80058aa:	d505      	bpl.n	80058b8 <__swrite+0x1e>
 80058ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b0:	2302      	movs	r3, #2
 80058b2:	2200      	movs	r2, #0
 80058b4:	f000 f8d0 	bl	8005a58 <_lseek_r>
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c2:	81a3      	strh	r3, [r4, #12]
 80058c4:	4632      	mov	r2, r6
 80058c6:	463b      	mov	r3, r7
 80058c8:	4628      	mov	r0, r5
 80058ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058ce:	f000 b8e7 	b.w	8005aa0 <_write_r>

080058d2 <__sseek>:
 80058d2:	b510      	push	{r4, lr}
 80058d4:	460c      	mov	r4, r1
 80058d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058da:	f000 f8bd 	bl	8005a58 <_lseek_r>
 80058de:	1c43      	adds	r3, r0, #1
 80058e0:	89a3      	ldrh	r3, [r4, #12]
 80058e2:	bf15      	itete	ne
 80058e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058ee:	81a3      	strheq	r3, [r4, #12]
 80058f0:	bf18      	it	ne
 80058f2:	81a3      	strhne	r3, [r4, #12]
 80058f4:	bd10      	pop	{r4, pc}

080058f6 <__sclose>:
 80058f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fa:	f000 b89d 	b.w	8005a38 <_close_r>

080058fe <__swbuf_r>:
 80058fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005900:	460e      	mov	r6, r1
 8005902:	4614      	mov	r4, r2
 8005904:	4605      	mov	r5, r0
 8005906:	b118      	cbz	r0, 8005910 <__swbuf_r+0x12>
 8005908:	6a03      	ldr	r3, [r0, #32]
 800590a:	b90b      	cbnz	r3, 8005910 <__swbuf_r+0x12>
 800590c:	f7ff ff10 	bl	8005730 <__sinit>
 8005910:	69a3      	ldr	r3, [r4, #24]
 8005912:	60a3      	str	r3, [r4, #8]
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	071a      	lsls	r2, r3, #28
 8005918:	d525      	bpl.n	8005966 <__swbuf_r+0x68>
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	b31b      	cbz	r3, 8005966 <__swbuf_r+0x68>
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	6922      	ldr	r2, [r4, #16]
 8005922:	1a98      	subs	r0, r3, r2
 8005924:	6963      	ldr	r3, [r4, #20]
 8005926:	b2f6      	uxtb	r6, r6
 8005928:	4283      	cmp	r3, r0
 800592a:	4637      	mov	r7, r6
 800592c:	dc04      	bgt.n	8005938 <__swbuf_r+0x3a>
 800592e:	4621      	mov	r1, r4
 8005930:	4628      	mov	r0, r5
 8005932:	f000 fd45 	bl	80063c0 <_fflush_r>
 8005936:	b9e0      	cbnz	r0, 8005972 <__swbuf_r+0x74>
 8005938:	68a3      	ldr	r3, [r4, #8]
 800593a:	3b01      	subs	r3, #1
 800593c:	60a3      	str	r3, [r4, #8]
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	6022      	str	r2, [r4, #0]
 8005944:	701e      	strb	r6, [r3, #0]
 8005946:	6962      	ldr	r2, [r4, #20]
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	429a      	cmp	r2, r3
 800594c:	d004      	beq.n	8005958 <__swbuf_r+0x5a>
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	07db      	lsls	r3, r3, #31
 8005952:	d506      	bpl.n	8005962 <__swbuf_r+0x64>
 8005954:	2e0a      	cmp	r6, #10
 8005956:	d104      	bne.n	8005962 <__swbuf_r+0x64>
 8005958:	4621      	mov	r1, r4
 800595a:	4628      	mov	r0, r5
 800595c:	f000 fd30 	bl	80063c0 <_fflush_r>
 8005960:	b938      	cbnz	r0, 8005972 <__swbuf_r+0x74>
 8005962:	4638      	mov	r0, r7
 8005964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005966:	4621      	mov	r1, r4
 8005968:	4628      	mov	r0, r5
 800596a:	f000 f805 	bl	8005978 <__swsetup_r>
 800596e:	2800      	cmp	r0, #0
 8005970:	d0d5      	beq.n	800591e <__swbuf_r+0x20>
 8005972:	f04f 37ff 	mov.w	r7, #4294967295
 8005976:	e7f4      	b.n	8005962 <__swbuf_r+0x64>

08005978 <__swsetup_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4b2a      	ldr	r3, [pc, #168]	; (8005a24 <__swsetup_r+0xac>)
 800597c:	4605      	mov	r5, r0
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	460c      	mov	r4, r1
 8005982:	b118      	cbz	r0, 800598c <__swsetup_r+0x14>
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b90b      	cbnz	r3, 800598c <__swsetup_r+0x14>
 8005988:	f7ff fed2 	bl	8005730 <__sinit>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005992:	0718      	lsls	r0, r3, #28
 8005994:	d422      	bmi.n	80059dc <__swsetup_r+0x64>
 8005996:	06d9      	lsls	r1, r3, #27
 8005998:	d407      	bmi.n	80059aa <__swsetup_r+0x32>
 800599a:	2309      	movs	r3, #9
 800599c:	602b      	str	r3, [r5, #0]
 800599e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295
 80059a8:	e034      	b.n	8005a14 <__swsetup_r+0x9c>
 80059aa:	0758      	lsls	r0, r3, #29
 80059ac:	d512      	bpl.n	80059d4 <__swsetup_r+0x5c>
 80059ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059b0:	b141      	cbz	r1, 80059c4 <__swsetup_r+0x4c>
 80059b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b6:	4299      	cmp	r1, r3
 80059b8:	d002      	beq.n	80059c0 <__swsetup_r+0x48>
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 f8ae 	bl	8005b1c <_free_r>
 80059c0:	2300      	movs	r3, #0
 80059c2:	6363      	str	r3, [r4, #52]	; 0x34
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	2300      	movs	r3, #0
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	89a3      	ldrh	r3, [r4, #12]
 80059d6:	f043 0308 	orr.w	r3, r3, #8
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	6923      	ldr	r3, [r4, #16]
 80059de:	b94b      	cbnz	r3, 80059f4 <__swsetup_r+0x7c>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ea:	d003      	beq.n	80059f4 <__swsetup_r+0x7c>
 80059ec:	4621      	mov	r1, r4
 80059ee:	4628      	mov	r0, r5
 80059f0:	f000 fd34 	bl	800645c <__smakebuf_r>
 80059f4:	89a0      	ldrh	r0, [r4, #12]
 80059f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059fa:	f010 0301 	ands.w	r3, r0, #1
 80059fe:	d00a      	beq.n	8005a16 <__swsetup_r+0x9e>
 8005a00:	2300      	movs	r3, #0
 8005a02:	60a3      	str	r3, [r4, #8]
 8005a04:	6963      	ldr	r3, [r4, #20]
 8005a06:	425b      	negs	r3, r3
 8005a08:	61a3      	str	r3, [r4, #24]
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	b943      	cbnz	r3, 8005a20 <__swsetup_r+0xa8>
 8005a0e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a12:	d1c4      	bne.n	800599e <__swsetup_r+0x26>
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	0781      	lsls	r1, r0, #30
 8005a18:	bf58      	it	pl
 8005a1a:	6963      	ldrpl	r3, [r4, #20]
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	e7f4      	b.n	8005a0a <__swsetup_r+0x92>
 8005a20:	2000      	movs	r0, #0
 8005a22:	e7f7      	b.n	8005a14 <__swsetup_r+0x9c>
 8005a24:	20000070 	.word	0x20000070

08005a28 <memset>:
 8005a28:	4402      	add	r2, r0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <memset+0xa>
 8005a30:	4770      	bx	lr
 8005a32:	f803 1b01 	strb.w	r1, [r3], #1
 8005a36:	e7f9      	b.n	8005a2c <memset+0x4>

08005a38 <_close_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	; (8005a54 <_close_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fb fb79 	bl	800113a <_close>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_close_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_close_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	200006e8 	.word	0x200006e8

08005a58 <_lseek_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	; (8005a78 <_lseek_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb fb8e 	bl	8001188 <_lseek>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_lseek_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_lseek_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	200006e8 	.word	0x200006e8

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	; (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb fb38 	bl	8001100 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200006e8 	.word	0x200006e8

08005aa0 <_write_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	; (8005ac0 <_write_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fa fd5c 	bl	800056c <_write>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_write_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_write_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	200006e8 	.word	0x200006e8

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	; (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000070 	.word	0x20000070

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	; (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	; (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	; (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	; (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f000 fd28 	bl	8006538 <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	08006da0 	.word	0x08006da0
 8005b0c:	08006da0 	.word	0x08006da0
 8005b10:	08006da0 	.word	0x08006da0
 8005b14:	08006da4 	.word	0x08006da4

08005b18 <__retarget_lock_acquire_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_release_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <_free_r>:
 8005b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b1e:	2900      	cmp	r1, #0
 8005b20:	d044      	beq.n	8005bac <_free_r+0x90>
 8005b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b26:	9001      	str	r0, [sp, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8005b2e:	bfb8      	it	lt
 8005b30:	18e4      	addlt	r4, r4, r3
 8005b32:	f000 f8df 	bl	8005cf4 <__malloc_lock>
 8005b36:	4a1e      	ldr	r2, [pc, #120]	; (8005bb0 <_free_r+0x94>)
 8005b38:	9801      	ldr	r0, [sp, #4]
 8005b3a:	6813      	ldr	r3, [r2, #0]
 8005b3c:	b933      	cbnz	r3, 8005b4c <_free_r+0x30>
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	6014      	str	r4, [r2, #0]
 8005b42:	b003      	add	sp, #12
 8005b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b48:	f000 b8da 	b.w	8005d00 <__malloc_unlock>
 8005b4c:	42a3      	cmp	r3, r4
 8005b4e:	d908      	bls.n	8005b62 <_free_r+0x46>
 8005b50:	6825      	ldr	r5, [r4, #0]
 8005b52:	1961      	adds	r1, r4, r5
 8005b54:	428b      	cmp	r3, r1
 8005b56:	bf01      	itttt	eq
 8005b58:	6819      	ldreq	r1, [r3, #0]
 8005b5a:	685b      	ldreq	r3, [r3, #4]
 8005b5c:	1949      	addeq	r1, r1, r5
 8005b5e:	6021      	streq	r1, [r4, #0]
 8005b60:	e7ed      	b.n	8005b3e <_free_r+0x22>
 8005b62:	461a      	mov	r2, r3
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b10b      	cbz	r3, 8005b6c <_free_r+0x50>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d9fa      	bls.n	8005b62 <_free_r+0x46>
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	1855      	adds	r5, r2, r1
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	d10b      	bne.n	8005b8c <_free_r+0x70>
 8005b74:	6824      	ldr	r4, [r4, #0]
 8005b76:	4421      	add	r1, r4
 8005b78:	1854      	adds	r4, r2, r1
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	d1e0      	bne.n	8005b42 <_free_r+0x26>
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	6053      	str	r3, [r2, #4]
 8005b86:	440c      	add	r4, r1
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	e7da      	b.n	8005b42 <_free_r+0x26>
 8005b8c:	d902      	bls.n	8005b94 <_free_r+0x78>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e7d6      	b.n	8005b42 <_free_r+0x26>
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf04      	itt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	bf04      	itt	eq
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	6054      	str	r4, [r2, #4]
 8005baa:	e7ca      	b.n	8005b42 <_free_r+0x26>
 8005bac:	b003      	add	sp, #12
 8005bae:	bd30      	pop	{r4, r5, pc}
 8005bb0:	200006f0 	.word	0x200006f0

08005bb4 <sbrk_aligned>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	4e0e      	ldr	r6, [pc, #56]	; (8005bf0 <sbrk_aligned+0x3c>)
 8005bb8:	460c      	mov	r4, r1
 8005bba:	6831      	ldr	r1, [r6, #0]
 8005bbc:	4605      	mov	r5, r0
 8005bbe:	b911      	cbnz	r1, 8005bc6 <sbrk_aligned+0x12>
 8005bc0:	f000 fcaa 	bl	8006518 <_sbrk_r>
 8005bc4:	6030      	str	r0, [r6, #0]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 fca5 	bl	8006518 <_sbrk_r>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	d00a      	beq.n	8005be8 <sbrk_aligned+0x34>
 8005bd2:	1cc4      	adds	r4, r0, #3
 8005bd4:	f024 0403 	bic.w	r4, r4, #3
 8005bd8:	42a0      	cmp	r0, r4
 8005bda:	d007      	beq.n	8005bec <sbrk_aligned+0x38>
 8005bdc:	1a21      	subs	r1, r4, r0
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 fc9a 	bl	8006518 <_sbrk_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d101      	bne.n	8005bec <sbrk_aligned+0x38>
 8005be8:	f04f 34ff 	mov.w	r4, #4294967295
 8005bec:	4620      	mov	r0, r4
 8005bee:	bd70      	pop	{r4, r5, r6, pc}
 8005bf0:	200006f4 	.word	0x200006f4

08005bf4 <_malloc_r>:
 8005bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf8:	1ccd      	adds	r5, r1, #3
 8005bfa:	f025 0503 	bic.w	r5, r5, #3
 8005bfe:	3508      	adds	r5, #8
 8005c00:	2d0c      	cmp	r5, #12
 8005c02:	bf38      	it	cc
 8005c04:	250c      	movcc	r5, #12
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	4607      	mov	r7, r0
 8005c0a:	db01      	blt.n	8005c10 <_malloc_r+0x1c>
 8005c0c:	42a9      	cmp	r1, r5
 8005c0e:	d905      	bls.n	8005c1c <_malloc_r+0x28>
 8005c10:	230c      	movs	r3, #12
 8005c12:	603b      	str	r3, [r7, #0]
 8005c14:	2600      	movs	r6, #0
 8005c16:	4630      	mov	r0, r6
 8005c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005cf0 <_malloc_r+0xfc>
 8005c20:	f000 f868 	bl	8005cf4 <__malloc_lock>
 8005c24:	f8d8 3000 	ldr.w	r3, [r8]
 8005c28:	461c      	mov	r4, r3
 8005c2a:	bb5c      	cbnz	r4, 8005c84 <_malloc_r+0x90>
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4638      	mov	r0, r7
 8005c30:	f7ff ffc0 	bl	8005bb4 <sbrk_aligned>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	4604      	mov	r4, r0
 8005c38:	d155      	bne.n	8005ce6 <_malloc_r+0xf2>
 8005c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8005c3e:	4626      	mov	r6, r4
 8005c40:	2e00      	cmp	r6, #0
 8005c42:	d145      	bne.n	8005cd0 <_malloc_r+0xdc>
 8005c44:	2c00      	cmp	r4, #0
 8005c46:	d048      	beq.n	8005cda <_malloc_r+0xe6>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4638      	mov	r0, r7
 8005c4e:	eb04 0903 	add.w	r9, r4, r3
 8005c52:	f000 fc61 	bl	8006518 <_sbrk_r>
 8005c56:	4581      	cmp	r9, r0
 8005c58:	d13f      	bne.n	8005cda <_malloc_r+0xe6>
 8005c5a:	6821      	ldr	r1, [r4, #0]
 8005c5c:	1a6d      	subs	r5, r5, r1
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7ff ffa7 	bl	8005bb4 <sbrk_aligned>
 8005c66:	3001      	adds	r0, #1
 8005c68:	d037      	beq.n	8005cda <_malloc_r+0xe6>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	442b      	add	r3, r5
 8005c6e:	6023      	str	r3, [r4, #0]
 8005c70:	f8d8 3000 	ldr.w	r3, [r8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d038      	beq.n	8005cea <_malloc_r+0xf6>
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	42a2      	cmp	r2, r4
 8005c7c:	d12b      	bne.n	8005cd6 <_malloc_r+0xe2>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	605a      	str	r2, [r3, #4]
 8005c82:	e00f      	b.n	8005ca4 <_malloc_r+0xb0>
 8005c84:	6822      	ldr	r2, [r4, #0]
 8005c86:	1b52      	subs	r2, r2, r5
 8005c88:	d41f      	bmi.n	8005cca <_malloc_r+0xd6>
 8005c8a:	2a0b      	cmp	r2, #11
 8005c8c:	d917      	bls.n	8005cbe <_malloc_r+0xca>
 8005c8e:	1961      	adds	r1, r4, r5
 8005c90:	42a3      	cmp	r3, r4
 8005c92:	6025      	str	r5, [r4, #0]
 8005c94:	bf18      	it	ne
 8005c96:	6059      	strne	r1, [r3, #4]
 8005c98:	6863      	ldr	r3, [r4, #4]
 8005c9a:	bf08      	it	eq
 8005c9c:	f8c8 1000 	streq.w	r1, [r8]
 8005ca0:	5162      	str	r2, [r4, r5]
 8005ca2:	604b      	str	r3, [r1, #4]
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f104 060b 	add.w	r6, r4, #11
 8005caa:	f000 f829 	bl	8005d00 <__malloc_unlock>
 8005cae:	f026 0607 	bic.w	r6, r6, #7
 8005cb2:	1d23      	adds	r3, r4, #4
 8005cb4:	1af2      	subs	r2, r6, r3
 8005cb6:	d0ae      	beq.n	8005c16 <_malloc_r+0x22>
 8005cb8:	1b9b      	subs	r3, r3, r6
 8005cba:	50a3      	str	r3, [r4, r2]
 8005cbc:	e7ab      	b.n	8005c16 <_malloc_r+0x22>
 8005cbe:	42a3      	cmp	r3, r4
 8005cc0:	6862      	ldr	r2, [r4, #4]
 8005cc2:	d1dd      	bne.n	8005c80 <_malloc_r+0x8c>
 8005cc4:	f8c8 2000 	str.w	r2, [r8]
 8005cc8:	e7ec      	b.n	8005ca4 <_malloc_r+0xb0>
 8005cca:	4623      	mov	r3, r4
 8005ccc:	6864      	ldr	r4, [r4, #4]
 8005cce:	e7ac      	b.n	8005c2a <_malloc_r+0x36>
 8005cd0:	4634      	mov	r4, r6
 8005cd2:	6876      	ldr	r6, [r6, #4]
 8005cd4:	e7b4      	b.n	8005c40 <_malloc_r+0x4c>
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	e7cc      	b.n	8005c74 <_malloc_r+0x80>
 8005cda:	230c      	movs	r3, #12
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f000 f80e 	bl	8005d00 <__malloc_unlock>
 8005ce4:	e797      	b.n	8005c16 <_malloc_r+0x22>
 8005ce6:	6025      	str	r5, [r4, #0]
 8005ce8:	e7dc      	b.n	8005ca4 <_malloc_r+0xb0>
 8005cea:	605b      	str	r3, [r3, #4]
 8005cec:	deff      	udf	#255	; 0xff
 8005cee:	bf00      	nop
 8005cf0:	200006f0 	.word	0x200006f0

08005cf4 <__malloc_lock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_lock+0x8>)
 8005cf6:	f7ff bf0f 	b.w	8005b18 <__retarget_lock_acquire_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	200006ec 	.word	0x200006ec

08005d00 <__malloc_unlock>:
 8005d00:	4801      	ldr	r0, [pc, #4]	; (8005d08 <__malloc_unlock+0x8>)
 8005d02:	f7ff bf0a 	b.w	8005b1a <__retarget_lock_release_recursive>
 8005d06:	bf00      	nop
 8005d08:	200006ec 	.word	0x200006ec

08005d0c <__sfputc_r>:
 8005d0c:	6893      	ldr	r3, [r2, #8]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	b410      	push	{r4}
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	da08      	bge.n	8005d2a <__sfputc_r+0x1e>
 8005d18:	6994      	ldr	r4, [r2, #24]
 8005d1a:	42a3      	cmp	r3, r4
 8005d1c:	db01      	blt.n	8005d22 <__sfputc_r+0x16>
 8005d1e:	290a      	cmp	r1, #10
 8005d20:	d103      	bne.n	8005d2a <__sfputc_r+0x1e>
 8005d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d26:	f7ff bdea 	b.w	80058fe <__swbuf_r>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	1c58      	adds	r0, r3, #1
 8005d2e:	6010      	str	r0, [r2, #0]
 8005d30:	7019      	strb	r1, [r3, #0]
 8005d32:	4608      	mov	r0, r1
 8005d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <__sfputs_r>:
 8005d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	460f      	mov	r7, r1
 8005d40:	4614      	mov	r4, r2
 8005d42:	18d5      	adds	r5, r2, r3
 8005d44:	42ac      	cmp	r4, r5
 8005d46:	d101      	bne.n	8005d4c <__sfputs_r+0x12>
 8005d48:	2000      	movs	r0, #0
 8005d4a:	e007      	b.n	8005d5c <__sfputs_r+0x22>
 8005d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d50:	463a      	mov	r2, r7
 8005d52:	4630      	mov	r0, r6
 8005d54:	f7ff ffda 	bl	8005d0c <__sfputc_r>
 8005d58:	1c43      	adds	r3, r0, #1
 8005d5a:	d1f3      	bne.n	8005d44 <__sfputs_r+0xa>
 8005d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d60 <_vfiprintf_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	460d      	mov	r5, r1
 8005d66:	b09d      	sub	sp, #116	; 0x74
 8005d68:	4614      	mov	r4, r2
 8005d6a:	4698      	mov	r8, r3
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	b118      	cbz	r0, 8005d78 <_vfiprintf_r+0x18>
 8005d70:	6a03      	ldr	r3, [r0, #32]
 8005d72:	b90b      	cbnz	r3, 8005d78 <_vfiprintf_r+0x18>
 8005d74:	f7ff fcdc 	bl	8005730 <__sinit>
 8005d78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d7a:	07d9      	lsls	r1, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_vfiprintf_r+0x2a>
 8005d7e:	89ab      	ldrh	r3, [r5, #12]
 8005d80:	059a      	lsls	r2, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_vfiprintf_r+0x2a>
 8005d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d86:	f7ff fec7 	bl	8005b18 <__retarget_lock_acquire_recursive>
 8005d8a:	89ab      	ldrh	r3, [r5, #12]
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	d501      	bpl.n	8005d94 <_vfiprintf_r+0x34>
 8005d90:	692b      	ldr	r3, [r5, #16]
 8005d92:	b99b      	cbnz	r3, 8005dbc <_vfiprintf_r+0x5c>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff fdee 	bl	8005978 <__swsetup_r>
 8005d9c:	b170      	cbz	r0, 8005dbc <_vfiprintf_r+0x5c>
 8005d9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005da0:	07dc      	lsls	r4, r3, #31
 8005da2:	d504      	bpl.n	8005dae <_vfiprintf_r+0x4e>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	b01d      	add	sp, #116	; 0x74
 8005daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	0598      	lsls	r0, r3, #22
 8005db2:	d4f7      	bmi.n	8005da4 <_vfiprintf_r+0x44>
 8005db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db6:	f7ff feb0 	bl	8005b1a <__retarget_lock_release_recursive>
 8005dba:	e7f3      	b.n	8005da4 <_vfiprintf_r+0x44>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc0:	2320      	movs	r3, #32
 8005dc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005dc6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dca:	2330      	movs	r3, #48	; 0x30
 8005dcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005f80 <_vfiprintf_r+0x220>
 8005dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dd4:	f04f 0901 	mov.w	r9, #1
 8005dd8:	4623      	mov	r3, r4
 8005dda:	469a      	mov	sl, r3
 8005ddc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005de0:	b10a      	cbz	r2, 8005de6 <_vfiprintf_r+0x86>
 8005de2:	2a25      	cmp	r2, #37	; 0x25
 8005de4:	d1f9      	bne.n	8005dda <_vfiprintf_r+0x7a>
 8005de6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dea:	d00b      	beq.n	8005e04 <_vfiprintf_r+0xa4>
 8005dec:	465b      	mov	r3, fp
 8005dee:	4622      	mov	r2, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	4630      	mov	r0, r6
 8005df4:	f7ff ffa1 	bl	8005d3a <__sfputs_r>
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f000 80a9 	beq.w	8005f50 <_vfiprintf_r+0x1f0>
 8005dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e00:	445a      	add	r2, fp
 8005e02:	9209      	str	r2, [sp, #36]	; 0x24
 8005e04:	f89a 3000 	ldrb.w	r3, [sl]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 80a1 	beq.w	8005f50 <_vfiprintf_r+0x1f0>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e18:	f10a 0a01 	add.w	sl, sl, #1
 8005e1c:	9304      	str	r3, [sp, #16]
 8005e1e:	9307      	str	r3, [sp, #28]
 8005e20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e24:	931a      	str	r3, [sp, #104]	; 0x68
 8005e26:	4654      	mov	r4, sl
 8005e28:	2205      	movs	r2, #5
 8005e2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e2e:	4854      	ldr	r0, [pc, #336]	; (8005f80 <_vfiprintf_r+0x220>)
 8005e30:	f7fa f9ce 	bl	80001d0 <memchr>
 8005e34:	9a04      	ldr	r2, [sp, #16]
 8005e36:	b9d8      	cbnz	r0, 8005e70 <_vfiprintf_r+0x110>
 8005e38:	06d1      	lsls	r1, r2, #27
 8005e3a:	bf44      	itt	mi
 8005e3c:	2320      	movmi	r3, #32
 8005e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e42:	0713      	lsls	r3, r2, #28
 8005e44:	bf44      	itt	mi
 8005e46:	232b      	movmi	r3, #43	; 0x2b
 8005e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e50:	2b2a      	cmp	r3, #42	; 0x2a
 8005e52:	d015      	beq.n	8005e80 <_vfiprintf_r+0x120>
 8005e54:	9a07      	ldr	r2, [sp, #28]
 8005e56:	4654      	mov	r4, sl
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f04f 0c0a 	mov.w	ip, #10
 8005e5e:	4621      	mov	r1, r4
 8005e60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e64:	3b30      	subs	r3, #48	; 0x30
 8005e66:	2b09      	cmp	r3, #9
 8005e68:	d94d      	bls.n	8005f06 <_vfiprintf_r+0x1a6>
 8005e6a:	b1b0      	cbz	r0, 8005e9a <_vfiprintf_r+0x13a>
 8005e6c:	9207      	str	r2, [sp, #28]
 8005e6e:	e014      	b.n	8005e9a <_vfiprintf_r+0x13a>
 8005e70:	eba0 0308 	sub.w	r3, r0, r8
 8005e74:	fa09 f303 	lsl.w	r3, r9, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	46a2      	mov	sl, r4
 8005e7e:	e7d2      	b.n	8005e26 <_vfiprintf_r+0xc6>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	1d19      	adds	r1, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	9103      	str	r1, [sp, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bfbb      	ittet	lt
 8005e8c:	425b      	neglt	r3, r3
 8005e8e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e92:	9307      	strge	r3, [sp, #28]
 8005e94:	9307      	strlt	r3, [sp, #28]
 8005e96:	bfb8      	it	lt
 8005e98:	9204      	strlt	r2, [sp, #16]
 8005e9a:	7823      	ldrb	r3, [r4, #0]
 8005e9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e9e:	d10c      	bne.n	8005eba <_vfiprintf_r+0x15a>
 8005ea0:	7863      	ldrb	r3, [r4, #1]
 8005ea2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ea4:	d134      	bne.n	8005f10 <_vfiprintf_r+0x1b0>
 8005ea6:	9b03      	ldr	r3, [sp, #12]
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	9203      	str	r2, [sp, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bfb8      	it	lt
 8005eb2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005eb6:	3402      	adds	r4, #2
 8005eb8:	9305      	str	r3, [sp, #20]
 8005eba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f90 <_vfiprintf_r+0x230>
 8005ebe:	7821      	ldrb	r1, [r4, #0]
 8005ec0:	2203      	movs	r2, #3
 8005ec2:	4650      	mov	r0, sl
 8005ec4:	f7fa f984 	bl	80001d0 <memchr>
 8005ec8:	b138      	cbz	r0, 8005eda <_vfiprintf_r+0x17a>
 8005eca:	9b04      	ldr	r3, [sp, #16]
 8005ecc:	eba0 000a 	sub.w	r0, r0, sl
 8005ed0:	2240      	movs	r2, #64	; 0x40
 8005ed2:	4082      	lsls	r2, r0
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	3401      	adds	r4, #1
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ede:	4829      	ldr	r0, [pc, #164]	; (8005f84 <_vfiprintf_r+0x224>)
 8005ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ee4:	2206      	movs	r2, #6
 8005ee6:	f7fa f973 	bl	80001d0 <memchr>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d03f      	beq.n	8005f6e <_vfiprintf_r+0x20e>
 8005eee:	4b26      	ldr	r3, [pc, #152]	; (8005f88 <_vfiprintf_r+0x228>)
 8005ef0:	bb1b      	cbnz	r3, 8005f3a <_vfiprintf_r+0x1da>
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	3307      	adds	r3, #7
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	3308      	adds	r3, #8
 8005efc:	9303      	str	r3, [sp, #12]
 8005efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f00:	443b      	add	r3, r7
 8005f02:	9309      	str	r3, [sp, #36]	; 0x24
 8005f04:	e768      	b.n	8005dd8 <_vfiprintf_r+0x78>
 8005f06:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	2001      	movs	r0, #1
 8005f0e:	e7a6      	b.n	8005e5e <_vfiprintf_r+0xfe>
 8005f10:	2300      	movs	r3, #0
 8005f12:	3401      	adds	r4, #1
 8005f14:	9305      	str	r3, [sp, #20]
 8005f16:	4619      	mov	r1, r3
 8005f18:	f04f 0c0a 	mov.w	ip, #10
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f22:	3a30      	subs	r2, #48	; 0x30
 8005f24:	2a09      	cmp	r2, #9
 8005f26:	d903      	bls.n	8005f30 <_vfiprintf_r+0x1d0>
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0c6      	beq.n	8005eba <_vfiprintf_r+0x15a>
 8005f2c:	9105      	str	r1, [sp, #20]
 8005f2e:	e7c4      	b.n	8005eba <_vfiprintf_r+0x15a>
 8005f30:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f34:	4604      	mov	r4, r0
 8005f36:	2301      	movs	r3, #1
 8005f38:	e7f0      	b.n	8005f1c <_vfiprintf_r+0x1bc>
 8005f3a:	ab03      	add	r3, sp, #12
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	462a      	mov	r2, r5
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <_vfiprintf_r+0x22c>)
 8005f42:	a904      	add	r1, sp, #16
 8005f44:	4630      	mov	r0, r6
 8005f46:	f3af 8000 	nop.w
 8005f4a:	4607      	mov	r7, r0
 8005f4c:	1c78      	adds	r0, r7, #1
 8005f4e:	d1d6      	bne.n	8005efe <_vfiprintf_r+0x19e>
 8005f50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f52:	07d9      	lsls	r1, r3, #31
 8005f54:	d405      	bmi.n	8005f62 <_vfiprintf_r+0x202>
 8005f56:	89ab      	ldrh	r3, [r5, #12]
 8005f58:	059a      	lsls	r2, r3, #22
 8005f5a:	d402      	bmi.n	8005f62 <_vfiprintf_r+0x202>
 8005f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f5e:	f7ff fddc 	bl	8005b1a <__retarget_lock_release_recursive>
 8005f62:	89ab      	ldrh	r3, [r5, #12]
 8005f64:	065b      	lsls	r3, r3, #25
 8005f66:	f53f af1d 	bmi.w	8005da4 <_vfiprintf_r+0x44>
 8005f6a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f6c:	e71c      	b.n	8005da8 <_vfiprintf_r+0x48>
 8005f6e:	ab03      	add	r3, sp, #12
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	462a      	mov	r2, r5
 8005f74:	4b05      	ldr	r3, [pc, #20]	; (8005f8c <_vfiprintf_r+0x22c>)
 8005f76:	a904      	add	r1, sp, #16
 8005f78:	4630      	mov	r0, r6
 8005f7a:	f000 f879 	bl	8006070 <_printf_i>
 8005f7e:	e7e4      	b.n	8005f4a <_vfiprintf_r+0x1ea>
 8005f80:	08006d64 	.word	0x08006d64
 8005f84:	08006d6e 	.word	0x08006d6e
 8005f88:	00000000 	.word	0x00000000
 8005f8c:	08005d3b 	.word	0x08005d3b
 8005f90:	08006d6a 	.word	0x08006d6a

08005f94 <_printf_common>:
 8005f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f98:	4616      	mov	r6, r2
 8005f9a:	4699      	mov	r9, r3
 8005f9c:	688a      	ldr	r2, [r1, #8]
 8005f9e:	690b      	ldr	r3, [r1, #16]
 8005fa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	bfb8      	it	lt
 8005fa8:	4613      	movlt	r3, r2
 8005faa:	6033      	str	r3, [r6, #0]
 8005fac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	b10a      	cbz	r2, 8005fba <_printf_common+0x26>
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	6033      	str	r3, [r6, #0]
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	0699      	lsls	r1, r3, #26
 8005fbe:	bf42      	ittt	mi
 8005fc0:	6833      	ldrmi	r3, [r6, #0]
 8005fc2:	3302      	addmi	r3, #2
 8005fc4:	6033      	strmi	r3, [r6, #0]
 8005fc6:	6825      	ldr	r5, [r4, #0]
 8005fc8:	f015 0506 	ands.w	r5, r5, #6
 8005fcc:	d106      	bne.n	8005fdc <_printf_common+0x48>
 8005fce:	f104 0a19 	add.w	sl, r4, #25
 8005fd2:	68e3      	ldr	r3, [r4, #12]
 8005fd4:	6832      	ldr	r2, [r6, #0]
 8005fd6:	1a9b      	subs	r3, r3, r2
 8005fd8:	42ab      	cmp	r3, r5
 8005fda:	dc26      	bgt.n	800602a <_printf_common+0x96>
 8005fdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fe0:	1e13      	subs	r3, r2, #0
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	bf18      	it	ne
 8005fe6:	2301      	movne	r3, #1
 8005fe8:	0692      	lsls	r2, r2, #26
 8005fea:	d42b      	bmi.n	8006044 <_printf_common+0xb0>
 8005fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ff0:	4649      	mov	r1, r9
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	47c0      	blx	r8
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d01e      	beq.n	8006038 <_printf_common+0xa4>
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	6922      	ldr	r2, [r4, #16]
 8005ffe:	f003 0306 	and.w	r3, r3, #6
 8006002:	2b04      	cmp	r3, #4
 8006004:	bf02      	ittt	eq
 8006006:	68e5      	ldreq	r5, [r4, #12]
 8006008:	6833      	ldreq	r3, [r6, #0]
 800600a:	1aed      	subeq	r5, r5, r3
 800600c:	68a3      	ldr	r3, [r4, #8]
 800600e:	bf0c      	ite	eq
 8006010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006014:	2500      	movne	r5, #0
 8006016:	4293      	cmp	r3, r2
 8006018:	bfc4      	itt	gt
 800601a:	1a9b      	subgt	r3, r3, r2
 800601c:	18ed      	addgt	r5, r5, r3
 800601e:	2600      	movs	r6, #0
 8006020:	341a      	adds	r4, #26
 8006022:	42b5      	cmp	r5, r6
 8006024:	d11a      	bne.n	800605c <_printf_common+0xc8>
 8006026:	2000      	movs	r0, #0
 8006028:	e008      	b.n	800603c <_printf_common+0xa8>
 800602a:	2301      	movs	r3, #1
 800602c:	4652      	mov	r2, sl
 800602e:	4649      	mov	r1, r9
 8006030:	4638      	mov	r0, r7
 8006032:	47c0      	blx	r8
 8006034:	3001      	adds	r0, #1
 8006036:	d103      	bne.n	8006040 <_printf_common+0xac>
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006040:	3501      	adds	r5, #1
 8006042:	e7c6      	b.n	8005fd2 <_printf_common+0x3e>
 8006044:	18e1      	adds	r1, r4, r3
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	2030      	movs	r0, #48	; 0x30
 800604a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800604e:	4422      	add	r2, r4
 8006050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006058:	3302      	adds	r3, #2
 800605a:	e7c7      	b.n	8005fec <_printf_common+0x58>
 800605c:	2301      	movs	r3, #1
 800605e:	4622      	mov	r2, r4
 8006060:	4649      	mov	r1, r9
 8006062:	4638      	mov	r0, r7
 8006064:	47c0      	blx	r8
 8006066:	3001      	adds	r0, #1
 8006068:	d0e6      	beq.n	8006038 <_printf_common+0xa4>
 800606a:	3601      	adds	r6, #1
 800606c:	e7d9      	b.n	8006022 <_printf_common+0x8e>
	...

08006070 <_printf_i>:
 8006070:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006074:	7e0f      	ldrb	r7, [r1, #24]
 8006076:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006078:	2f78      	cmp	r7, #120	; 0x78
 800607a:	4691      	mov	r9, r2
 800607c:	4680      	mov	r8, r0
 800607e:	460c      	mov	r4, r1
 8006080:	469a      	mov	sl, r3
 8006082:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006086:	d807      	bhi.n	8006098 <_printf_i+0x28>
 8006088:	2f62      	cmp	r7, #98	; 0x62
 800608a:	d80a      	bhi.n	80060a2 <_printf_i+0x32>
 800608c:	2f00      	cmp	r7, #0
 800608e:	f000 80d4 	beq.w	800623a <_printf_i+0x1ca>
 8006092:	2f58      	cmp	r7, #88	; 0x58
 8006094:	f000 80c0 	beq.w	8006218 <_printf_i+0x1a8>
 8006098:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800609c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060a0:	e03a      	b.n	8006118 <_printf_i+0xa8>
 80060a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060a6:	2b15      	cmp	r3, #21
 80060a8:	d8f6      	bhi.n	8006098 <_printf_i+0x28>
 80060aa:	a101      	add	r1, pc, #4	; (adr r1, 80060b0 <_printf_i+0x40>)
 80060ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060b0:	08006109 	.word	0x08006109
 80060b4:	0800611d 	.word	0x0800611d
 80060b8:	08006099 	.word	0x08006099
 80060bc:	08006099 	.word	0x08006099
 80060c0:	08006099 	.word	0x08006099
 80060c4:	08006099 	.word	0x08006099
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	08006099 	.word	0x08006099
 80060d0:	08006099 	.word	0x08006099
 80060d4:	08006099 	.word	0x08006099
 80060d8:	08006099 	.word	0x08006099
 80060dc:	08006221 	.word	0x08006221
 80060e0:	08006149 	.word	0x08006149
 80060e4:	080061db 	.word	0x080061db
 80060e8:	08006099 	.word	0x08006099
 80060ec:	08006099 	.word	0x08006099
 80060f0:	08006243 	.word	0x08006243
 80060f4:	08006099 	.word	0x08006099
 80060f8:	08006149 	.word	0x08006149
 80060fc:	08006099 	.word	0x08006099
 8006100:	08006099 	.word	0x08006099
 8006104:	080061e3 	.word	0x080061e3
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	602a      	str	r2, [r5, #0]
 8006110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006118:	2301      	movs	r3, #1
 800611a:	e09f      	b.n	800625c <_printf_i+0x1ec>
 800611c:	6820      	ldr	r0, [r4, #0]
 800611e:	682b      	ldr	r3, [r5, #0]
 8006120:	0607      	lsls	r7, r0, #24
 8006122:	f103 0104 	add.w	r1, r3, #4
 8006126:	6029      	str	r1, [r5, #0]
 8006128:	d501      	bpl.n	800612e <_printf_i+0xbe>
 800612a:	681e      	ldr	r6, [r3, #0]
 800612c:	e003      	b.n	8006136 <_printf_i+0xc6>
 800612e:	0646      	lsls	r6, r0, #25
 8006130:	d5fb      	bpl.n	800612a <_printf_i+0xba>
 8006132:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006136:	2e00      	cmp	r6, #0
 8006138:	da03      	bge.n	8006142 <_printf_i+0xd2>
 800613a:	232d      	movs	r3, #45	; 0x2d
 800613c:	4276      	negs	r6, r6
 800613e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006142:	485a      	ldr	r0, [pc, #360]	; (80062ac <_printf_i+0x23c>)
 8006144:	230a      	movs	r3, #10
 8006146:	e012      	b.n	800616e <_printf_i+0xfe>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	6820      	ldr	r0, [r4, #0]
 800614c:	1d19      	adds	r1, r3, #4
 800614e:	6029      	str	r1, [r5, #0]
 8006150:	0605      	lsls	r5, r0, #24
 8006152:	d501      	bpl.n	8006158 <_printf_i+0xe8>
 8006154:	681e      	ldr	r6, [r3, #0]
 8006156:	e002      	b.n	800615e <_printf_i+0xee>
 8006158:	0641      	lsls	r1, r0, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0xe4>
 800615c:	881e      	ldrh	r6, [r3, #0]
 800615e:	4853      	ldr	r0, [pc, #332]	; (80062ac <_printf_i+0x23c>)
 8006160:	2f6f      	cmp	r7, #111	; 0x6f
 8006162:	bf0c      	ite	eq
 8006164:	2308      	moveq	r3, #8
 8006166:	230a      	movne	r3, #10
 8006168:	2100      	movs	r1, #0
 800616a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800616e:	6865      	ldr	r5, [r4, #4]
 8006170:	60a5      	str	r5, [r4, #8]
 8006172:	2d00      	cmp	r5, #0
 8006174:	bfa2      	ittt	ge
 8006176:	6821      	ldrge	r1, [r4, #0]
 8006178:	f021 0104 	bicge.w	r1, r1, #4
 800617c:	6021      	strge	r1, [r4, #0]
 800617e:	b90e      	cbnz	r6, 8006184 <_printf_i+0x114>
 8006180:	2d00      	cmp	r5, #0
 8006182:	d04b      	beq.n	800621c <_printf_i+0x1ac>
 8006184:	4615      	mov	r5, r2
 8006186:	fbb6 f1f3 	udiv	r1, r6, r3
 800618a:	fb03 6711 	mls	r7, r3, r1, r6
 800618e:	5dc7      	ldrb	r7, [r0, r7]
 8006190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006194:	4637      	mov	r7, r6
 8006196:	42bb      	cmp	r3, r7
 8006198:	460e      	mov	r6, r1
 800619a:	d9f4      	bls.n	8006186 <_printf_i+0x116>
 800619c:	2b08      	cmp	r3, #8
 800619e:	d10b      	bne.n	80061b8 <_printf_i+0x148>
 80061a0:	6823      	ldr	r3, [r4, #0]
 80061a2:	07de      	lsls	r6, r3, #31
 80061a4:	d508      	bpl.n	80061b8 <_printf_i+0x148>
 80061a6:	6923      	ldr	r3, [r4, #16]
 80061a8:	6861      	ldr	r1, [r4, #4]
 80061aa:	4299      	cmp	r1, r3
 80061ac:	bfde      	ittt	le
 80061ae:	2330      	movle	r3, #48	; 0x30
 80061b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061b8:	1b52      	subs	r2, r2, r5
 80061ba:	6122      	str	r2, [r4, #16]
 80061bc:	f8cd a000 	str.w	sl, [sp]
 80061c0:	464b      	mov	r3, r9
 80061c2:	aa03      	add	r2, sp, #12
 80061c4:	4621      	mov	r1, r4
 80061c6:	4640      	mov	r0, r8
 80061c8:	f7ff fee4 	bl	8005f94 <_printf_common>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d14a      	bne.n	8006266 <_printf_i+0x1f6>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	b004      	add	sp, #16
 80061d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	4833      	ldr	r0, [pc, #204]	; (80062b0 <_printf_i+0x240>)
 80061e4:	2778      	movs	r7, #120	; 0x78
 80061e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	6829      	ldr	r1, [r5, #0]
 80061ee:	061f      	lsls	r7, r3, #24
 80061f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80061f4:	d402      	bmi.n	80061fc <_printf_i+0x18c>
 80061f6:	065f      	lsls	r7, r3, #25
 80061f8:	bf48      	it	mi
 80061fa:	b2b6      	uxthmi	r6, r6
 80061fc:	07df      	lsls	r7, r3, #31
 80061fe:	bf48      	it	mi
 8006200:	f043 0320 	orrmi.w	r3, r3, #32
 8006204:	6029      	str	r1, [r5, #0]
 8006206:	bf48      	it	mi
 8006208:	6023      	strmi	r3, [r4, #0]
 800620a:	b91e      	cbnz	r6, 8006214 <_printf_i+0x1a4>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	f023 0320 	bic.w	r3, r3, #32
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	2310      	movs	r3, #16
 8006216:	e7a7      	b.n	8006168 <_printf_i+0xf8>
 8006218:	4824      	ldr	r0, [pc, #144]	; (80062ac <_printf_i+0x23c>)
 800621a:	e7e4      	b.n	80061e6 <_printf_i+0x176>
 800621c:	4615      	mov	r5, r2
 800621e:	e7bd      	b.n	800619c <_printf_i+0x12c>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	6826      	ldr	r6, [r4, #0]
 8006224:	6961      	ldr	r1, [r4, #20]
 8006226:	1d18      	adds	r0, r3, #4
 8006228:	6028      	str	r0, [r5, #0]
 800622a:	0635      	lsls	r5, r6, #24
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	d501      	bpl.n	8006234 <_printf_i+0x1c4>
 8006230:	6019      	str	r1, [r3, #0]
 8006232:	e002      	b.n	800623a <_printf_i+0x1ca>
 8006234:	0670      	lsls	r0, r6, #25
 8006236:	d5fb      	bpl.n	8006230 <_printf_i+0x1c0>
 8006238:	8019      	strh	r1, [r3, #0]
 800623a:	2300      	movs	r3, #0
 800623c:	6123      	str	r3, [r4, #16]
 800623e:	4615      	mov	r5, r2
 8006240:	e7bc      	b.n	80061bc <_printf_i+0x14c>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	1d1a      	adds	r2, r3, #4
 8006246:	602a      	str	r2, [r5, #0]
 8006248:	681d      	ldr	r5, [r3, #0]
 800624a:	6862      	ldr	r2, [r4, #4]
 800624c:	2100      	movs	r1, #0
 800624e:	4628      	mov	r0, r5
 8006250:	f7f9 ffbe 	bl	80001d0 <memchr>
 8006254:	b108      	cbz	r0, 800625a <_printf_i+0x1ea>
 8006256:	1b40      	subs	r0, r0, r5
 8006258:	6060      	str	r0, [r4, #4]
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	6123      	str	r3, [r4, #16]
 800625e:	2300      	movs	r3, #0
 8006260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006264:	e7aa      	b.n	80061bc <_printf_i+0x14c>
 8006266:	6923      	ldr	r3, [r4, #16]
 8006268:	462a      	mov	r2, r5
 800626a:	4649      	mov	r1, r9
 800626c:	4640      	mov	r0, r8
 800626e:	47d0      	blx	sl
 8006270:	3001      	adds	r0, #1
 8006272:	d0ad      	beq.n	80061d0 <_printf_i+0x160>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	079b      	lsls	r3, r3, #30
 8006278:	d413      	bmi.n	80062a2 <_printf_i+0x232>
 800627a:	68e0      	ldr	r0, [r4, #12]
 800627c:	9b03      	ldr	r3, [sp, #12]
 800627e:	4298      	cmp	r0, r3
 8006280:	bfb8      	it	lt
 8006282:	4618      	movlt	r0, r3
 8006284:	e7a6      	b.n	80061d4 <_printf_i+0x164>
 8006286:	2301      	movs	r3, #1
 8006288:	4632      	mov	r2, r6
 800628a:	4649      	mov	r1, r9
 800628c:	4640      	mov	r0, r8
 800628e:	47d0      	blx	sl
 8006290:	3001      	adds	r0, #1
 8006292:	d09d      	beq.n	80061d0 <_printf_i+0x160>
 8006294:	3501      	adds	r5, #1
 8006296:	68e3      	ldr	r3, [r4, #12]
 8006298:	9903      	ldr	r1, [sp, #12]
 800629a:	1a5b      	subs	r3, r3, r1
 800629c:	42ab      	cmp	r3, r5
 800629e:	dcf2      	bgt.n	8006286 <_printf_i+0x216>
 80062a0:	e7eb      	b.n	800627a <_printf_i+0x20a>
 80062a2:	2500      	movs	r5, #0
 80062a4:	f104 0619 	add.w	r6, r4, #25
 80062a8:	e7f5      	b.n	8006296 <_printf_i+0x226>
 80062aa:	bf00      	nop
 80062ac:	08006d75 	.word	0x08006d75
 80062b0:	08006d86 	.word	0x08006d86

080062b4 <__sflush_r>:
 80062b4:	898a      	ldrh	r2, [r1, #12]
 80062b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ba:	4605      	mov	r5, r0
 80062bc:	0710      	lsls	r0, r2, #28
 80062be:	460c      	mov	r4, r1
 80062c0:	d458      	bmi.n	8006374 <__sflush_r+0xc0>
 80062c2:	684b      	ldr	r3, [r1, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dc05      	bgt.n	80062d4 <__sflush_r+0x20>
 80062c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dc02      	bgt.n	80062d4 <__sflush_r+0x20>
 80062ce:	2000      	movs	r0, #0
 80062d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	d0f9      	beq.n	80062ce <__sflush_r+0x1a>
 80062da:	2300      	movs	r3, #0
 80062dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e0:	682f      	ldr	r7, [r5, #0]
 80062e2:	6a21      	ldr	r1, [r4, #32]
 80062e4:	602b      	str	r3, [r5, #0]
 80062e6:	d032      	beq.n	800634e <__sflush_r+0x9a>
 80062e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	075a      	lsls	r2, r3, #29
 80062ee:	d505      	bpl.n	80062fc <__sflush_r+0x48>
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	1ac0      	subs	r0, r0, r3
 80062f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062f6:	b10b      	cbz	r3, 80062fc <__sflush_r+0x48>
 80062f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fa:	1ac0      	subs	r0, r0, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	4602      	mov	r2, r0
 8006300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006302:	6a21      	ldr	r1, [r4, #32]
 8006304:	4628      	mov	r0, r5
 8006306:	47b0      	blx	r6
 8006308:	1c43      	adds	r3, r0, #1
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	d106      	bne.n	800631c <__sflush_r+0x68>
 800630e:	6829      	ldr	r1, [r5, #0]
 8006310:	291d      	cmp	r1, #29
 8006312:	d82b      	bhi.n	800636c <__sflush_r+0xb8>
 8006314:	4a29      	ldr	r2, [pc, #164]	; (80063bc <__sflush_r+0x108>)
 8006316:	410a      	asrs	r2, r1
 8006318:	07d6      	lsls	r6, r2, #31
 800631a:	d427      	bmi.n	800636c <__sflush_r+0xb8>
 800631c:	2200      	movs	r2, #0
 800631e:	6062      	str	r2, [r4, #4]
 8006320:	04d9      	lsls	r1, r3, #19
 8006322:	6922      	ldr	r2, [r4, #16]
 8006324:	6022      	str	r2, [r4, #0]
 8006326:	d504      	bpl.n	8006332 <__sflush_r+0x7e>
 8006328:	1c42      	adds	r2, r0, #1
 800632a:	d101      	bne.n	8006330 <__sflush_r+0x7c>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b903      	cbnz	r3, 8006332 <__sflush_r+0x7e>
 8006330:	6560      	str	r0, [r4, #84]	; 0x54
 8006332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006334:	602f      	str	r7, [r5, #0]
 8006336:	2900      	cmp	r1, #0
 8006338:	d0c9      	beq.n	80062ce <__sflush_r+0x1a>
 800633a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800633e:	4299      	cmp	r1, r3
 8006340:	d002      	beq.n	8006348 <__sflush_r+0x94>
 8006342:	4628      	mov	r0, r5
 8006344:	f7ff fbea 	bl	8005b1c <_free_r>
 8006348:	2000      	movs	r0, #0
 800634a:	6360      	str	r0, [r4, #52]	; 0x34
 800634c:	e7c0      	b.n	80062d0 <__sflush_r+0x1c>
 800634e:	2301      	movs	r3, #1
 8006350:	4628      	mov	r0, r5
 8006352:	47b0      	blx	r6
 8006354:	1c41      	adds	r1, r0, #1
 8006356:	d1c8      	bne.n	80062ea <__sflush_r+0x36>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0c5      	beq.n	80062ea <__sflush_r+0x36>
 800635e:	2b1d      	cmp	r3, #29
 8006360:	d001      	beq.n	8006366 <__sflush_r+0xb2>
 8006362:	2b16      	cmp	r3, #22
 8006364:	d101      	bne.n	800636a <__sflush_r+0xb6>
 8006366:	602f      	str	r7, [r5, #0]
 8006368:	e7b1      	b.n	80062ce <__sflush_r+0x1a>
 800636a:	89a3      	ldrh	r3, [r4, #12]
 800636c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006370:	81a3      	strh	r3, [r4, #12]
 8006372:	e7ad      	b.n	80062d0 <__sflush_r+0x1c>
 8006374:	690f      	ldr	r7, [r1, #16]
 8006376:	2f00      	cmp	r7, #0
 8006378:	d0a9      	beq.n	80062ce <__sflush_r+0x1a>
 800637a:	0793      	lsls	r3, r2, #30
 800637c:	680e      	ldr	r6, [r1, #0]
 800637e:	bf08      	it	eq
 8006380:	694b      	ldreq	r3, [r1, #20]
 8006382:	600f      	str	r7, [r1, #0]
 8006384:	bf18      	it	ne
 8006386:	2300      	movne	r3, #0
 8006388:	eba6 0807 	sub.w	r8, r6, r7
 800638c:	608b      	str	r3, [r1, #8]
 800638e:	f1b8 0f00 	cmp.w	r8, #0
 8006392:	dd9c      	ble.n	80062ce <__sflush_r+0x1a>
 8006394:	6a21      	ldr	r1, [r4, #32]
 8006396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006398:	4643      	mov	r3, r8
 800639a:	463a      	mov	r2, r7
 800639c:	4628      	mov	r0, r5
 800639e:	47b0      	blx	r6
 80063a0:	2800      	cmp	r0, #0
 80063a2:	dc06      	bgt.n	80063b2 <__sflush_r+0xfe>
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063aa:	81a3      	strh	r3, [r4, #12]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	e78e      	b.n	80062d0 <__sflush_r+0x1c>
 80063b2:	4407      	add	r7, r0
 80063b4:	eba8 0800 	sub.w	r8, r8, r0
 80063b8:	e7e9      	b.n	800638e <__sflush_r+0xda>
 80063ba:	bf00      	nop
 80063bc:	dfbffffe 	.word	0xdfbffffe

080063c0 <_fflush_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	690b      	ldr	r3, [r1, #16]
 80063c4:	4605      	mov	r5, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	b913      	cbnz	r3, 80063d0 <_fflush_r+0x10>
 80063ca:	2500      	movs	r5, #0
 80063cc:	4628      	mov	r0, r5
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	b118      	cbz	r0, 80063da <_fflush_r+0x1a>
 80063d2:	6a03      	ldr	r3, [r0, #32]
 80063d4:	b90b      	cbnz	r3, 80063da <_fflush_r+0x1a>
 80063d6:	f7ff f9ab 	bl	8005730 <__sinit>
 80063da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f3      	beq.n	80063ca <_fflush_r+0xa>
 80063e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063e4:	07d0      	lsls	r0, r2, #31
 80063e6:	d404      	bmi.n	80063f2 <_fflush_r+0x32>
 80063e8:	0599      	lsls	r1, r3, #22
 80063ea:	d402      	bmi.n	80063f2 <_fflush_r+0x32>
 80063ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ee:	f7ff fb93 	bl	8005b18 <__retarget_lock_acquire_recursive>
 80063f2:	4628      	mov	r0, r5
 80063f4:	4621      	mov	r1, r4
 80063f6:	f7ff ff5d 	bl	80062b4 <__sflush_r>
 80063fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063fc:	07da      	lsls	r2, r3, #31
 80063fe:	4605      	mov	r5, r0
 8006400:	d4e4      	bmi.n	80063cc <_fflush_r+0xc>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	059b      	lsls	r3, r3, #22
 8006406:	d4e1      	bmi.n	80063cc <_fflush_r+0xc>
 8006408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800640a:	f7ff fb86 	bl	8005b1a <__retarget_lock_release_recursive>
 800640e:	e7dd      	b.n	80063cc <_fflush_r+0xc>

08006410 <__swhatbuf_r>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	460c      	mov	r4, r1
 8006414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006418:	2900      	cmp	r1, #0
 800641a:	b096      	sub	sp, #88	; 0x58
 800641c:	4615      	mov	r5, r2
 800641e:	461e      	mov	r6, r3
 8006420:	da0d      	bge.n	800643e <__swhatbuf_r+0x2e>
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006428:	f04f 0100 	mov.w	r1, #0
 800642c:	bf0c      	ite	eq
 800642e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006432:	2340      	movne	r3, #64	; 0x40
 8006434:	2000      	movs	r0, #0
 8006436:	6031      	str	r1, [r6, #0]
 8006438:	602b      	str	r3, [r5, #0]
 800643a:	b016      	add	sp, #88	; 0x58
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	466a      	mov	r2, sp
 8006440:	f000 f848 	bl	80064d4 <_fstat_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	dbec      	blt.n	8006422 <__swhatbuf_r+0x12>
 8006448:	9901      	ldr	r1, [sp, #4]
 800644a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800644e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006452:	4259      	negs	r1, r3
 8006454:	4159      	adcs	r1, r3
 8006456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800645a:	e7eb      	b.n	8006434 <__swhatbuf_r+0x24>

0800645c <__smakebuf_r>:
 800645c:	898b      	ldrh	r3, [r1, #12]
 800645e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006460:	079d      	lsls	r5, r3, #30
 8006462:	4606      	mov	r6, r0
 8006464:	460c      	mov	r4, r1
 8006466:	d507      	bpl.n	8006478 <__smakebuf_r+0x1c>
 8006468:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	6123      	str	r3, [r4, #16]
 8006470:	2301      	movs	r3, #1
 8006472:	6163      	str	r3, [r4, #20]
 8006474:	b002      	add	sp, #8
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	ab01      	add	r3, sp, #4
 800647a:	466a      	mov	r2, sp
 800647c:	f7ff ffc8 	bl	8006410 <__swhatbuf_r>
 8006480:	9900      	ldr	r1, [sp, #0]
 8006482:	4605      	mov	r5, r0
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff fbb5 	bl	8005bf4 <_malloc_r>
 800648a:	b948      	cbnz	r0, 80064a0 <__smakebuf_r+0x44>
 800648c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006490:	059a      	lsls	r2, r3, #22
 8006492:	d4ef      	bmi.n	8006474 <__smakebuf_r+0x18>
 8006494:	f023 0303 	bic.w	r3, r3, #3
 8006498:	f043 0302 	orr.w	r3, r3, #2
 800649c:	81a3      	strh	r3, [r4, #12]
 800649e:	e7e3      	b.n	8006468 <__smakebuf_r+0xc>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	6020      	str	r0, [r4, #0]
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	9b00      	ldr	r3, [sp, #0]
 80064ac:	6163      	str	r3, [r4, #20]
 80064ae:	9b01      	ldr	r3, [sp, #4]
 80064b0:	6120      	str	r0, [r4, #16]
 80064b2:	b15b      	cbz	r3, 80064cc <__smakebuf_r+0x70>
 80064b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064b8:	4630      	mov	r0, r6
 80064ba:	f000 f81d 	bl	80064f8 <_isatty_r>
 80064be:	b128      	cbz	r0, 80064cc <__smakebuf_r+0x70>
 80064c0:	89a3      	ldrh	r3, [r4, #12]
 80064c2:	f023 0303 	bic.w	r3, r3, #3
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	81a3      	strh	r3, [r4, #12]
 80064cc:	89a3      	ldrh	r3, [r4, #12]
 80064ce:	431d      	orrs	r5, r3
 80064d0:	81a5      	strh	r5, [r4, #12]
 80064d2:	e7cf      	b.n	8006474 <__smakebuf_r+0x18>

080064d4 <_fstat_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d07      	ldr	r5, [pc, #28]	; (80064f4 <_fstat_r+0x20>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	4611      	mov	r1, r2
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	f7fa fe36 	bl	8001152 <_fstat>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d102      	bne.n	80064f0 <_fstat_r+0x1c>
 80064ea:	682b      	ldr	r3, [r5, #0]
 80064ec:	b103      	cbz	r3, 80064f0 <_fstat_r+0x1c>
 80064ee:	6023      	str	r3, [r4, #0]
 80064f0:	bd38      	pop	{r3, r4, r5, pc}
 80064f2:	bf00      	nop
 80064f4:	200006e8 	.word	0x200006e8

080064f8 <_isatty_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	4d06      	ldr	r5, [pc, #24]	; (8006514 <_isatty_r+0x1c>)
 80064fc:	2300      	movs	r3, #0
 80064fe:	4604      	mov	r4, r0
 8006500:	4608      	mov	r0, r1
 8006502:	602b      	str	r3, [r5, #0]
 8006504:	f7fa fe35 	bl	8001172 <_isatty>
 8006508:	1c43      	adds	r3, r0, #1
 800650a:	d102      	bne.n	8006512 <_isatty_r+0x1a>
 800650c:	682b      	ldr	r3, [r5, #0]
 800650e:	b103      	cbz	r3, 8006512 <_isatty_r+0x1a>
 8006510:	6023      	str	r3, [r4, #0]
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	200006e8 	.word	0x200006e8

08006518 <_sbrk_r>:
 8006518:	b538      	push	{r3, r4, r5, lr}
 800651a:	4d06      	ldr	r5, [pc, #24]	; (8006534 <_sbrk_r+0x1c>)
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	4608      	mov	r0, r1
 8006522:	602b      	str	r3, [r5, #0]
 8006524:	f7fa fe3e 	bl	80011a4 <_sbrk>
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d102      	bne.n	8006532 <_sbrk_r+0x1a>
 800652c:	682b      	ldr	r3, [r5, #0]
 800652e:	b103      	cbz	r3, 8006532 <_sbrk_r+0x1a>
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	bd38      	pop	{r3, r4, r5, pc}
 8006534:	200006e8 	.word	0x200006e8

08006538 <_init>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr

08006544 <_fini>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	bf00      	nop
 8006548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800654a:	bc08      	pop	{r3}
 800654c:	469e      	mov	lr, r3
 800654e:	4770      	bx	lr
