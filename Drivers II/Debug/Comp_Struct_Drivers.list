
Comp_Struct_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055fc  080055fc  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005604  08005604  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005608  08005608  00015608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800560c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000006c  08005678  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08005678  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ce29  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002113  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000084d  00000000  00000000  0002fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a76  00000000  00000000  0003035d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d788  00000000  00000000  00056dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9a6a  00000000  00000000  0006455b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003318  00000000  00000000  0014dfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001512e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005528 	.word	0x08005528

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005528 	.word	0x08005528

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f002 fcd8 	bl	8002f38 <HAL_UART_Transmit>
  return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000088 	.word	0x20000088

08000598 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	if (ring_buffer_put(&ring_buffer_uart_rx, rx_data) == 0) {
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <HAL_UART_RxCpltCallback+0x38>)
 80005a8:	f000 fb75 	bl	8000c96 <ring_buffer_put>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d102      	bne.n	80005b8 <HAL_UART_RxCpltCallback+0x20>
		printf("Rx buffer is full\r\n");
 80005b2:	4808      	ldr	r0, [pc, #32]	; (80005d4 <HAL_UART_RxCpltCallback+0x3c>)
 80005b4:	f004 f950 	bl	8004858 <puts>
	}

	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4904      	ldr	r1, [pc, #16]	; (80005cc <HAL_UART_RxCpltCallback+0x34>)
 80005bc:	4806      	ldr	r0, [pc, #24]	; (80005d8 <HAL_UART_RxCpltCallback+0x40>)
 80005be:	f002 fd45 	bl	800304c <HAL_UART_Receive_IT>
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	2000012c 	.word	0x2000012c
 80005d0:	20000110 	.word	0x20000110
 80005d4:	08005540 	.word	0x08005540
 80005d8:	20000088 	.word	0x20000088

080005dc <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin Specifies the port pin connected
  *         to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	80fb      	strh	r3, [r7, #6]
	key_event = GPIO_Pin;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	8013      	strh	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	20000000 	.word	0x20000000

080005fc <keypad_init>:

/**
 * @brief This functions initialize the functionality of the keypad
 */
void keypad_init(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	/* Set the rows high to be detected in the columns by rising interrupt */
	ROW_1_GPIO_Port->BSRR = ROW_1_Pin;
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000608:	619a      	str	r2, [r3, #24]
	ROW_2_GPIO_Port->BSRR = ROW_2_Pin;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <keypad_init+0x2c>)
 800060c:	2208      	movs	r2, #8
 800060e:	619a      	str	r2, [r3, #24]
	ROW_3_GPIO_Port->BSRR = ROW_3_Pin;
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <keypad_init+0x2c>)
 8000612:	2220      	movs	r2, #32
 8000614:	619a      	str	r2, [r3, #24]
	ROW_4_GPIO_Port->BSRR = ROW_4_Pin;
 8000616:	4b04      	ldr	r3, [pc, #16]	; (8000628 <keypad_init+0x2c>)
 8000618:	2210      	movs	r2, #16
 800061a:	619a      	str	r2, [r3, #24]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	48000400 	.word	0x48000400

0800062c <keypad_handler>:
 * @brief  This function debounces and identify keypad events.
 * @param  column_to_evaluate: the column where the event happened.
 * @retval 0xFF -> invalid key. [0x00 - 0x0F] -> valid key.
 */
uint8_t keypad_handler(uint16_t column_to_evaluate)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	4603      	mov	r3, r0
 8000634:	80fb      	strh	r3, [r7, #6]
	uint8_t key_pressed = 0xFF; // Value to return
 8000636:	23ff      	movs	r3, #255	; 0xff
 8000638:	73fb      	strb	r3, [r7, #15]

	/*** Debounce the key press (remove noise in the key) ***/
#define KEY_DEBOUNCE_MS 300 /*!> Minimum time required for since last press */
	static uint32_t last_pressed_tick = 0;
	if (HAL_GetTick() <= (last_pressed_tick + KEY_DEBOUNCE_MS)) {
 800063a:	f000 fd75 	bl	8001128 <HAL_GetTick>
 800063e:	4602      	mov	r2, r0
 8000640:	4bb1      	ldr	r3, [pc, #708]	; (8000908 <keypad_handler+0x2dc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000648:	429a      	cmp	r2, r3
 800064a:	d801      	bhi.n	8000650 <keypad_handler+0x24>
		// less than KEY_DEBOUNCE_MS since last press. Probably noise
		return key_pressed; // return 0xFF
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	e183      	b.n	8000958 <keypad_handler+0x32c>
	}
	last_pressed_tick = HAL_GetTick();
 8000650:	f000 fd6a 	bl	8001128 <HAL_GetTick>
 8000654:	4603      	mov	r3, r0
 8000656:	4aac      	ldr	r2, [pc, #688]	; (8000908 <keypad_handler+0x2dc>)
 8000658:	6013      	str	r3, [r2, #0]

	/*** Check in which column the event happened ***/
	switch (column_to_evaluate) {
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000660:	d012      	beq.n	8000688 <keypad_handler+0x5c>
 8000662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000666:	f300 8167 	bgt.w	8000938 <keypad_handler+0x30c>
 800066a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800066e:	f000 80b5 	beq.w	80007dc <keypad_handler+0x1b0>
 8000672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000676:	f300 815f 	bgt.w	8000938 <keypad_handler+0x30c>
 800067a:	2b80      	cmp	r3, #128	; 0x80
 800067c:	f000 8104 	beq.w	8000888 <keypad_handler+0x25c>
 8000680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000684:	d053      	beq.n	800072e <keypad_handler+0x102>
 8000686:	e157      	b.n	8000938 <keypad_handler+0x30c>
	case COLUMN_1_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000688:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800068c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000690:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000692:	4b9e      	ldr	r3, [pc, #632]	; (800090c <keypad_handler+0x2e0>)
 8000694:	2208      	movs	r2, #8
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000698:	4b9c      	ldr	r3, [pc, #624]	; (800090c <keypad_handler+0x2e0>)
 800069a:	2220      	movs	r2, #32
 800069c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800069e:	4b9b      	ldr	r3, [pc, #620]	; (800090c <keypad_handler+0x2e0>)
 80006a0:	2210      	movs	r2, #16
 80006a2:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80006a4:	2002      	movs	r0, #2
 80006a6:	f000 fd4b 	bl	8001140 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006aa:	4b98      	ldr	r3, [pc, #608]	; (800090c <keypad_handler+0x2e0>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d002      	beq.n	80006bc <keypad_handler+0x90>
			key_pressed = 0x01; // if column 1 is still high -> column 1 + row 1 = key 1
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
			break;
 80006ba:	e14a      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80006bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80006c6:	4b91      	ldr	r3, [pc, #580]	; (800090c <keypad_handler+0x2e0>)
 80006c8:	2208      	movs	r2, #8
 80006ca:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80006cc:	2002      	movs	r0, #2
 80006ce:	f000 fd37 	bl	8001140 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006d2:	4b8e      	ldr	r3, [pc, #568]	; (800090c <keypad_handler+0x2e0>)
 80006d4:	691b      	ldr	r3, [r3, #16]
 80006d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d002      	beq.n	80006e4 <keypad_handler+0xb8>
			key_pressed = 0x04; // if column 1 is still high -> column 1 + row 2 = key 4
 80006de:	2304      	movs	r3, #4
 80006e0:	73fb      	strb	r3, [r7, #15]
			break;
 80006e2:	e136      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80006e4:	4b89      	ldr	r3, [pc, #548]	; (800090c <keypad_handler+0x2e0>)
 80006e6:	2208      	movs	r2, #8
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80006ea:	4b88      	ldr	r3, [pc, #544]	; (800090c <keypad_handler+0x2e0>)
 80006ec:	2220      	movs	r2, #32
 80006ee:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80006f0:	2002      	movs	r0, #2
 80006f2:	f000 fd25 	bl	8001140 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 80006f6:	4b85      	ldr	r3, [pc, #532]	; (800090c <keypad_handler+0x2e0>)
 80006f8:	691b      	ldr	r3, [r3, #16]
 80006fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <keypad_handler+0xdc>
			key_pressed = 0x07; // if column 1 is still high -> column 1 + row 3 = key 7
 8000702:	2307      	movs	r3, #7
 8000704:	73fb      	strb	r3, [r7, #15]
			break;
 8000706:	e124      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000708:	4b80      	ldr	r3, [pc, #512]	; (800090c <keypad_handler+0x2e0>)
 800070a:	2220      	movs	r2, #32
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 800070e:	4b7f      	ldr	r3, [pc, #508]	; (800090c <keypad_handler+0x2e0>)
 8000710:	2210      	movs	r2, #16
 8000712:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000714:	2002      	movs	r0, #2
 8000716:	f000 fd13 	bl	8001140 <HAL_Delay>
		if (COLUMN_1_GPIO_Port->IDR & COLUMN_1_Pin) {
 800071a:	4b7c      	ldr	r3, [pc, #496]	; (800090c <keypad_handler+0x2e0>)
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000722:	2b00      	cmp	r3, #0
 8000724:	f000 810e 	beq.w	8000944 <keypad_handler+0x318>
			key_pressed = 0x0E; // if column 1 is still high -> column 1 + row 4 = key *
 8000728:	230e      	movs	r3, #14
 800072a:	73fb      	strb	r3, [r7, #15]
			break;
 800072c:	e111      	b.n	8000952 <keypad_handler+0x326>
		}
	  break;

	case COLUMN_2_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 800072e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000736:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000738:	4b74      	ldr	r3, [pc, #464]	; (800090c <keypad_handler+0x2e0>)
 800073a:	2208      	movs	r2, #8
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 800073e:	4b73      	ldr	r3, [pc, #460]	; (800090c <keypad_handler+0x2e0>)
 8000740:	2220      	movs	r2, #32
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 8000744:	4b71      	ldr	r3, [pc, #452]	; (800090c <keypad_handler+0x2e0>)
 8000746:	2210      	movs	r2, #16
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 800074a:	2002      	movs	r0, #2
 800074c:	f000 fcf8 	bl	8001140 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 8000750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800075a:	2b00      	cmp	r3, #0
 800075c:	d002      	beq.n	8000764 <keypad_handler+0x138>
			key_pressed = 0x02; // if column 1 is still high -> column 1 + row 1 = key 1
 800075e:	2302      	movs	r3, #2
 8000760:	73fb      	strb	r3, [r7, #15]
			break;
 8000762:	e0f6      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000764:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000768:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800076c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 800076e:	4b67      	ldr	r3, [pc, #412]	; (800090c <keypad_handler+0x2e0>)
 8000770:	2208      	movs	r2, #8
 8000772:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000774:	2002      	movs	r0, #2
 8000776:	f000 fce3 	bl	8001140 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 800077a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800077e:	691b      	ldr	r3, [r3, #16]
 8000780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000784:	2b00      	cmp	r3, #0
 8000786:	d002      	beq.n	800078e <keypad_handler+0x162>
			key_pressed = 0x05; // if column 1 is still high -> column 1 + row 2 = key 4
 8000788:	2305      	movs	r3, #5
 800078a:	73fb      	strb	r3, [r7, #15]
			break;
 800078c:	e0e1      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <keypad_handler+0x2e0>)
 8000790:	2208      	movs	r2, #8
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 8000794:	4b5d      	ldr	r3, [pc, #372]	; (800090c <keypad_handler+0x2e0>)
 8000796:	2220      	movs	r2, #32
 8000798:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800079a:	2002      	movs	r0, #2
 800079c:	f000 fcd0 	bl	8001140 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 80007a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <keypad_handler+0x188>
			key_pressed = 0x08; // if column 1 is still high -> column 1 + row 3 = key 7
 80007ae:	2308      	movs	r3, #8
 80007b0:	73fb      	strb	r3, [r7, #15]
			break;
 80007b2:	e0ce      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 80007b4:	4b55      	ldr	r3, [pc, #340]	; (800090c <keypad_handler+0x2e0>)
 80007b6:	2220      	movs	r2, #32
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 80007ba:	4b54      	ldr	r3, [pc, #336]	; (800090c <keypad_handler+0x2e0>)
 80007bc:	2210      	movs	r2, #16
 80007be:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 fcbd 	bl	8001140 <HAL_Delay>
		if (COLUMN_2_GPIO_Port->IDR & COLUMN_2_Pin) {
 80007c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007ca:	691b      	ldr	r3, [r3, #16]
 80007cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	f000 80b9 	beq.w	8000948 <keypad_handler+0x31c>
			key_pressed = 0x00; // if column 1 is still high -> column 1 + row 4 = key *
 80007d6:	2300      	movs	r3, #0
 80007d8:	73fb      	strb	r3, [r7, #15]
			break;
 80007da:	e0ba      	b.n	8000952 <keypad_handler+0x326>
		}
	  break;

	case COLUMN_3_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 80007dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007e4:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 80007e6:	4b49      	ldr	r3, [pc, #292]	; (800090c <keypad_handler+0x2e0>)
 80007e8:	2208      	movs	r2, #8
 80007ea:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 80007ec:	4b47      	ldr	r3, [pc, #284]	; (800090c <keypad_handler+0x2e0>)
 80007ee:	2220      	movs	r2, #32
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 80007f2:	4b46      	ldr	r3, [pc, #280]	; (800090c <keypad_handler+0x2e0>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80007f8:	2002      	movs	r0, #2
 80007fa:	f000 fca1 	bl	8001140 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 80007fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000802:	691b      	ldr	r3, [r3, #16]
 8000804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000808:	2b00      	cmp	r3, #0
 800080a:	d002      	beq.n	8000812 <keypad_handler+0x1e6>
			key_pressed = 0x03; // if column 1 is still high -> column 1 + row 1 = key 1
 800080c:	2303      	movs	r3, #3
 800080e:	73fb      	strb	r3, [r7, #15]
			break;
 8000810:	e09f      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 8000812:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 800081c:	4b3b      	ldr	r3, [pc, #236]	; (800090c <keypad_handler+0x2e0>)
 800081e:	2208      	movs	r2, #8
 8000820:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000822:	2002      	movs	r0, #2
 8000824:	f000 fc8c 	bl	8001140 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 8000828:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <keypad_handler+0x210>
			key_pressed = 0x06; // if column 1 is still high -> column 1 + row 2 = key 4
 8000836:	2306      	movs	r3, #6
 8000838:	73fb      	strb	r3, [r7, #15]
			break;
 800083a:	e08a      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <keypad_handler+0x2e0>)
 800083e:	2208      	movs	r2, #8
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 8000842:	4b32      	ldr	r3, [pc, #200]	; (800090c <keypad_handler+0x2e0>)
 8000844:	2220      	movs	r2, #32
 8000846:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000848:	2002      	movs	r0, #2
 800084a:	f000 fc79 	bl	8001140 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 800084e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000852:	691b      	ldr	r3, [r3, #16]
 8000854:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <keypad_handler+0x236>
			key_pressed = 0x09; // if column 1 is still high -> column 1 + row 3 = key 7
 800085c:	2309      	movs	r3, #9
 800085e:	73fb      	strb	r3, [r7, #15]
			break;
 8000860:	e077      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000862:	4b2a      	ldr	r3, [pc, #168]	; (800090c <keypad_handler+0x2e0>)
 8000864:	2220      	movs	r2, #32
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <keypad_handler+0x2e0>)
 800086a:	2210      	movs	r2, #16
 800086c:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 800086e:	2002      	movs	r0, #2
 8000870:	f000 fc66 	bl	8001140 <HAL_Delay>
		if (COLUMN_3_GPIO_Port->IDR & COLUMN_3_Pin) {
 8000874:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800087e:	2b00      	cmp	r3, #0
 8000880:	d064      	beq.n	800094c <keypad_handler+0x320>
			key_pressed = 0x0F; // if column 1 is still high -> column 1 + row 4 = key *
 8000882:	230f      	movs	r3, #15
 8000884:	73fb      	strb	r3, [r7, #15]
			break;
 8000886:	e064      	b.n	8000952 <keypad_handler+0x326>
		}
	  break;

	case COLUMN_4_Pin:
		ROW_1_GPIO_Port->BSRR = ROW_1_Pin; // turn on row 1
 8000888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800088c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000890:	619a      	str	r2, [r3, #24]
		ROW_2_GPIO_Port->BRR = ROW_2_Pin;  // turn off row 2
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <keypad_handler+0x2e0>)
 8000894:	2208      	movs	r2, #8
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BRR = ROW_3_Pin;  // turn off row 3
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <keypad_handler+0x2e0>)
 800089a:	2220      	movs	r2, #32
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BRR = ROW_4_Pin;  // turn off row 4
 800089e:	4b1b      	ldr	r3, [pc, #108]	; (800090c <keypad_handler+0x2e0>)
 80008a0:	2210      	movs	r2, #16
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_Delay(2); // wait for voltage to establish
 80008a4:	2002      	movs	r0, #2
 80008a6:	f000 fc4b 	bl	8001140 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <keypad_handler+0x2e4>)
 80008ac:	691b      	ldr	r3, [r3, #16]
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <keypad_handler+0x290>
			key_pressed = 0x0A; // if column 1 is still high -> column 1 + row 1 = key 1
 80008b6:	230a      	movs	r3, #10
 80008b8:	73fb      	strb	r3, [r7, #15]
			break;
 80008ba:	e04a      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_1_GPIO_Port->BRR = ROW_1_Pin; 	// turn off row 1
 80008bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80008c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_2_GPIO_Port->BSRR = ROW_2_Pin; 	// turn on row 2
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <keypad_handler+0x2e0>)
 80008c8:	2208      	movs	r2, #8
 80008ca:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80008cc:	2002      	movs	r0, #2
 80008ce:	f000 fc37 	bl	8001140 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <keypad_handler+0x2e4>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <keypad_handler+0x2b8>
			key_pressed = 0x0B; // if column 1 is still high -> column 1 + row 2 = key 4
 80008de:	230b      	movs	r3, #11
 80008e0:	73fb      	strb	r3, [r7, #15]
			break;
 80008e2:	e036      	b.n	8000952 <keypad_handler+0x326>
		}

		ROW_2_GPIO_Port->BRR = ROW_2_Pin; 	// turn off row 2
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <keypad_handler+0x2e0>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_3_GPIO_Port->BSRR = ROW_3_Pin; 	// turn on row 3
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <keypad_handler+0x2e0>)
 80008ec:	2220      	movs	r2, #32
 80008ee:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 80008f0:	2002      	movs	r0, #2
 80008f2:	f000 fc25 	bl	8001140 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <keypad_handler+0x2e4>)
 80008f8:	691b      	ldr	r3, [r3, #16]
 80008fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d008      	beq.n	8000914 <keypad_handler+0x2e8>
			key_pressed = 0x0C; // if column 1 is still high -> column 1 + row 3 = key 7
 8000902:	230c      	movs	r3, #12
 8000904:	73fb      	strb	r3, [r7, #15]
			break;
 8000906:	e024      	b.n	8000952 <keypad_handler+0x326>
 8000908:	20000130 	.word	0x20000130
 800090c:	48000400 	.word	0x48000400
 8000910:	48000800 	.word	0x48000800
		}

		ROW_3_GPIO_Port->BRR = ROW_3_Pin;	// turn off row 3
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <keypad_handler+0x334>)
 8000916:	2220      	movs	r2, #32
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
		ROW_4_GPIO_Port->BSRR = ROW_4_Pin; 	// turn on row 4
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <keypad_handler+0x334>)
 800091c:	2210      	movs	r2, #16
 800091e:	619a      	str	r2, [r3, #24]
		HAL_Delay(2); // wait for voltage to establish
 8000920:	2002      	movs	r0, #2
 8000922:	f000 fc0d 	bl	8001140 <HAL_Delay>
		if (COLUMN_4_GPIO_Port->IDR & COLUMN_4_Pin) {
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <keypad_handler+0x338>)
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00e      	beq.n	8000950 <keypad_handler+0x324>
			key_pressed = 0x0D; // if column 1 is still high -> column 1 + row 4 = key *
 8000932:	230d      	movs	r3, #13
 8000934:	73fb      	strb	r3, [r7, #15]
			break;
 8000936:	e00c      	b.n	8000952 <keypad_handler+0x326>
	  break;
	/*!\ TODO: Implement other column cases here */

	default:
		/* This should not be reached */
		printf("Unknown column: %x\r\n", column_to_evaluate);
 8000938:	88fb      	ldrh	r3, [r7, #6]
 800093a:	4619      	mov	r1, r3
 800093c:	480a      	ldr	r0, [pc, #40]	; (8000968 <keypad_handler+0x33c>)
 800093e:	f003 ff25 	bl	800478c <iprintf>
	  break;
 8000942:	e006      	b.n	8000952 <keypad_handler+0x326>
	  break;
 8000944:	bf00      	nop
 8000946:	e004      	b.n	8000952 <keypad_handler+0x326>
	  break;
 8000948:	bf00      	nop
 800094a:	e002      	b.n	8000952 <keypad_handler+0x326>
	  break;
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <keypad_handler+0x326>
	  break;
 8000950:	bf00      	nop
	}

	keypad_init(); // set the columns high again
 8000952:	f7ff fe53 	bl	80005fc <keypad_init>
	return key_pressed; // invalid: 0xFF, valid:[0x00-0x0F]
 8000956:	7bfb      	ldrb	r3, [r7, #15]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	48000400 	.word	0x48000400
 8000964:	48000800 	.word	0x48000800
 8000968:	08005554 	.word	0x08005554

0800096c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000972:	f000 fb69 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000976:	f000 f833 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097a:	f000 f8b3 	bl	8000ae4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800097e:	f000 f881 	bl	8000a84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_init(&ring_buffer_uart_rx, rx_buffer, 16);
 8000982:	2210      	movs	r2, #16
 8000984:	4910      	ldr	r1, [pc, #64]	; (80009c8 <main+0x5c>)
 8000986:	4811      	ldr	r0, [pc, #68]	; (80009cc <main+0x60>)
 8000988:	f000 f969 	bl	8000c5e <ring_buffer_init>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800098c:	2201      	movs	r2, #1
 800098e:	4910      	ldr	r1, [pc, #64]	; (80009d0 <main+0x64>)
 8000990:	4810      	ldr	r0, [pc, #64]	; (80009d4 <main+0x68>)
 8000992:	f002 fb5b 	bl	800304c <HAL_UART_Receive_IT>

  keypad_init(); // Initialize the keypad functionality
 8000996:	f7ff fe31 	bl	80005fc <keypad_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <main+0x6c>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	2bff      	cmp	r3, #255	; 0xff
 80009a0:	d0fb      	beq.n	800099a <main+0x2e>
		  uint16_t key_pressed = keypad_handler(key_event); // call the keypad handler
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <main+0x6c>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe40 	bl	800062c <keypad_handler>
 80009ac:	4603      	mov	r3, r0
 80009ae:	80fb      	strh	r3, [r7, #6]
		  if (key_pressed != 0xFF) {
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	2bff      	cmp	r3, #255	; 0xff
 80009b4:	d004      	beq.n	80009c0 <main+0x54>
			  printf("Key pressed: %x\r\n", key_pressed); // print the key pressed
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	4619      	mov	r1, r3
 80009ba:	4808      	ldr	r0, [pc, #32]	; (80009dc <main+0x70>)
 80009bc:	f003 fee6 	bl	800478c <iprintf>
		  }
		  key_event = 0xFF; // clean the event
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <main+0x6c>)
 80009c2:	22ff      	movs	r2, #255	; 0xff
 80009c4:	801a      	strh	r2, [r3, #0]
	  if (key_event != 0xFF) { // check if there is a event from the EXTi callback
 80009c6:	e7e8      	b.n	800099a <main+0x2e>
 80009c8:	2000011c 	.word	0x2000011c
 80009cc:	20000110 	.word	0x20000110
 80009d0:	2000012c 	.word	0x2000012c
 80009d4:	20000088 	.word	0x20000088
 80009d8:	20000000 	.word	0x20000000
 80009dc:	0800556c 	.word	0x0800556c

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b096      	sub	sp, #88	; 0x58
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2244      	movs	r2, #68	; 0x44
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f004 f812 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a06:	f000 ff37 	bl	8001878 <HAL_PWREx_ControlVoltageScaling>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a10:	f000 f920 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a14:	2302      	movs	r3, #2
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a1c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a32:	2307      	movs	r3, #7
 8000a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 ff6e 	bl	8001924 <HAL_RCC_OscConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a4e:	f000 f901 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a52:	230f      	movs	r3, #15
 8000a54:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a56:	2303      	movs	r3, #3
 8000a58:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a66:	463b      	mov	r3, r7
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 fb36 	bl	80020dc <HAL_RCC_ClockConfig>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a76:	f000 f8ed 	bl	8000c54 <Error_Handler>
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3758      	adds	r7, #88	; 0x58
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	; (8000ae0 <MX_USART2_UART_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART2_UART_Init+0x58>)
 8000ac8:	f002 f9e8 	bl	8002e9c <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f8bf 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000088 	.word	0x20000088
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	; 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b53      	ldr	r3, [pc, #332]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	4a52      	ldr	r2, [pc, #328]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b06:	4b50      	ldr	r3, [pc, #320]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	4b4d      	ldr	r3, [pc, #308]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b1e:	4b4a      	ldr	r3, [pc, #296]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b47      	ldr	r3, [pc, #284]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	4a46      	ldr	r2, [pc, #280]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b36:	4b44      	ldr	r3, [pc, #272]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b41      	ldr	r3, [pc, #260]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a40      	ldr	r2, [pc, #256]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	; (8000c48 <MX_GPIO_Init+0x164>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|ROW_1_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b64:	f000 fe4a 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ROW_2_Pin|ROW_4_Pin|ROW_3_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2138      	movs	r1, #56	; 0x38
 8000b6c:	4837      	ldr	r0, [pc, #220]	; (8000c4c <MX_GPIO_Init+0x168>)
 8000b6e:	f000 fe45 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	4831      	ldr	r0, [pc, #196]	; (8000c50 <MX_GPIO_Init+0x16c>)
 8000b8a:	f000 fc8d 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin ROW_1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|ROW_1_Pin;
 8000b8e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000baa:	f000 fc7d 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_1_Pin */
  GPIO_InitStruct.Pin = COLUMN_1_Pin;
 8000bae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_1_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 0314 	add.w	r3, r7, #20
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_GPIO_Init+0x168>)
 8000bc6:	f000 fc6f 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : COLUMN_4_Pin */
  GPIO_InitStruct.Pin = COLUMN_4_Pin;
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COLUMN_4_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	481c      	ldr	r0, [pc, #112]	; (8000c50 <MX_GPIO_Init+0x16c>)
 8000be0:	f000 fc62 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : COLUMN_2_Pin COLUMN_3_Pin */
  GPIO_InitStruct.Pin = COLUMN_2_Pin|COLUMN_3_Pin;
 8000be4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfe:	f000 fc53 	bl	80014a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW_2_Pin ROW_4_Pin ROW_3_Pin */
  GPIO_InitStruct.Pin = ROW_2_Pin|ROW_4_Pin|ROW_3_Pin;
 8000c02:	2338      	movs	r3, #56	; 0x38
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_GPIO_Init+0x168>)
 8000c1a:	f000 fc45 	bl	80014a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2017      	movs	r0, #23
 8000c24:	f000 fb8b 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c28:	2017      	movs	r0, #23
 8000c2a:	f000 fba4 	bl	8001376 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2100      	movs	r1, #0
 8000c32:	2028      	movs	r0, #40	; 0x28
 8000c34:	f000 fb83 	bl	800133e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c38:	2028      	movs	r0, #40	; 0x28
 8000c3a:	f000 fb9c 	bl	8001376 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	48000800 	.word	0x48000800

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <Error_Handler+0x8>

08000c5e <ring_buffer_init>:

/**
 * @brief This function initializes the control struct of the ring buffer
*/
void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	b085      	sub	sp, #20
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	60f8      	str	r0, [r7, #12]
 8000c66:	60b9      	str	r1, [r7, #8]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	88fa      	ldrh	r2, [r7, #6]
 8000c76:	811a      	strh	r2, [r3, #8]

	ring_buffer->head = 0;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	2200      	movs	r2, #0
 8000c82:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2200      	movs	r2, #0
 8000c88:	729a      	strb	r2, [r3, #10]
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <ring_buffer_put>:
/**
 * @brief This function adds a data in the ring buffer
 * @param data: the value to be added
*/
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer, uint8_t data)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	8892      	ldrh	r2, [r2, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	78fa      	ldrb	r2, [r7, #3]
 8000cae:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head + 1) % ring_buffer->capacity;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	889b      	ldrh	r3, [r3, #4]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	8912      	ldrh	r2, [r2, #8]
 8000cba:	fb93 f1f2 	sdiv	r1, r3, r2
 8000cbe:	fb01 f202 	mul.w	r2, r1, r2
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0) {
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7a9b      	ldrb	r3, [r3, #10]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00c      	beq.n	8000cec <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail + 1) % ring_buffer->capacity;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	88db      	ldrh	r3, [r3, #6]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	8912      	ldrh	r2, [r2, #8]
 8000cdc:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ce0:	fb01 f202 	mul.w	r2, r1, r2
 8000ce4:	1a9b      	subs	r3, r3, r2
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	80da      	strh	r2, [r3, #6]
	}

	if (ring_buffer->head == ring_buffer->tail) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	889a      	ldrh	r2, [r3, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	88db      	ldrh	r3, [r3, #6]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d104      	bne.n	8000d02 <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	729a      	strb	r2, [r3, #10]
		return 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <ring_buffer_put+0x6e>
	}
	return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0ac      	sub	sp, #176	; 0xb0
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2288      	movs	r2, #136	; 0x88
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fe4d 	bl	8004a18 <memset>
  if(huart->Instance==USART2)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a25      	ldr	r2, [pc, #148]	; (8000e18 <HAL_UART_MspInit+0xc0>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d143      	bne.n	8000e10 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4618      	mov	r0, r3
 8000d96:	f001 fbc5 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da0:	f7ff ff58 	bl	8000c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000da4:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <HAL_UART_MspInit+0xc4>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <HAL_UART_MspInit+0xc4>)
 8000daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dae:	6593      	str	r3, [r2, #88]	; 0x58
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0xc4>)
 8000db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db8:	613b      	str	r3, [r7, #16]
 8000dba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_UART_MspInit+0xc4>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <HAL_UART_MspInit+0xc4>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_UART_MspInit+0xc4>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dd4:	230c      	movs	r3, #12
 8000dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de6:	2303      	movs	r3, #3
 8000de8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dec:	2307      	movs	r3, #7
 8000dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 fb54 	bl	80014a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2026      	movs	r0, #38	; 0x26
 8000e06:	f000 fa9a 	bl	800133e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e0a:	2026      	movs	r0, #38	; 0x26
 8000e0c:	f000 fab3 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	37b0      	adds	r7, #176	; 0xb0
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40004400 	.word	0x40004400
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f948 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_4_Pin);
 8000e78:	2080      	movs	r0, #128	; 0x80
 8000e7a:	f000 fcd7 	bl	800182c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_2_Pin);
 8000e7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e82:	f000 fcd3 	bl	800182c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(COLUMN_3_Pin);
 8000e86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e8a:	f000 fccf 	bl	800182c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <USART2_IRQHandler+0x10>)
 8000e9a:	f002 f923 	bl	80030e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000088 	.word	0x20000088

08000ea8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(COLUMN_1_Pin);
 8000eac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000eb0:	f000 fcbc 	bl	800182c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eb8:	f000 fcb8 	bl	800182c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	e00a      	b.n	8000ee8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ed2:	f3af 8000 	nop.w
 8000ed6:	4601      	mov	r1, r0
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	60ba      	str	r2, [r7, #8]
 8000ede:	b2ca      	uxtb	r2, r1
 8000ee0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697a      	ldr	r2, [r7, #20]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	dbf0      	blt.n	8000ed2 <_read+0x12>
  }

  return len;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000efa:	b480      	push	{r7}
 8000efc:	b083      	sub	sp, #12
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f22:	605a      	str	r2, [r3, #4]
  return 0;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_isatty>:

int _isatty(int file)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b083      	sub	sp, #12
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
	...

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f003 fd8e 	bl	8004ab4 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20018000 	.word	0x20018000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	20000134 	.word	0x20000134
 8000fcc:	20000288 	.word	0x20000288

08000fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800102c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ff8:	f7ff ffea 	bl	8000fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001022:	f003 fd4d 	bl	8004ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001026:	f7ff fca1 	bl	800096c <main>

0800102a <LoopForever>:

LoopForever:
    b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800102c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001038:	0800560c 	.word	0x0800560c
  ldr r2, =_sbss
 800103c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001040:	20000288 	.word	0x20000288

08001044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_2_IRQHandler>
	...

08001048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_Init+0x3c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <HAL_Init+0x3c>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f962 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f80f 	bl	8001088 <HAL_InitTick>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	e001      	b.n	800107a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001076:	f7ff fe4b 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <HAL_InitTick+0x6c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d023      	beq.n	80010e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_InitTick+0x70>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_InitTick+0x6c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 f96d 	bl	8001392 <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10f      	bne.n	80010de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d809      	bhi.n	80010d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f000 f937 	bl	800133e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_InitTick+0x74>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	e007      	b.n	80010e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e004      	b.n	80010e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e001      	b.n	80010e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	20000004 	.word	0x20000004
 80010fc:	20000008 	.word	0x20000008

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000000c 	.word	0x2000000c
 8001124:	20000138 	.word	0x20000138

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000138 	.word	0x20000138

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800115a:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <HAL_Delay+0x44>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000000c 	.word	0x2000000c

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff29 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff3e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff31 	bl	80011ec <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa2 	bl	80012e4 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d008      	beq.n	80013d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e022      	b.n	800141a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 020e 	bic.w	r2, r2, #14
 80013e2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f003 021c 	and.w	r2, r3, #28
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	2101      	movs	r1, #1
 8001402:	fa01 f202 	lsl.w	r2, r1, r2
 8001406:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001418:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800141a:	4618      	mov	r0, r3
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d005      	beq.n	800144a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2204      	movs	r2, #4
 8001442:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e029      	b.n	800149e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 020e 	bic.w	r2, r2, #14
 8001458:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 021c 	and.w	r2, r3, #28
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	2101      	movs	r1, #1
 8001478:	fa01 f202 	lsl.w	r2, r1, r2
 800147c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	4798      	blx	r3
    }
  }
  return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014b6:	e17f      	b.n	80017b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2101      	movs	r1, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa01 f303 	lsl.w	r3, r1, r3
 80014c4:	4013      	ands	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8171 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0303 	and.w	r3, r3, #3
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d005      	beq.n	80014e8 <HAL_GPIO_Init+0x40>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d130      	bne.n	800154a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	f003 0201 	and.w	r2, r3, #1
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b03      	cmp	r3, #3
 8001554:	d118      	bne.n	8001588 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800155c:	2201      	movs	r2, #1
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	f003 0201 	and.w	r2, r3, #1
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	2b03      	cmp	r3, #3
 8001592:	d017      	beq.n	80015c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	2203      	movs	r2, #3
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d123      	bne.n	8001618 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	08da      	lsrs	r2, r3, #3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3208      	adds	r2, #8
 80015d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	220f      	movs	r2, #15
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691a      	ldr	r2, [r3, #16]
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	08da      	lsrs	r2, r3, #3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3208      	adds	r2, #8
 8001612:	6939      	ldr	r1, [r7, #16]
 8001614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0203 	and.w	r2, r3, #3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80ac 	beq.w	80017b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	4b5f      	ldr	r3, [pc, #380]	; (80017d8 <HAL_GPIO_Init+0x330>)
 800165c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165e:	4a5e      	ldr	r2, [pc, #376]	; (80017d8 <HAL_GPIO_Init+0x330>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6613      	str	r3, [r2, #96]	; 0x60
 8001666:	4b5c      	ldr	r3, [pc, #368]	; (80017d8 <HAL_GPIO_Init+0x330>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001672:	4a5a      	ldr	r2, [pc, #360]	; (80017dc <HAL_GPIO_Init+0x334>)
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800169c:	d025      	beq.n	80016ea <HAL_GPIO_Init+0x242>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a4f      	ldr	r2, [pc, #316]	; (80017e0 <HAL_GPIO_Init+0x338>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d01f      	beq.n	80016e6 <HAL_GPIO_Init+0x23e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4e      	ldr	r2, [pc, #312]	; (80017e4 <HAL_GPIO_Init+0x33c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d019      	beq.n	80016e2 <HAL_GPIO_Init+0x23a>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a4d      	ldr	r2, [pc, #308]	; (80017e8 <HAL_GPIO_Init+0x340>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_GPIO_Init+0x236>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x344>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d00d      	beq.n	80016da <HAL_GPIO_Init+0x232>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4a4b      	ldr	r2, [pc, #300]	; (80017f0 <HAL_GPIO_Init+0x348>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d007      	beq.n	80016d6 <HAL_GPIO_Init+0x22e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x34c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d101      	bne.n	80016d2 <HAL_GPIO_Init+0x22a>
 80016ce:	2306      	movs	r3, #6
 80016d0:	e00c      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d2:	2307      	movs	r3, #7
 80016d4:	e00a      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016d6:	2305      	movs	r3, #5
 80016d8:	e008      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016da:	2304      	movs	r3, #4
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016de:	2303      	movs	r3, #3
 80016e0:	e004      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e002      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_GPIO_Init+0x244>
 80016ea:	2300      	movs	r3, #0
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	f002 0203 	and.w	r2, r2, #3
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	4093      	lsls	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016fc:	4937      	ldr	r1, [pc, #220]	; (80017dc <HAL_GPIO_Init+0x334>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800170a:	4b3b      	ldr	r3, [pc, #236]	; (80017f8 <HAL_GPIO_Init+0x350>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800172e:	4a32      	ldr	r2, [pc, #200]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001734:	4b30      	ldr	r3, [pc, #192]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	43db      	mvns	r3, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001758:	4a27      	ldr	r2, [pc, #156]	; (80017f8 <HAL_GPIO_Init+0x350>)
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_GPIO_Init+0x350>)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_GPIO_Init+0x350>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	43db      	mvns	r3, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_GPIO_Init+0x350>)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae78 	bne.w	80014b8 <HAL_GPIO_Init+0x10>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	371c      	adds	r7, #28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40021000 	.word	0x40021000
 80017dc:	40010000 	.word	0x40010000
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48000800 	.word	0x48000800
 80017e8:	48000c00 	.word	0x48000c00
 80017ec:	48001000 	.word	0x48001000
 80017f0:	48001400 	.word	0x48001400
 80017f4:	48001800 	.word	0x48001800
 80017f8:	40010400 	.word	0x40010400

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001818:	e002      	b.n	8001820 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001838:	695a      	ldr	r2, [r3, #20]
 800183a:	88fb      	ldrh	r3, [r7, #6]
 800183c:	4013      	ands	r3, r2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fec6 	bl	80005dc <HAL_GPIO_EXTI_Callback>
  }
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40010400 	.word	0x40010400

0800185c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_PWREx_GetVoltageRange+0x18>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40007000 	.word	0x40007000

08001878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001886:	d130      	bne.n	80018ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001890:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001894:	d038      	beq.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800189e:	4a1e      	ldr	r2, [pc, #120]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2232      	movs	r2, #50	; 0x32
 80018ac:	fb02 f303 	mul.w	r3, r2, r3
 80018b0:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	3301      	adds	r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018bc:	e002      	b.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d0:	d102      	bne.n	80018d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f2      	bne.n	80018be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e4:	d110      	bne.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e00f      	b.n	800190a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f6:	d007      	beq.n	8001908 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001906:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40007000 	.word	0x40007000
 800191c:	20000004 	.word	0x20000004
 8001920:	431bde83 	.word	0x431bde83

08001924 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e3ca      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001936:	4b97      	ldr	r3, [pc, #604]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001940:	4b94      	ldr	r3, [pc, #592]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 80e4 	beq.w	8001b20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_RCC_OscConfig+0x4a>
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b0c      	cmp	r3, #12
 8001962:	f040 808b 	bne.w	8001a7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	f040 8087 	bne.w	8001a7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196e:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x62>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d101      	bne.n	8001986 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e3a2      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a1a      	ldr	r2, [r3, #32]
 800198a:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <HAL_RCC_OscConfig+0x7c>
 8001996:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199e:	e005      	b.n	80019ac <HAL_RCC_OscConfig+0x88>
 80019a0:	4b7c      	ldr	r3, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a6:	091b      	lsrs	r3, r3, #4
 80019a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d223      	bcs.n	80019f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 fd55 	bl	8002464 <RCC_SetFlashLatencyFromMSIRange>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e383      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c4:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a72      	ldr	r2, [pc, #456]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019ca:	f043 0308 	orr.w	r3, r3, #8
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	496d      	ldr	r1, [pc, #436]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019e2:	4b6c      	ldr	r3, [pc, #432]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	4968      	ldr	r1, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	e025      	b.n	8001a44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	4960      	ldr	r1, [pc, #384]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a16:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	021b      	lsls	r3, r3, #8
 8001a24:	495b      	ldr	r1, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 fd15 	bl	8002464 <RCC_SetFlashLatencyFromMSIRange>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e343      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a44:	f000 fc4a 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b52      	ldr	r3, [pc, #328]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	4950      	ldr	r1, [pc, #320]	; (8001b98 <HAL_RCC_OscConfig+0x274>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	4a4e      	ldr	r2, [pc, #312]	; (8001b9c <HAL_RCC_OscConfig+0x278>)
 8001a62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a64:	4b4e      	ldr	r3, [pc, #312]	; (8001ba0 <HAL_RCC_OscConfig+0x27c>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fb0d 	bl	8001088 <HAL_InitTick>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d052      	beq.n	8001b1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	e327      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d032      	beq.n	8001aea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fb4a 	bl	8001128 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a98:	f7ff fb46 	bl	8001128 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e310      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a36      	ldr	r2, [pc, #216]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	4931      	ldr	r1, [pc, #196]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	69db      	ldr	r3, [r3, #28]
 8001ae0:	021b      	lsls	r3, r3, #8
 8001ae2:	492c      	ldr	r1, [pc, #176]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	604b      	str	r3, [r1, #4]
 8001ae8:	e01a      	b.n	8001b20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af6:	f7ff fb17 	bl	8001128 <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afe:	f7ff fb13 	bl	8001128 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e2dd      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b10:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x1da>
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d074      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d005      	beq.n	8001b3e <HAL_RCC_OscConfig+0x21a>
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b0c      	cmp	r3, #12
 8001b36:	d10e      	bne.n	8001b56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d10b      	bne.n	8001b56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d064      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2f0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d160      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e2ba      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5e:	d106      	bne.n	8001b6e <HAL_RCC_OscConfig+0x24a>
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	e026      	b.n	8001bbc <HAL_RCC_OscConfig+0x298>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b76:	d115      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x280>
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a02      	ldr	r2, [pc, #8]	; (8001b94 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x298>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08005580 	.word	0x08005580
 8001b9c:	20000004 	.word	0x20000004
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	4ba0      	ldr	r3, [pc, #640]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a9f      	ldr	r2, [pc, #636]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b9d      	ldr	r3, [pc, #628]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a9c      	ldr	r2, [pc, #624]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fab0 	bl	8001128 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff faac 	bl	8001128 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e276      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bde:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x2a8>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff fa9c 	bl	8001128 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fa98 	bl	8001128 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e262      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x2d0>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d060      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_OscConfig+0x310>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d119      	bne.n	8001c62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d116      	bne.n	8001c62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c34:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_OscConfig+0x328>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e23f      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b76      	ldr	r3, [pc, #472]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	4973      	ldr	r1, [pc, #460]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c60:	e040      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d023      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c76:	f7ff fa57 	bl	8001128 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fa53 	bl	8001128 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e21d      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c90:	4b65      	ldr	r3, [pc, #404]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9c:	4b62      	ldr	r3, [pc, #392]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	061b      	lsls	r3, r3, #24
 8001caa:	495f      	ldr	r1, [pc, #380]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	604b      	str	r3, [r1, #4]
 8001cb0:	e018      	b.n	8001ce4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a5c      	ldr	r2, [pc, #368]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7ff fa33 	bl	8001128 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc6:	f7ff fa2f 	bl	8001128 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e1f9      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d03c      	beq.n	8001d6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01c      	beq.n	8001d32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfe:	4a4a      	ldr	r2, [pc, #296]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d08:	f7ff fa0e 	bl	8001128 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d10:	f7ff fa0a 	bl	8001128 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e1d4      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0ef      	beq.n	8001d10 <HAL_RCC_OscConfig+0x3ec>
 8001d30:	e01b      	b.n	8001d6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d38:	4a3b      	ldr	r2, [pc, #236]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff f9f1 	bl	8001128 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f9ed 	bl	8001128 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1b7      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d5c:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ef      	bne.n	8001d4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80a6 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d10d      	bne.n	8001da4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d92:	6593      	str	r3, [r2, #88]	; 0x58
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da4:	4b21      	ldr	r3, [pc, #132]	; (8001e2c <HAL_RCC_OscConfig+0x508>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d118      	bne.n	8001de2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001db0:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCC_OscConfig+0x508>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_RCC_OscConfig+0x508>)
 8001db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f9b4 	bl	8001128 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc4:	f7ff f9b0 	bl	8001128 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e17a      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd6:	4b15      	ldr	r3, [pc, #84]	; (8001e2c <HAL_RCC_OscConfig+0x508>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d108      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4d8>
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dfa:	e029      	b.n	8001e50 <HAL_RCC_OscConfig+0x52c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b05      	cmp	r3, #5
 8001e02:	d115      	bne.n	8001e30 <HAL_RCC_OscConfig+0x50c>
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1a:	4a03      	ldr	r2, [pc, #12]	; (8001e28 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e24:	e014      	b.n	8001e50 <HAL_RCC_OscConfig+0x52c>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40007000 	.word	0x40007000
 8001e30:	4b9c      	ldr	r3, [pc, #624]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e36:	4a9b      	ldr	r2, [pc, #620]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001e38:	f023 0301 	bic.w	r3, r3, #1
 8001e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e40:	4b98      	ldr	r3, [pc, #608]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e46:	4a97      	ldr	r2, [pc, #604]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d016      	beq.n	8001e86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff f966 	bl	8001128 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5e:	e00a      	b.n	8001e76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e60:	f7ff f962 	bl	8001128 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e12a      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	4b8b      	ldr	r3, [pc, #556]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ed      	beq.n	8001e60 <HAL_RCC_OscConfig+0x53c>
 8001e84:	e015      	b.n	8001eb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e86:	f7ff f94f 	bl	8001128 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e8c:	e00a      	b.n	8001ea4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8e:	f7ff f94b 	bl	8001128 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e113      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea4:	4b7f      	ldr	r3, [pc, #508]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d1ed      	bne.n	8001e8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eb2:	7ffb      	ldrb	r3, [r7, #31]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d105      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb8:	4b7a      	ldr	r3, [pc, #488]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ebc:	4a79      	ldr	r2, [pc, #484]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80fe 	beq.w	80020ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	f040 80d0 	bne.w	8002078 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d130      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d127      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f08:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d11f      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f18:	2a07      	cmp	r2, #7
 8001f1a:	bf14      	ite	ne
 8001f1c:	2201      	movne	r2, #1
 8001f1e:	2200      	moveq	r2, #0
 8001f20:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d113      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	3b01      	subs	r3, #1
 8001f34:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d109      	bne.n	8001f4e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	085b      	lsrs	r3, r3, #1
 8001f46:	3b01      	subs	r3, #1
 8001f48:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d06e      	beq.n	800202c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	d069      	beq.n	8002028 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0ad      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f70:	4b4c      	ldr	r3, [pc, #304]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a4b      	ldr	r2, [pc, #300]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f7c:	f7ff f8d4 	bl	8001128 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f84:	f7ff f8d0 	bl	8001128 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e09a      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f96:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001fa4:	68da      	ldr	r2, [r3, #12]
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <HAL_RCC_OscConfig+0x784>)
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fb2:	3a01      	subs	r2, #1
 8001fb4:	0112      	lsls	r2, r2, #4
 8001fb6:	4311      	orrs	r1, r2
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fbc:	0212      	lsls	r2, r2, #8
 8001fbe:	4311      	orrs	r1, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fc4:	0852      	lsrs	r2, r2, #1
 8001fc6:	3a01      	subs	r2, #1
 8001fc8:	0552      	lsls	r2, r2, #21
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fd0:	0852      	lsrs	r2, r2, #1
 8001fd2:	3a01      	subs	r2, #1
 8001fd4:	0652      	lsls	r2, r2, #25
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fdc:	0912      	lsrs	r2, r2, #4
 8001fde:	0452      	lsls	r2, r2, #17
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	4930      	ldr	r1, [pc, #192]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001fee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ff2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8001ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002000:	f7ff f892 	bl	8001128 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002008:	f7ff f88e 	bl	8001128 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e058      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800201a:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002026:	e050      	b.n	80020ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e04f      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d148      	bne.n	80020ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002044:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a16      	ldr	r2, [pc, #88]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002050:	f7ff f86a 	bl	8001128 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002058:	f7ff f866 	bl	8001128 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e030      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x734>
 8002076:	e028      	b.n	80020ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d023      	beq.n	80020c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_RCC_OscConfig+0x780>)
 8002084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7ff f84d 	bl	8001128 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002090:	e00c      	b.n	80020ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff f849 	bl	8001128 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d905      	bls.n	80020ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e013      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
 80020a4:	40021000 	.word	0x40021000
 80020a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x7b0>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ec      	bne.n	8002092 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x7b0>)
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	4905      	ldr	r1, [pc, #20]	; (80020d4 <HAL_RCC_OscConfig+0x7b0>)
 80020be:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_RCC_OscConfig+0x7b4>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
 80020c4:	e001      	b.n	80020ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e000      	b.n	80020cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3720      	adds	r7, #32
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	feeefffc 	.word	0xfeeefffc

080020dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0e7      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4970      	ldr	r1, [pc, #448]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0cf      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d010      	beq.n	800214e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b66      	ldr	r3, [pc, #408]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002138:	429a      	cmp	r2, r3
 800213a:	d908      	bls.n	800214e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b63      	ldr	r3, [pc, #396]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	4960      	ldr	r1, [pc, #384]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d04c      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b03      	cmp	r3, #3
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002162:	4b5a      	ldr	r3, [pc, #360]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d121      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0a6      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d115      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e09a      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002192:	4b4e      	ldr	r3, [pc, #312]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d109      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e08e      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e086      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f023 0203 	bic.w	r2, r3, #3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4943      	ldr	r1, [pc, #268]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c4:	f7fe ffb0 	bl	8001128 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021cc:	f7fe ffac 	bl	8001128 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e06e      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 020c 	and.w	r2, r3, #12
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d1eb      	bne.n	80021cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d010      	beq.n	8002222 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800220c:	429a      	cmp	r2, r3
 800220e:	d208      	bcs.n	8002222 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	492b      	ldr	r1, [pc, #172]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d210      	bcs.n	8002252 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f023 0207 	bic.w	r2, r3, #7
 8002238:	4923      	ldr	r1, [pc, #140]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	4313      	orrs	r3, r2
 800223e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002240:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d001      	beq.n	8002252 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e036      	b.n	80022c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d008      	beq.n	8002270 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225e:	4b1b      	ldr	r3, [pc, #108]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	4918      	ldr	r1, [pc, #96]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800227c:	4b13      	ldr	r3, [pc, #76]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	4910      	ldr	r1, [pc, #64]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	4313      	orrs	r3, r2
 800228e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002290:	f000 f824 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8002294:	4602      	mov	r2, r0
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	490b      	ldr	r1, [pc, #44]	; (80022d0 <HAL_RCC_ClockConfig+0x1f4>)
 80022a2:	5ccb      	ldrb	r3, [r1, r3]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ac:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1f8>)
 80022ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1fc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7fe fee7 	bl	8001088 <HAL_InitTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80022be:	7afb      	ldrb	r3, [r7, #11]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08005580 	.word	0x08005580
 80022d4:	20000004 	.word	0x20000004
 80022d8:	20000008 	.word	0x20000008

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	b089      	sub	sp, #36	; 0x24
 80022e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	2300      	movs	r3, #0
 80022e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f003 030c 	and.w	r3, r3, #12
 80022f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f4:	4b3b      	ldr	r3, [pc, #236]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x34>
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d121      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d11e      	bne.n	800234e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002310:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800231c:	4b31      	ldr	r3, [pc, #196]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	61fb      	str	r3, [r7, #28]
 800232a:	e005      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	091b      	lsrs	r3, r3, #4
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002340:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d10d      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	2b04      	cmp	r3, #4
 8002352:	d102      	bne.n	800235a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e004      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	2b08      	cmp	r3, #8
 800235e:	d101      	bne.n	8002364 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002360:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002362:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d134      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800236a:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d003      	beq.n	8002382 <HAL_RCC_GetSysClockFreq+0xa6>
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d003      	beq.n	8002388 <HAL_RCC_GetSysClockFreq+0xac>
 8002380:	e005      	b.n	800238e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002382:	4b1a      	ldr	r3, [pc, #104]	; (80023ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002384:	617b      	str	r3, [r7, #20]
      break;
 8002386:	e005      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800238a:	617b      	str	r3, [r7, #20]
      break;
 800238c:	e002      	b.n	8002394 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	617b      	str	r3, [r7, #20]
      break;
 8002392:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002394:	4b13      	ldr	r3, [pc, #76]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	3301      	adds	r3, #1
 80023a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	0a1b      	lsrs	r3, r3, #8
 80023a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	fb03 f202 	mul.w	r2, r3, r2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	0e5b      	lsrs	r3, r3, #25
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	3301      	adds	r3, #1
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023d4:	69bb      	ldr	r3, [r7, #24]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08005598 	.word	0x08005598
 80023ec:	00f42400 	.word	0x00f42400
 80023f0:	007a1200 	.word	0x007a1200

080023f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f8:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_GetHCLKFreq+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002410:	f7ff fff0 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	4904      	ldr	r1, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002422:	5ccb      	ldrb	r3, [r1, r3]
 8002424:	f003 031f 	and.w	r3, r3, #31
 8002428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800242c:	4618      	mov	r0, r3
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40021000 	.word	0x40021000
 8002434:	08005590 	.word	0x08005590

08002438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800243c:	f7ff ffda 	bl	80023f4 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0adb      	lsrs	r3, r3, #11
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4904      	ldr	r1, [pc, #16]	; (8002460 <HAL_RCC_GetPCLK2Freq+0x28>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40021000 	.word	0x40021000
 8002460:	08005590 	.word	0x08005590

08002464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800247c:	f7ff f9ee 	bl	800185c <HAL_PWREx_GetVoltageRange>
 8002480:	6178      	str	r0, [r7, #20]
 8002482:	e014      	b.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	6593      	str	r3, [r2, #88]	; 0x58
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800249c:	f7ff f9de 	bl	800185c <HAL_PWREx_GetVoltageRange>
 80024a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d10b      	bne.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d919      	bls.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2ba0      	cmp	r3, #160	; 0xa0
 80024c0:	d902      	bls.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e013      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c8:	2301      	movs	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e010      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d902      	bls.n	80024da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024d4:	2303      	movs	r3, #3
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e00a      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b80      	cmp	r3, #128	; 0x80
 80024de:	d102      	bne.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e0:	2302      	movs	r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	e004      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d101      	bne.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ec:	2301      	movs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 0207 	bic.w	r2, r3, #7
 80024f8:	4909      	ldr	r1, [pc, #36]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	40022000 	.word	0x40022000

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800252c:	2300      	movs	r3, #0
 800252e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002530:	2300      	movs	r3, #0
 8002532:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253c:	2b00      	cmp	r3, #0
 800253e:	d041      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002544:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002548:	d02a      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800254a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800254e:	d824      	bhi.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002554:	d008      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002556:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800255a:	d81e      	bhi.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d010      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002566:	e018      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002568:	4b86      	ldr	r3, [pc, #536]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a85      	ldr	r2, [pc, #532]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002572:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002574:	e015      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fabb 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002582:	4603      	mov	r3, r0
 8002584:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002586:	e00c      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3320      	adds	r3, #32
 800258c:	2100      	movs	r1, #0
 800258e:	4618      	mov	r0, r3
 8002590:	f000 fba6 	bl	8002ce0 <RCCEx_PLLSAI2_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002598:	e003      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	74fb      	strb	r3, [r7, #19]
      break;
 800259e:	e000      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80025a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025a2:	7cfb      	ldrb	r3, [r7, #19]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10b      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a8:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b6:	4973      	ldr	r1, [pc, #460]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025be:	e001      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d041      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025d8:	d02a      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025de:	d824      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e4:	d008      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ea:	d81e      	bhi.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00a      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f4:	d010      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025f6:	e018      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f8:	4b62      	ldr	r3, [pc, #392]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4a61      	ldr	r2, [pc, #388]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002602:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002604:	e015      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fa73 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002616:	e00c      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3320      	adds	r3, #32
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f000 fb5e 	bl	8002ce0 <RCCEx_PLLSAI2_Config>
 8002624:	4603      	mov	r3, r0
 8002626:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002628:	e003      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	74fb      	strb	r3, [r7, #19]
      break;
 800262e:	e000      	b.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002638:	4b52      	ldr	r3, [pc, #328]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002646:	494f      	ldr	r1, [pc, #316]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002648:	4313      	orrs	r3, r2
 800264a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800264e:	e001      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002650:	7cfb      	ldrb	r3, [r7, #19]
 8002652:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80a0 	beq.w	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002676:	2300      	movs	r3, #0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	4a40      	ldr	r2, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002694:	2301      	movs	r3, #1
 8002696:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026a4:	f7fe fd40 	bl	8001128 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026aa:	e009      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe fd3c 	bl	8001128 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d902      	bls.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	74fb      	strb	r3, [r7, #19]
        break;
 80026be:	e005      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026c0:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d15c      	bne.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01f      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d019      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800270c:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fcfb 	bl	8001128 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002734:	e00b      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fcf7 	bl	8001128 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d902      	bls.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	74fb      	strb	r3, [r7, #19]
            break;
 800274c:	e006      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	4b0d      	ldr	r3, [pc, #52]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0ec      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800275c:	7cfb      	ldrb	r3, [r7, #19]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10c      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002762:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002772:	4904      	ldr	r1, [pc, #16]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800277a:	e009      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002790:	7c7b      	ldrb	r3, [r7, #17]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d105      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002796:	4b9e      	ldr	r3, [pc, #632]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4a9d      	ldr	r2, [pc, #628]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ae:	4b98      	ldr	r3, [pc, #608]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f023 0203 	bic.w	r2, r3, #3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027bc:	4994      	ldr	r1, [pc, #592]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 020c 	bic.w	r2, r3, #12
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	498c      	ldr	r1, [pc, #560]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f2:	4b87      	ldr	r3, [pc, #540]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4983      	ldr	r1, [pc, #524]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002814:	4b7e      	ldr	r3, [pc, #504]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	497b      	ldr	r1, [pc, #492]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002836:	4b76      	ldr	r3, [pc, #472]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002844:	4972      	ldr	r1, [pc, #456]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	4313      	orrs	r3, r2
 8002848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002858:	4b6d      	ldr	r3, [pc, #436]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	496a      	ldr	r1, [pc, #424]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800287a:	4b65      	ldr	r3, [pc, #404]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002880:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	4961      	ldr	r1, [pc, #388]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800289c:	4b5c      	ldr	r3, [pc, #368]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028aa:	4959      	ldr	r1, [pc, #356]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028be:	4b54      	ldr	r3, [pc, #336]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028cc:	4950      	ldr	r1, [pc, #320]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00a      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028e0:	4b4b      	ldr	r3, [pc, #300]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	4948      	ldr	r1, [pc, #288]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d00a      	beq.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002902:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	493f      	ldr	r1, [pc, #252]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	4313      	orrs	r3, r2
 8002914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d028      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002924:	4b3a      	ldr	r3, [pc, #232]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002932:	4937      	ldr	r1, [pc, #220]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800293e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002942:	d106      	bne.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002944:	4b32      	ldr	r3, [pc, #200]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800294e:	60d3      	str	r3, [r2, #12]
 8002950:	e011      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800295a:	d10c      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f8c8 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002972:	7cfb      	ldrb	r3, [r7, #19]
 8002974:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d028      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002990:	491f      	ldr	r1, [pc, #124]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a0:	d106      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a2:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ac:	60d3      	str	r3, [r2, #12]
 80029ae:	e011      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b8:	d10c      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3304      	adds	r3, #4
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f899 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029ca:	7cfb      	ldrb	r3, [r7, #19]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d02b      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	4908      	ldr	r1, [pc, #32]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fe:	d109      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a00:	4b03      	ldr	r3, [pc, #12]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a02      	ldr	r2, [pc, #8]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0a:	60d3      	str	r3, [r2, #12]
 8002a0c:	e014      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3304      	adds	r3, #4
 8002a22:	2101      	movs	r1, #1
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 f867 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2e:	7cfb      	ldrb	r3, [r7, #19]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d02f      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a44:	4b2b      	ldr	r3, [pc, #172]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a52:	4928      	ldr	r1, [pc, #160]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a62:	d10d      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 f844 	bl	8002af8 <RCCEx_PLLSAI1_Config>
 8002a70:	4603      	mov	r3, r0
 8002a72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d014      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a7a:	7cfb      	ldrb	r3, [r7, #19]
 8002a7c:	74bb      	strb	r3, [r7, #18]
 8002a7e:	e011      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a88:	d10c      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3320      	adds	r3, #32
 8002a8e:	2102      	movs	r1, #2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f925 	bl	8002ce0 <RCCEx_PLLSAI2_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a9a:	7cfb      	ldrb	r3, [r7, #19]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002abe:	490d      	ldr	r1, [pc, #52]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ae2:	4904      	ldr	r1, [pc, #16]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002aea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000

08002af8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b06:	4b75      	ldr	r3, [pc, #468]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	f003 0203 	and.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d10d      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
       ||
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b2a:	4b6c      	ldr	r3, [pc, #432]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
       ||
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d047      	beq.n	8002bce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	e044      	b.n	8002bce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d018      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x86>
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d825      	bhi.n	8002b9c <RCCEx_PLLSAI1_Config+0xa4>
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d002      	beq.n	8002b5a <RCCEx_PLLSAI1_Config+0x62>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d009      	beq.n	8002b6c <RCCEx_PLLSAI1_Config+0x74>
 8002b58:	e020      	b.n	8002b9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b5a:	4b60      	ldr	r3, [pc, #384]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d11d      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b6a:	e01a      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b6c:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d116      	bne.n	8002ba6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e013      	b.n	8002ba6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7e:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10f      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b8a:	4b54      	ldr	r3, [pc, #336]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b9a:	e006      	b.n	8002baa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba0:	e004      	b.n	8002bac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
 8002ba4:	e002      	b.n	8002bac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba6:	bf00      	nop
 8002ba8:	e000      	b.n	8002bac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002baa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bac:	7bfb      	ldrb	r3, [r7, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10d      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	4944      	ldr	r1, [pc, #272]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d17d      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bd4:	4b41      	ldr	r3, [pc, #260]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a40      	ldr	r2, [pc, #256]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be0:	f7fe faa2 	bl	8001128 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002be6:	e009      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be8:	f7fe fa9e 	bl	8001128 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	73fb      	strb	r3, [r7, #15]
        break;
 8002bfa:	e005      	b.n	8002c08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bfc:	4b37      	ldr	r3, [pc, #220]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1ef      	bne.n	8002be8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d160      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d111      	bne.n	8002c38 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c14:	4b31      	ldr	r3, [pc, #196]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6892      	ldr	r2, [r2, #8]
 8002c24:	0211      	lsls	r1, r2, #8
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68d2      	ldr	r2, [r2, #12]
 8002c2a:	0912      	lsrs	r2, r2, #4
 8002c2c:	0452      	lsls	r2, r2, #17
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	492a      	ldr	r1, [pc, #168]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	610b      	str	r3, [r1, #16]
 8002c36:	e027      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d112      	bne.n	8002c64 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c3e:	4b27      	ldr	r3, [pc, #156]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6892      	ldr	r2, [r2, #8]
 8002c4e:	0211      	lsls	r1, r2, #8
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6912      	ldr	r2, [r2, #16]
 8002c54:	0852      	lsrs	r2, r2, #1
 8002c56:	3a01      	subs	r2, #1
 8002c58:	0552      	lsls	r2, r2, #21
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	491f      	ldr	r1, [pc, #124]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	610b      	str	r3, [r1, #16]
 8002c62:	e011      	b.n	8002c88 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	6892      	ldr	r2, [r2, #8]
 8002c74:	0211      	lsls	r1, r2, #8
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6952      	ldr	r2, [r2, #20]
 8002c7a:	0852      	lsrs	r2, r2, #1
 8002c7c:	3a01      	subs	r2, #1
 8002c7e:	0652      	lsls	r2, r2, #25
 8002c80:	430a      	orrs	r2, r1
 8002c82:	4916      	ldr	r1, [pc, #88]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c88:	4b14      	ldr	r3, [pc, #80]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7fe fa48 	bl	8001128 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c9c:	f7fe fa44 	bl	8001128 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
          break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cb0:	4b0a      	ldr	r3, [pc, #40]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0ef      	beq.n	8002c9c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cc2:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	4904      	ldr	r1, [pc, #16]	; (8002cdc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cee:	4b6a      	ldr	r3, [pc, #424]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d018      	beq.n	8002d2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cfa:	4b67      	ldr	r3, [pc, #412]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f003 0203 	and.w	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d10d      	bne.n	8002d26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d12:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685b      	ldr	r3, [r3, #4]
       ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d047      	beq.n	8002db6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e044      	b.n	8002db6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	d018      	beq.n	8002d66 <RCCEx_PLLSAI2_Config+0x86>
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d825      	bhi.n	8002d84 <RCCEx_PLLSAI2_Config+0xa4>
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d002      	beq.n	8002d42 <RCCEx_PLLSAI2_Config+0x62>
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d009      	beq.n	8002d54 <RCCEx_PLLSAI2_Config+0x74>
 8002d40:	e020      	b.n	8002d84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d42:	4b55      	ldr	r3, [pc, #340]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11d      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d52:	e01a      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d54:	4b50      	ldr	r3, [pc, #320]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d116      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d64:	e013      	b.n	8002d8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d66:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10f      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d72:	4b49      	ldr	r3, [pc, #292]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d82:	e006      	b.n	8002d92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e004      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10d      	bne.n	8002db6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d9a:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6819      	ldr	r1, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	430b      	orrs	r3, r1
 8002db0:	4939      	ldr	r1, [pc, #228]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d167      	bne.n	8002e8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dbc:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a35      	ldr	r2, [pc, #212]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc8:	f7fe f9ae 	bl	8001128 <HAL_GetTick>
 8002dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dce:	e009      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dd0:	f7fe f9aa 	bl	8001128 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d902      	bls.n	8002de4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	73fb      	strb	r3, [r7, #15]
        break;
 8002de2:	e005      	b.n	8002df0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002de4:	4b2c      	ldr	r3, [pc, #176]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ef      	bne.n	8002dd0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d14a      	bne.n	8002e8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d111      	bne.n	8002e20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002dfc:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6892      	ldr	r2, [r2, #8]
 8002e0c:	0211      	lsls	r1, r2, #8
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68d2      	ldr	r2, [r2, #12]
 8002e12:	0912      	lsrs	r2, r2, #4
 8002e14:	0452      	lsls	r2, r2, #17
 8002e16:	430a      	orrs	r2, r1
 8002e18:	491f      	ldr	r1, [pc, #124]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	614b      	str	r3, [r1, #20]
 8002e1e:	e011      	b.n	8002e44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e20:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	0211      	lsls	r1, r2, #8
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6912      	ldr	r2, [r2, #16]
 8002e36:	0852      	lsrs	r2, r2, #1
 8002e38:	3a01      	subs	r2, #1
 8002e3a:	0652      	lsls	r2, r2, #25
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	4916      	ldr	r1, [pc, #88]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e50:	f7fe f96a 	bl	8001128 <HAL_GetTick>
 8002e54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e56:	e009      	b.n	8002e6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e58:	f7fe f966 	bl	8001128 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d902      	bls.n	8002e6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	73fb      	strb	r3, [r7, #15]
          break;
 8002e6a:	e005      	b.n	8002e78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e6c:	4b0a      	ldr	r3, [pc, #40]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0ef      	beq.n	8002e58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e7e:	4b06      	ldr	r3, [pc, #24]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	695a      	ldr	r2, [r3, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4904      	ldr	r1, [pc, #16]	; (8002e98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e040      	b.n	8002f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd ff4a 	bl	8000d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	; 0x24
 8002ec8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fec0 	bl	8003c68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 fc05 	bl	80036f8 <UART_SetConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01b      	b.n	8002f30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 ff3f 	bl	8003dac <UART_CheckIdleState>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	; 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d178      	bne.n	8003042 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Transmit+0x24>
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e071      	b.n	8003044 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2221      	movs	r2, #33	; 0x21
 8002f6c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f6e:	f7fe f8db 	bl	8001128 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_UART_Transmit+0x68>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e003      	b.n	8002fa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa8:	e030      	b.n	800300c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2180      	movs	r1, #128	; 0x80
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 ffa1 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e03c      	b.n	8003044 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	881a      	ldrh	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e008      	b.n	8002ffa <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b292      	uxth	r2, r2
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1c8      	bne.n	8002faa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2200      	movs	r2, #0
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 ff6a 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d004      	beq.n	8003038 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2220      	movs	r2, #32
 8003032:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e005      	b.n	8003044 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003060:	2b20      	cmp	r3, #32
 8003062:	d137      	bne.n	80030d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_UART_Receive_IT+0x24>
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e030      	b.n	80030d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a18      	ldr	r2, [pc, #96]	; (80030e0 <HAL_UART_Receive_IT+0x94>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d01f      	beq.n	80030c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	e853 3f00 	ldrex	r3, [r3]
 800309e:	613b      	str	r3, [r7, #16]
   return(result);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	461a      	mov	r2, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	623b      	str	r3, [r7, #32]
 80030b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b4:	69f9      	ldr	r1, [r7, #28]
 80030b6:	6a3a      	ldr	r2, [r7, #32]
 80030b8:	e841 2300 	strex	r3, r2, [r1]
 80030bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1e6      	bne.n	8003092 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80030c4:	88fb      	ldrh	r3, [r7, #6]
 80030c6:	461a      	mov	r2, r3
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 ff7e 	bl	8003fcc <UART_Start_Receive_IT>
 80030d0:	4603      	mov	r3, r0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3728      	adds	r7, #40	; 0x28
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40008000 	.word	0x40008000

080030e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0ba      	sub	sp, #232	; 0xe8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800310a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800310e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003112:	4013      	ands	r3, r2
 8003114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003118:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d115      	bne.n	800314c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00f      	beq.n	800314c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800312c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d009      	beq.n	800314c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 82ae 	beq.w	800369e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
      }
      return;
 800314a:	e2a8      	b.n	800369e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800314c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8117 	beq.w	8003384 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003166:	4b85      	ldr	r3, [pc, #532]	; (800337c <HAL_UART_IRQHandler+0x298>)
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 810a 	beq.w	8003384 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d011      	beq.n	80031a0 <HAL_UART_IRQHandler+0xbc>
 800317c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2201      	movs	r2, #1
 800318e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d011      	beq.n	80031d0 <HAL_UART_IRQHandler+0xec>
 80031ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2202      	movs	r2, #2
 80031be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d011      	beq.n	8003200 <HAL_UART_IRQHandler+0x11c>
 80031dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2204      	movs	r2, #4
 80031ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d017      	beq.n	800323c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003218:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800321c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00b      	beq.n	800323c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2208      	movs	r2, #8
 800322a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003232:	f043 0208 	orr.w	r2, r3, #8
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800323c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003244:	2b00      	cmp	r3, #0
 8003246:	d012      	beq.n	800326e <HAL_UART_IRQHandler+0x18a>
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800325c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	f043 0220 	orr.w	r2, r3, #32
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 8214 	beq.w	80036a2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80032ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d04f      	beq.n	8003366 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 ff46 	bl	8004158 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d141      	bne.n	800335e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	3308      	adds	r3, #8
 80032e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	3308      	adds	r3, #8
 8003302:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003306:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800330a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800330e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003316:	e841 2300 	strex	r3, r2, [r1]
 800331a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800331e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1d9      	bne.n	80032da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332a:	2b00      	cmp	r3, #0
 800332c:	d013      	beq.n	8003356 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4a13      	ldr	r2, [pc, #76]	; (8003380 <HAL_UART_IRQHandler+0x29c>)
 8003334:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe f873 	bl	8001426 <HAL_DMA_Abort_IT>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d017      	beq.n	8003376 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003350:	4610      	mov	r0, r2
 8003352:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003354:	e00f      	b.n	8003376 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f9b8 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800335c:	e00b      	b.n	8003376 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9b4 	bl	80036cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003364:	e007      	b.n	8003376 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f9b0 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003374:	e195      	b.n	80036a2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003376:	bf00      	nop
    return;
 8003378:	e193      	b.n	80036a2 <HAL_UART_IRQHandler+0x5be>
 800337a:	bf00      	nop
 800337c:	04000120 	.word	0x04000120
 8003380:	08004221 	.word	0x08004221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003388:	2b01      	cmp	r3, #1
 800338a:	f040 814e 	bne.w	800362a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8147 	beq.w	800362a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800339c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8140 	beq.w	800362a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2210      	movs	r2, #16
 80033b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033bc:	2b40      	cmp	r3, #64	; 0x40
 80033be:	f040 80b8 	bne.w	8003532 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8167 	beq.w	80036a6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033e2:	429a      	cmp	r2, r3
 80033e4:	f080 815f 	bcs.w	80036a6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 8086 	bne.w	8003510 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003418:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800341c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800342e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003432:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800343a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800343e:	e841 2300 	strex	r3, r2, [r1]
 8003442:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003446:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1da      	bne.n	8003404 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3308      	adds	r3, #8
 8003454:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800345e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3308      	adds	r3, #8
 800346e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003472:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003476:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800347a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800347e:	e841 2300 	strex	r3, r2, [r1]
 8003482:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1e1      	bne.n	800344e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3308      	adds	r3, #8
 8003490:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003494:	e853 3f00 	ldrex	r3, [r3]
 8003498:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3308      	adds	r3, #8
 80034aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80034b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80034b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80034bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1e3      	bne.n	800348a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e0:	f023 0310 	bic.w	r3, r3, #16
 80034e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	461a      	mov	r2, r3
 80034ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80034f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e4      	bne.n	80034d0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd ff4d 	bl	80013aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003522:	b29b      	uxth	r3, r3
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8d8 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003530:	e0b9      	b.n	80036a6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800353e:	b29b      	uxth	r3, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80ab 	beq.w	80036aa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8003554:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 80a6 	beq.w	80036aa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800356c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003572:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003580:	647b      	str	r3, [r7, #68]	; 0x44
 8003582:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003584:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003588:	e841 2300 	strex	r3, r2, [r1]
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800358e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1e4      	bne.n	800355e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3308      	adds	r3, #8
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	623b      	str	r3, [r7, #32]
   return(result);
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80035b8:	633a      	str	r2, [r7, #48]	; 0x30
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e3      	bne.n	8003594 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f023 0310 	bic.w	r3, r3, #16
 80035f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	69b9      	ldr	r1, [r7, #24]
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	617b      	str	r3, [r7, #20]
   return(result);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e4      	bne.n	80035e0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f85c 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003628:	e03f      	b.n	80036aa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00e      	beq.n	8003654 <HAL_UART_IRQHandler+0x570>
 8003636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800363a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800364a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 ffe3 	bl	8004618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003652:	e02d      	b.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01c      	beq.n	80036ae <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
    }
    return;
 800367c:	e017      	b.n	80036ae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800367e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
 800368a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00c      	beq.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fdd8 	bl	800424c <UART_EndTransmit_IT>
    return;
 800369c:	e008      	b.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 800369e:	bf00      	nop
 80036a0:	e006      	b.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80036a2:	bf00      	nop
 80036a4:	e004      	b.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
      return;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_UART_IRQHandler+0x5cc>
    return;
 80036ae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036b0:	37e8      	adds	r7, #232	; 0xe8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop

080036b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036fc:	b08a      	sub	sp, #40	; 0x28
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	431a      	orrs	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	4313      	orrs	r3, r2
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4ba4      	ldr	r3, [pc, #656]	; (80039b8 <UART_SetConfig+0x2c0>)
 8003728:	4013      	ands	r3, r2
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003730:	430b      	orrs	r3, r1
 8003732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a99      	ldr	r2, [pc, #612]	; (80039bc <UART_SetConfig+0x2c4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d004      	beq.n	8003764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4313      	orrs	r3, r2
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003774:	430a      	orrs	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a90      	ldr	r2, [pc, #576]	; (80039c0 <UART_SetConfig+0x2c8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d126      	bne.n	80037d0 <UART_SetConfig+0xd8>
 8003782:	4b90      	ldr	r3, [pc, #576]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003788:	f003 0303 	and.w	r3, r3, #3
 800378c:	2b03      	cmp	r3, #3
 800378e:	d81b      	bhi.n	80037c8 <UART_SetConfig+0xd0>
 8003790:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <UART_SetConfig+0xa0>)
 8003792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003796:	bf00      	nop
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037b1 	.word	0x080037b1
 80037a4:	080037c1 	.word	0x080037c1
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ae:	e116      	b.n	80039de <UART_SetConfig+0x2e6>
 80037b0:	2302      	movs	r3, #2
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b6:	e112      	b.n	80039de <UART_SetConfig+0x2e6>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037be:	e10e      	b.n	80039de <UART_SetConfig+0x2e6>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c6:	e10a      	b.n	80039de <UART_SetConfig+0x2e6>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ce:	e106      	b.n	80039de <UART_SetConfig+0x2e6>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a7c      	ldr	r2, [pc, #496]	; (80039c8 <UART_SetConfig+0x2d0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d138      	bne.n	800384c <UART_SetConfig+0x154>
 80037da:	4b7a      	ldr	r3, [pc, #488]	; (80039c4 <UART_SetConfig+0x2cc>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f003 030c 	and.w	r3, r3, #12
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d82d      	bhi.n	8003844 <UART_SetConfig+0x14c>
 80037e8:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <UART_SetConfig+0xf8>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003845 	.word	0x08003845
 80037fc:	08003845 	.word	0x08003845
 8003800:	08003835 	.word	0x08003835
 8003804:	08003845 	.word	0x08003845
 8003808:	08003845 	.word	0x08003845
 800380c:	08003845 	.word	0x08003845
 8003810:	0800382d 	.word	0x0800382d
 8003814:	08003845 	.word	0x08003845
 8003818:	08003845 	.word	0x08003845
 800381c:	08003845 	.word	0x08003845
 8003820:	0800383d 	.word	0x0800383d
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800382a:	e0d8      	b.n	80039de <UART_SetConfig+0x2e6>
 800382c:	2302      	movs	r3, #2
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003832:	e0d4      	b.n	80039de <UART_SetConfig+0x2e6>
 8003834:	2304      	movs	r3, #4
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383a:	e0d0      	b.n	80039de <UART_SetConfig+0x2e6>
 800383c:	2308      	movs	r3, #8
 800383e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003842:	e0cc      	b.n	80039de <UART_SetConfig+0x2e6>
 8003844:	2310      	movs	r3, #16
 8003846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384a:	e0c8      	b.n	80039de <UART_SetConfig+0x2e6>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a5e      	ldr	r2, [pc, #376]	; (80039cc <UART_SetConfig+0x2d4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d125      	bne.n	80038a2 <UART_SetConfig+0x1aa>
 8003856:	4b5b      	ldr	r3, [pc, #364]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003860:	2b30      	cmp	r3, #48	; 0x30
 8003862:	d016      	beq.n	8003892 <UART_SetConfig+0x19a>
 8003864:	2b30      	cmp	r3, #48	; 0x30
 8003866:	d818      	bhi.n	800389a <UART_SetConfig+0x1a2>
 8003868:	2b20      	cmp	r3, #32
 800386a:	d00a      	beq.n	8003882 <UART_SetConfig+0x18a>
 800386c:	2b20      	cmp	r3, #32
 800386e:	d814      	bhi.n	800389a <UART_SetConfig+0x1a2>
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <UART_SetConfig+0x182>
 8003874:	2b10      	cmp	r3, #16
 8003876:	d008      	beq.n	800388a <UART_SetConfig+0x192>
 8003878:	e00f      	b.n	800389a <UART_SetConfig+0x1a2>
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003880:	e0ad      	b.n	80039de <UART_SetConfig+0x2e6>
 8003882:	2302      	movs	r3, #2
 8003884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003888:	e0a9      	b.n	80039de <UART_SetConfig+0x2e6>
 800388a:	2304      	movs	r3, #4
 800388c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003890:	e0a5      	b.n	80039de <UART_SetConfig+0x2e6>
 8003892:	2308      	movs	r3, #8
 8003894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003898:	e0a1      	b.n	80039de <UART_SetConfig+0x2e6>
 800389a:	2310      	movs	r3, #16
 800389c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a0:	e09d      	b.n	80039de <UART_SetConfig+0x2e6>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a4a      	ldr	r2, [pc, #296]	; (80039d0 <UART_SetConfig+0x2d8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d125      	bne.n	80038f8 <UART_SetConfig+0x200>
 80038ac:	4b45      	ldr	r3, [pc, #276]	; (80039c4 <UART_SetConfig+0x2cc>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038b6:	2bc0      	cmp	r3, #192	; 0xc0
 80038b8:	d016      	beq.n	80038e8 <UART_SetConfig+0x1f0>
 80038ba:	2bc0      	cmp	r3, #192	; 0xc0
 80038bc:	d818      	bhi.n	80038f0 <UART_SetConfig+0x1f8>
 80038be:	2b80      	cmp	r3, #128	; 0x80
 80038c0:	d00a      	beq.n	80038d8 <UART_SetConfig+0x1e0>
 80038c2:	2b80      	cmp	r3, #128	; 0x80
 80038c4:	d814      	bhi.n	80038f0 <UART_SetConfig+0x1f8>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <UART_SetConfig+0x1d8>
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d008      	beq.n	80038e0 <UART_SetConfig+0x1e8>
 80038ce:	e00f      	b.n	80038f0 <UART_SetConfig+0x1f8>
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038d6:	e082      	b.n	80039de <UART_SetConfig+0x2e6>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038de:	e07e      	b.n	80039de <UART_SetConfig+0x2e6>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038e6:	e07a      	b.n	80039de <UART_SetConfig+0x2e6>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ee:	e076      	b.n	80039de <UART_SetConfig+0x2e6>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038f6:	e072      	b.n	80039de <UART_SetConfig+0x2e6>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a35      	ldr	r2, [pc, #212]	; (80039d4 <UART_SetConfig+0x2dc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d12a      	bne.n	8003958 <UART_SetConfig+0x260>
 8003902:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800390c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003910:	d01a      	beq.n	8003948 <UART_SetConfig+0x250>
 8003912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003916:	d81b      	bhi.n	8003950 <UART_SetConfig+0x258>
 8003918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800391c:	d00c      	beq.n	8003938 <UART_SetConfig+0x240>
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d815      	bhi.n	8003950 <UART_SetConfig+0x258>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <UART_SetConfig+0x238>
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d008      	beq.n	8003940 <UART_SetConfig+0x248>
 800392e:	e00f      	b.n	8003950 <UART_SetConfig+0x258>
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e052      	b.n	80039de <UART_SetConfig+0x2e6>
 8003938:	2302      	movs	r3, #2
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e04e      	b.n	80039de <UART_SetConfig+0x2e6>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e04a      	b.n	80039de <UART_SetConfig+0x2e6>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800394e:	e046      	b.n	80039de <UART_SetConfig+0x2e6>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003956:	e042      	b.n	80039de <UART_SetConfig+0x2e6>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a17      	ldr	r2, [pc, #92]	; (80039bc <UART_SetConfig+0x2c4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d13a      	bne.n	80039d8 <UART_SetConfig+0x2e0>
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <UART_SetConfig+0x2cc>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800396c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003970:	d01a      	beq.n	80039a8 <UART_SetConfig+0x2b0>
 8003972:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003976:	d81b      	bhi.n	80039b0 <UART_SetConfig+0x2b8>
 8003978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800397c:	d00c      	beq.n	8003998 <UART_SetConfig+0x2a0>
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d815      	bhi.n	80039b0 <UART_SetConfig+0x2b8>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <UART_SetConfig+0x298>
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398c:	d008      	beq.n	80039a0 <UART_SetConfig+0x2a8>
 800398e:	e00f      	b.n	80039b0 <UART_SetConfig+0x2b8>
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003996:	e022      	b.n	80039de <UART_SetConfig+0x2e6>
 8003998:	2302      	movs	r3, #2
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399e:	e01e      	b.n	80039de <UART_SetConfig+0x2e6>
 80039a0:	2304      	movs	r3, #4
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e01a      	b.n	80039de <UART_SetConfig+0x2e6>
 80039a8:	2308      	movs	r3, #8
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e016      	b.n	80039de <UART_SetConfig+0x2e6>
 80039b0:	2310      	movs	r3, #16
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e012      	b.n	80039de <UART_SetConfig+0x2e6>
 80039b8:	efff69f3 	.word	0xefff69f3
 80039bc:	40008000 	.word	0x40008000
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40004400 	.word	0x40004400
 80039cc:	40004800 	.word	0x40004800
 80039d0:	40004c00 	.word	0x40004c00
 80039d4:	40005000 	.word	0x40005000
 80039d8:	2310      	movs	r3, #16
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a9f      	ldr	r2, [pc, #636]	; (8003c60 <UART_SetConfig+0x568>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d17a      	bne.n	8003ade <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d824      	bhi.n	8003a3a <UART_SetConfig+0x342>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x300>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a3b 	.word	0x08003a3b
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a3b 	.word	0x08003a3b
 8003a08:	08003a2b 	.word	0x08003a2b
 8003a0c:	08003a3b 	.word	0x08003a3b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a3b 	.word	0x08003a3b
 8003a18:	08003a33 	.word	0x08003a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fcf6 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003a20:	61f8      	str	r0, [r7, #28]
        break;
 8003a22:	e010      	b.n	8003a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a24:	4b8f      	ldr	r3, [pc, #572]	; (8003c64 <UART_SetConfig+0x56c>)
 8003a26:	61fb      	str	r3, [r7, #28]
        break;
 8003a28:	e00d      	b.n	8003a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2a:	f7fe fc57 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003a2e:	61f8      	str	r0, [r7, #28]
        break;
 8003a30:	e009      	b.n	8003a46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	61fb      	str	r3, [r7, #28]
        break;
 8003a38:	e005      	b.n	8003a46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80fb 	beq.w	8003c44 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	69fa      	ldr	r2, [r7, #28]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d305      	bcc.n	8003a6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d903      	bls.n	8003a72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a70:	e0e8      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	2200      	movs	r2, #0
 8003a76:	461c      	mov	r4, r3
 8003a78:	4615      	mov	r5, r2
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	022b      	lsls	r3, r5, #8
 8003a84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a88:	0222      	lsls	r2, r4, #8
 8003a8a:	68f9      	ldr	r1, [r7, #12]
 8003a8c:	6849      	ldr	r1, [r1, #4]
 8003a8e:	0849      	lsrs	r1, r1, #1
 8003a90:	2000      	movs	r0, #0
 8003a92:	4688      	mov	r8, r1
 8003a94:	4681      	mov	r9, r0
 8003a96:	eb12 0a08 	adds.w	sl, r2, r8
 8003a9a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	607a      	str	r2, [r7, #4]
 8003aa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aac:	4650      	mov	r0, sl
 8003aae:	4659      	mov	r1, fp
 8003ab0:	f7fc fbde 	bl	8000270 <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4613      	mov	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac2:	d308      	bcc.n	8003ad6 <UART_SetConfig+0x3de>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d204      	bcs.n	8003ad6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	e0b6      	b.n	8003c44 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003adc:	e0b2      	b.n	8003c44 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae6:	d15e      	bne.n	8003ba6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d828      	bhi.n	8003b42 <UART_SetConfig+0x44a>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x400>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b2d 	.word	0x08003b2d
 8003b04:	08003b43 	.word	0x08003b43
 8003b08:	08003b33 	.word	0x08003b33
 8003b0c:	08003b43 	.word	0x08003b43
 8003b10:	08003b43 	.word	0x08003b43
 8003b14:	08003b43 	.word	0x08003b43
 8003b18:	08003b3b 	.word	0x08003b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fc76 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003b20:	61f8      	str	r0, [r7, #28]
        break;
 8003b22:	e014      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b24:	f7fe fc88 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003b28:	61f8      	str	r0, [r7, #28]
        break;
 8003b2a:	e010      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b2c:	4b4d      	ldr	r3, [pc, #308]	; (8003c64 <UART_SetConfig+0x56c>)
 8003b2e:	61fb      	str	r3, [r7, #28]
        break;
 8003b30:	e00d      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b32:	f7fe fbd3 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003b36:	61f8      	str	r0, [r7, #28]
        break;
 8003b38:	e009      	b.n	8003b4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3e:	61fb      	str	r3, [r7, #28]
        break;
 8003b40:	e005      	b.n	8003b4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d077      	beq.n	8003c44 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005a      	lsls	r2, r3, #1
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	085b      	lsrs	r3, r3, #1
 8003b5e:	441a      	add	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b0f      	cmp	r3, #15
 8003b6e:	d916      	bls.n	8003b9e <UART_SetConfig+0x4a6>
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b76:	d212      	bcs.n	8003b9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f023 030f 	bic.w	r3, r3, #15
 8003b80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	8afb      	ldrh	r3, [r7, #22]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	8afa      	ldrh	r2, [r7, #22]
 8003b9a:	60da      	str	r2, [r3, #12]
 8003b9c:	e052      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ba4:	e04e      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d827      	bhi.n	8003bfe <UART_SetConfig+0x506>
 8003bae:	a201      	add	r2, pc, #4	; (adr r2, 8003bb4 <UART_SetConfig+0x4bc>)
 8003bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb4:	08003bd9 	.word	0x08003bd9
 8003bb8:	08003be1 	.word	0x08003be1
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bff 	.word	0x08003bff
 8003bc4:	08003bef 	.word	0x08003bef
 8003bc8:	08003bff 	.word	0x08003bff
 8003bcc:	08003bff 	.word	0x08003bff
 8003bd0:	08003bff 	.word	0x08003bff
 8003bd4:	08003bf7 	.word	0x08003bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd8:	f7fe fc18 	bl	800240c <HAL_RCC_GetPCLK1Freq>
 8003bdc:	61f8      	str	r0, [r7, #28]
        break;
 8003bde:	e014      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003be0:	f7fe fc2a 	bl	8002438 <HAL_RCC_GetPCLK2Freq>
 8003be4:	61f8      	str	r0, [r7, #28]
        break;
 8003be6:	e010      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be8:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <UART_SetConfig+0x56c>)
 8003bea:	61fb      	str	r3, [r7, #28]
        break;
 8003bec:	e00d      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bee:	f7fe fb75 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 8003bf2:	61f8      	str	r0, [r7, #28]
        break;
 8003bf4:	e009      	b.n	8003c0a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfa:	61fb      	str	r3, [r7, #28]
        break;
 8003bfc:	e005      	b.n	8003c0a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c08:	bf00      	nop
    }

    if (pclk != 0U)
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d019      	beq.n	8003c44 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	085a      	lsrs	r2, r3, #1
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	441a      	add	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	2b0f      	cmp	r3, #15
 8003c28:	d909      	bls.n	8003c3e <UART_SetConfig+0x546>
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c30:	d205      	bcs.n	8003c3e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	e002      	b.n	8003c44 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3728      	adds	r7, #40	; 0x28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c5e:	bf00      	nop
 8003c60:	40008000 	.word	0x40008000
 8003c64:	00f42400 	.word	0x00f42400

08003c68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00a      	beq.n	8003cd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	f003 0310 	and.w	r3, r3, #16
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01a      	beq.n	8003d7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d66:	d10a      	bne.n	8003d7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b098      	sub	sp, #96	; 0x60
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dbc:	f7fd f9b4 	bl	8001128 <HAL_GetTick>
 8003dc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d12e      	bne.n	8003e2e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f88c 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d021      	beq.n	8003e2e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df2:	e853 3f00 	ldrex	r3, [r3]
 8003df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
 8003e0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e10:	e841 2300 	strex	r3, r2, [r1]
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1e6      	bne.n	8003dea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e062      	b.n	8003ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d149      	bne.n	8003ed0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e44:	2200      	movs	r2, #0
 8003e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f856 	bl	8003efc <UART_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03c      	beq.n	8003ed0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	623b      	str	r3, [r7, #32]
   return(result);
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e74:	633b      	str	r3, [r7, #48]	; 0x30
 8003e76:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3308      	adds	r3, #8
 8003ea6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e011      	b.n	8003ef4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3758      	adds	r7, #88	; 0x58
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0c:	e049      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d045      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fd f907 	bl	8001128 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e048      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d031      	beq.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	f003 0308 	and.w	r3, r3, #8
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d110      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2208      	movs	r2, #8
 8003f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f8ff 	bl	8004158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2208      	movs	r2, #8
 8003f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e029      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7c:	d111      	bne.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f8e5 	bl	8004158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2220      	movs	r2, #32
 8003f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e00f      	b.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4013      	ands	r3, r2
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	461a      	mov	r2, r3
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d0a6      	beq.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b097      	sub	sp, #92	; 0x5c
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffe:	d10e      	bne.n	800401e <UART_Start_Receive_IT+0x52>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <UART_Start_Receive_IT+0x48>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800400e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004012:	e02d      	b.n	8004070 <UART_Start_Receive_IT+0xa4>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800401c:	e028      	b.n	8004070 <UART_Start_Receive_IT+0xa4>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <UART_Start_Receive_IT+0x76>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d104      	bne.n	8004038 <UART_Start_Receive_IT+0x6c>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	22ff      	movs	r2, #255	; 0xff
 8004032:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004036:	e01b      	b.n	8004070 <UART_Start_Receive_IT+0xa4>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	227f      	movs	r2, #127	; 0x7f
 800403c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004040:	e016      	b.n	8004070 <UART_Start_Receive_IT+0xa4>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800404a:	d10d      	bne.n	8004068 <UART_Start_Receive_IT+0x9c>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d104      	bne.n	800405e <UART_Start_Receive_IT+0x92>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	227f      	movs	r2, #127	; 0x7f
 8004058:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800405c:	e008      	b.n	8004070 <UART_Start_Receive_IT+0xa4>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	223f      	movs	r2, #63	; 0x3f
 8004062:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004066:	e003      	b.n	8004070 <UART_Start_Receive_IT+0xa4>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2222      	movs	r2, #34	; 0x22
 800407c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	3308      	adds	r3, #8
 8004086:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	657b      	str	r3, [r7, #84]	; 0x54
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80040a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e5      	bne.n	8004080 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040bc:	d107      	bne.n	80040ce <UART_Start_Receive_IT+0x102>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a21      	ldr	r2, [pc, #132]	; (8004150 <UART_Start_Receive_IT+0x184>)
 80040ca:	669a      	str	r2, [r3, #104]	; 0x68
 80040cc:	e002      	b.n	80040d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a20      	ldr	r2, [pc, #128]	; (8004154 <UART_Start_Receive_IT+0x188>)
 80040d2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d019      	beq.n	8004110 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80040f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
 80040fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e6      	bne.n	80040dc <UART_Start_Receive_IT+0x110>
 800410e:	e018      	b.n	8004142 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f043 0320 	orr.w	r3, r3, #32
 8004124:	653b      	str	r3, [r7, #80]	; 0x50
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	61bb      	str	r3, [r7, #24]
   return(result);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e6      	bne.n	8004110 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	375c      	adds	r7, #92	; 0x5c
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	0800445d 	.word	0x0800445d
 8004154:	080042a1 	.word	0x080042a1

08004158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004158:	b480      	push	{r7}
 800415a:	b095      	sub	sp, #84	; 0x54
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417e:	643b      	str	r3, [r7, #64]	; 0x40
 8004180:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004184:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800418c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e6      	bne.n	8004160 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3308      	adds	r3, #8
 8004198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3308      	adds	r3, #8
 80041b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e5      	bne.n	8004192 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d118      	bne.n	8004200 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	60bb      	str	r3, [r7, #8]
   return(result);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	613b      	str	r3, [r7, #16]
   return(result);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2220      	movs	r2, #32
 8004204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004214:	bf00      	nop
 8004216:	3754      	adds	r7, #84	; 0x54
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fa44 	bl	80036cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b088      	sub	sp, #32
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	e853 3f00 	ldrex	r3, [r3]
 8004260:	60bb      	str	r3, [r7, #8]
   return(result);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004268:	61fb      	str	r3, [r7, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	613b      	str	r3, [r7, #16]
   return(result);
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e6      	bne.n	8004254 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff fa10 	bl	80036b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004298:	bf00      	nop
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b09c      	sub	sp, #112	; 0x70
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042ae:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b8:	2b22      	cmp	r3, #34	; 0x22
 80042ba:	f040 80be 	bne.w	800443a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80042cc:	b2d9      	uxtb	r1, r3
 80042ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	400a      	ands	r2, r1
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	f040 80a3 	bne.w	800444e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800430e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004310:	e853 3f00 	ldrex	r3, [r3]
 8004314:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800431c:	66bb      	str	r3, [r7, #104]	; 0x68
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004326:	65bb      	str	r3, [r7, #88]	; 0x58
 8004328:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800432c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800432e:	e841 2300 	strex	r3, r2, [r1]
 8004332:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1e6      	bne.n	8004308 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3308      	adds	r3, #8
 8004340:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004344:	e853 3f00 	ldrex	r3, [r3]
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800434a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434c:	f023 0301 	bic.w	r3, r3, #1
 8004350:	667b      	str	r3, [r7, #100]	; 0x64
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800435a:	647a      	str	r2, [r7, #68]	; 0x44
 800435c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e5      	bne.n	800433a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a34      	ldr	r2, [pc, #208]	; (8004458 <UART_RxISR_8BIT+0x1b8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01f      	beq.n	80043cc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d018      	beq.n	80043cc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	623b      	str	r3, [r7, #32]
   return(result);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043ae:	663b      	str	r3, [r7, #96]	; 0x60
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b8:	633b      	str	r3, [r7, #48]	; 0x30
 80043ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e6      	bne.n	800439a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d12e      	bne.n	8004432 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	461a      	mov	r2, r3
 80043f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	69b9      	ldr	r1, [r7, #24]
 80043fe:	69fa      	ldr	r2, [r7, #28]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	617b      	str	r3, [r7, #20]
   return(result);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e6      	bne.n	80043da <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f003 0310 	and.w	r3, r3, #16
 8004416:	2b10      	cmp	r3, #16
 8004418:	d103      	bne.n	8004422 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff f958 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004430:	e00d      	b.n	800444e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f7fc f8b0 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 8004438:	e009      	b.n	800444e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	8b1b      	ldrh	r3, [r3, #24]
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0208 	orr.w	r2, r2, #8
 800444a:	b292      	uxth	r2, r2
 800444c:	831a      	strh	r2, [r3, #24]
}
 800444e:	bf00      	nop
 8004450:	3770      	adds	r7, #112	; 0x70
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40008000 	.word	0x40008000

0800445c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b09c      	sub	sp, #112	; 0x70
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800446a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004474:	2b22      	cmp	r3, #34	; 0x22
 8004476:	f040 80be 	bne.w	80045f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004480:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800448a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800448e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004492:	4013      	ands	r3, r2
 8004494:	b29a      	uxth	r2, r3
 8004496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004498:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	1c9a      	adds	r2, r3, #2
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	3b01      	subs	r3, #1
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 80a3 	bne.w	800460a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80044d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d8:	667b      	str	r3, [r7, #100]	; 0x64
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044e2:	657b      	str	r3, [r7, #84]	; 0x54
 80044e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80044e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e6      	bne.n	80044c4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004500:	e853 3f00 	ldrex	r3, [r3]
 8004504:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	663b      	str	r3, [r7, #96]	; 0x60
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004516:	643a      	str	r2, [r7, #64]	; 0x40
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800451c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451e:	e841 2300 	strex	r3, r2, [r1]
 8004522:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1e5      	bne.n	80044f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2220      	movs	r2, #32
 800452e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a34      	ldr	r2, [pc, #208]	; (8004614 <UART_RxISR_16BIT+0x1b8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01f      	beq.n	8004588 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d018      	beq.n	8004588 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6a3b      	ldr	r3, [r7, #32]
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	61fb      	str	r3, [r7, #28]
   return(result);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800456a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004576:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800457a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e6      	bne.n	8004556 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	2b01      	cmp	r3, #1
 800458e:	d12e      	bne.n	80045ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0310 	bic.w	r3, r3, #16
 80045aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6979      	ldr	r1, [r7, #20]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	613b      	str	r3, [r7, #16]
   return(result);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e6      	bne.n	8004596 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d103      	bne.n	80045de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7ff f87a 	bl	80036e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ec:	e00d      	b.n	800460a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fb ffd2 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80045f4:	e009      	b.n	800460a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	8b1b      	ldrh	r3, [r3, #24]
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	b292      	uxth	r2, r2
 8004608:	831a      	strh	r2, [r3, #24]
}
 800460a:	bf00      	nop
 800460c:	3770      	adds	r7, #112	; 0x70
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40008000 	.word	0x40008000

08004618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <std>:
 800462c:	2300      	movs	r3, #0
 800462e:	b510      	push	{r4, lr}
 8004630:	4604      	mov	r4, r0
 8004632:	e9c0 3300 	strd	r3, r3, [r0]
 8004636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800463a:	6083      	str	r3, [r0, #8]
 800463c:	8181      	strh	r1, [r0, #12]
 800463e:	6643      	str	r3, [r0, #100]	; 0x64
 8004640:	81c2      	strh	r2, [r0, #14]
 8004642:	6183      	str	r3, [r0, #24]
 8004644:	4619      	mov	r1, r3
 8004646:	2208      	movs	r2, #8
 8004648:	305c      	adds	r0, #92	; 0x5c
 800464a:	f000 f9e5 	bl	8004a18 <memset>
 800464e:	4b05      	ldr	r3, [pc, #20]	; (8004664 <std+0x38>)
 8004650:	6263      	str	r3, [r4, #36]	; 0x24
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <std+0x3c>)
 8004654:	62a3      	str	r3, [r4, #40]	; 0x28
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <std+0x40>)
 8004658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <std+0x44>)
 800465c:	6224      	str	r4, [r4, #32]
 800465e:	6323      	str	r3, [r4, #48]	; 0x30
 8004660:	bd10      	pop	{r4, pc}
 8004662:	bf00      	nop
 8004664:	08004869 	.word	0x08004869
 8004668:	0800488b 	.word	0x0800488b
 800466c:	080048c3 	.word	0x080048c3
 8004670:	080048e7 	.word	0x080048e7

08004674 <stdio_exit_handler>:
 8004674:	4a02      	ldr	r2, [pc, #8]	; (8004680 <stdio_exit_handler+0xc>)
 8004676:	4903      	ldr	r1, [pc, #12]	; (8004684 <stdio_exit_handler+0x10>)
 8004678:	4803      	ldr	r0, [pc, #12]	; (8004688 <stdio_exit_handler+0x14>)
 800467a:	f000 b869 	b.w	8004750 <_fwalk_sglue>
 800467e:	bf00      	nop
 8004680:	20000010 	.word	0x20000010
 8004684:	080053b1 	.word	0x080053b1
 8004688:	2000001c 	.word	0x2000001c

0800468c <cleanup_stdio>:
 800468c:	6841      	ldr	r1, [r0, #4]
 800468e:	4b0c      	ldr	r3, [pc, #48]	; (80046c0 <cleanup_stdio+0x34>)
 8004690:	4299      	cmp	r1, r3
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	d001      	beq.n	800469c <cleanup_stdio+0x10>
 8004698:	f000 fe8a 	bl	80053b0 <_fflush_r>
 800469c:	68a1      	ldr	r1, [r4, #8]
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <cleanup_stdio+0x38>)
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d002      	beq.n	80046aa <cleanup_stdio+0x1e>
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 fe83 	bl	80053b0 <_fflush_r>
 80046aa:	68e1      	ldr	r1, [r4, #12]
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <cleanup_stdio+0x3c>)
 80046ae:	4299      	cmp	r1, r3
 80046b0:	d004      	beq.n	80046bc <cleanup_stdio+0x30>
 80046b2:	4620      	mov	r0, r4
 80046b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046b8:	f000 be7a 	b.w	80053b0 <_fflush_r>
 80046bc:	bd10      	pop	{r4, pc}
 80046be:	bf00      	nop
 80046c0:	2000013c 	.word	0x2000013c
 80046c4:	200001a4 	.word	0x200001a4
 80046c8:	2000020c 	.word	0x2000020c

080046cc <global_stdio_init.part.0>:
 80046cc:	b510      	push	{r4, lr}
 80046ce:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <global_stdio_init.part.0+0x30>)
 80046d0:	4c0b      	ldr	r4, [pc, #44]	; (8004700 <global_stdio_init.part.0+0x34>)
 80046d2:	4a0c      	ldr	r2, [pc, #48]	; (8004704 <global_stdio_init.part.0+0x38>)
 80046d4:	601a      	str	r2, [r3, #0]
 80046d6:	4620      	mov	r0, r4
 80046d8:	2200      	movs	r2, #0
 80046da:	2104      	movs	r1, #4
 80046dc:	f7ff ffa6 	bl	800462c <std>
 80046e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80046e4:	2201      	movs	r2, #1
 80046e6:	2109      	movs	r1, #9
 80046e8:	f7ff ffa0 	bl	800462c <std>
 80046ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80046f0:	2202      	movs	r2, #2
 80046f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f6:	2112      	movs	r1, #18
 80046f8:	f7ff bf98 	b.w	800462c <std>
 80046fc:	20000274 	.word	0x20000274
 8004700:	2000013c 	.word	0x2000013c
 8004704:	08004675 	.word	0x08004675

08004708 <__sfp_lock_acquire>:
 8004708:	4801      	ldr	r0, [pc, #4]	; (8004710 <__sfp_lock_acquire+0x8>)
 800470a:	f000 b9fd 	b.w	8004b08 <__retarget_lock_acquire_recursive>
 800470e:	bf00      	nop
 8004710:	2000027d 	.word	0x2000027d

08004714 <__sfp_lock_release>:
 8004714:	4801      	ldr	r0, [pc, #4]	; (800471c <__sfp_lock_release+0x8>)
 8004716:	f000 b9f8 	b.w	8004b0a <__retarget_lock_release_recursive>
 800471a:	bf00      	nop
 800471c:	2000027d 	.word	0x2000027d

08004720 <__sinit>:
 8004720:	b510      	push	{r4, lr}
 8004722:	4604      	mov	r4, r0
 8004724:	f7ff fff0 	bl	8004708 <__sfp_lock_acquire>
 8004728:	6a23      	ldr	r3, [r4, #32]
 800472a:	b11b      	cbz	r3, 8004734 <__sinit+0x14>
 800472c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004730:	f7ff bff0 	b.w	8004714 <__sfp_lock_release>
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <__sinit+0x28>)
 8004736:	6223      	str	r3, [r4, #32]
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <__sinit+0x2c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f5      	bne.n	800472c <__sinit+0xc>
 8004740:	f7ff ffc4 	bl	80046cc <global_stdio_init.part.0>
 8004744:	e7f2      	b.n	800472c <__sinit+0xc>
 8004746:	bf00      	nop
 8004748:	0800468d 	.word	0x0800468d
 800474c:	20000274 	.word	0x20000274

08004750 <_fwalk_sglue>:
 8004750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004754:	4607      	mov	r7, r0
 8004756:	4688      	mov	r8, r1
 8004758:	4614      	mov	r4, r2
 800475a:	2600      	movs	r6, #0
 800475c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004760:	f1b9 0901 	subs.w	r9, r9, #1
 8004764:	d505      	bpl.n	8004772 <_fwalk_sglue+0x22>
 8004766:	6824      	ldr	r4, [r4, #0]
 8004768:	2c00      	cmp	r4, #0
 800476a:	d1f7      	bne.n	800475c <_fwalk_sglue+0xc>
 800476c:	4630      	mov	r0, r6
 800476e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d907      	bls.n	8004788 <_fwalk_sglue+0x38>
 8004778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800477c:	3301      	adds	r3, #1
 800477e:	d003      	beq.n	8004788 <_fwalk_sglue+0x38>
 8004780:	4629      	mov	r1, r5
 8004782:	4638      	mov	r0, r7
 8004784:	47c0      	blx	r8
 8004786:	4306      	orrs	r6, r0
 8004788:	3568      	adds	r5, #104	; 0x68
 800478a:	e7e9      	b.n	8004760 <_fwalk_sglue+0x10>

0800478c <iprintf>:
 800478c:	b40f      	push	{r0, r1, r2, r3}
 800478e:	b507      	push	{r0, r1, r2, lr}
 8004790:	4906      	ldr	r1, [pc, #24]	; (80047ac <iprintf+0x20>)
 8004792:	ab04      	add	r3, sp, #16
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	f853 2b04 	ldr.w	r2, [r3], #4
 800479a:	6881      	ldr	r1, [r0, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	f000 fad7 	bl	8004d50 <_vfiprintf_r>
 80047a2:	b003      	add	sp, #12
 80047a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80047a8:	b004      	add	sp, #16
 80047aa:	4770      	bx	lr
 80047ac:	20000068 	.word	0x20000068

080047b0 <_puts_r>:
 80047b0:	6a03      	ldr	r3, [r0, #32]
 80047b2:	b570      	push	{r4, r5, r6, lr}
 80047b4:	6884      	ldr	r4, [r0, #8]
 80047b6:	4605      	mov	r5, r0
 80047b8:	460e      	mov	r6, r1
 80047ba:	b90b      	cbnz	r3, 80047c0 <_puts_r+0x10>
 80047bc:	f7ff ffb0 	bl	8004720 <__sinit>
 80047c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047c2:	07db      	lsls	r3, r3, #31
 80047c4:	d405      	bmi.n	80047d2 <_puts_r+0x22>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	0598      	lsls	r0, r3, #22
 80047ca:	d402      	bmi.n	80047d2 <_puts_r+0x22>
 80047cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ce:	f000 f99b 	bl	8004b08 <__retarget_lock_acquire_recursive>
 80047d2:	89a3      	ldrh	r3, [r4, #12]
 80047d4:	0719      	lsls	r1, r3, #28
 80047d6:	d513      	bpl.n	8004800 <_puts_r+0x50>
 80047d8:	6923      	ldr	r3, [r4, #16]
 80047da:	b18b      	cbz	r3, 8004800 <_puts_r+0x50>
 80047dc:	3e01      	subs	r6, #1
 80047de:	68a3      	ldr	r3, [r4, #8]
 80047e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80047e4:	3b01      	subs	r3, #1
 80047e6:	60a3      	str	r3, [r4, #8]
 80047e8:	b9e9      	cbnz	r1, 8004826 <_puts_r+0x76>
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da2e      	bge.n	800484c <_puts_r+0x9c>
 80047ee:	4622      	mov	r2, r4
 80047f0:	210a      	movs	r1, #10
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f87b 	bl	80048ee <__swbuf_r>
 80047f8:	3001      	adds	r0, #1
 80047fa:	d007      	beq.n	800480c <_puts_r+0x5c>
 80047fc:	250a      	movs	r5, #10
 80047fe:	e007      	b.n	8004810 <_puts_r+0x60>
 8004800:	4621      	mov	r1, r4
 8004802:	4628      	mov	r0, r5
 8004804:	f000 f8b0 	bl	8004968 <__swsetup_r>
 8004808:	2800      	cmp	r0, #0
 800480a:	d0e7      	beq.n	80047dc <_puts_r+0x2c>
 800480c:	f04f 35ff 	mov.w	r5, #4294967295
 8004810:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004812:	07da      	lsls	r2, r3, #31
 8004814:	d405      	bmi.n	8004822 <_puts_r+0x72>
 8004816:	89a3      	ldrh	r3, [r4, #12]
 8004818:	059b      	lsls	r3, r3, #22
 800481a:	d402      	bmi.n	8004822 <_puts_r+0x72>
 800481c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800481e:	f000 f974 	bl	8004b0a <__retarget_lock_release_recursive>
 8004822:	4628      	mov	r0, r5
 8004824:	bd70      	pop	{r4, r5, r6, pc}
 8004826:	2b00      	cmp	r3, #0
 8004828:	da04      	bge.n	8004834 <_puts_r+0x84>
 800482a:	69a2      	ldr	r2, [r4, #24]
 800482c:	429a      	cmp	r2, r3
 800482e:	dc06      	bgt.n	800483e <_puts_r+0x8e>
 8004830:	290a      	cmp	r1, #10
 8004832:	d004      	beq.n	800483e <_puts_r+0x8e>
 8004834:	6823      	ldr	r3, [r4, #0]
 8004836:	1c5a      	adds	r2, r3, #1
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	7019      	strb	r1, [r3, #0]
 800483c:	e7cf      	b.n	80047de <_puts_r+0x2e>
 800483e:	4622      	mov	r2, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 f854 	bl	80048ee <__swbuf_r>
 8004846:	3001      	adds	r0, #1
 8004848:	d1c9      	bne.n	80047de <_puts_r+0x2e>
 800484a:	e7df      	b.n	800480c <_puts_r+0x5c>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	250a      	movs	r5, #10
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	701d      	strb	r5, [r3, #0]
 8004856:	e7db      	b.n	8004810 <_puts_r+0x60>

08004858 <puts>:
 8004858:	4b02      	ldr	r3, [pc, #8]	; (8004864 <puts+0xc>)
 800485a:	4601      	mov	r1, r0
 800485c:	6818      	ldr	r0, [r3, #0]
 800485e:	f7ff bfa7 	b.w	80047b0 <_puts_r>
 8004862:	bf00      	nop
 8004864:	20000068 	.word	0x20000068

08004868 <__sread>:
 8004868:	b510      	push	{r4, lr}
 800486a:	460c      	mov	r4, r1
 800486c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004870:	f000 f8fc 	bl	8004a6c <_read_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	bfab      	itete	ge
 8004878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800487a:	89a3      	ldrhlt	r3, [r4, #12]
 800487c:	181b      	addge	r3, r3, r0
 800487e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004882:	bfac      	ite	ge
 8004884:	6563      	strge	r3, [r4, #84]	; 0x54
 8004886:	81a3      	strhlt	r3, [r4, #12]
 8004888:	bd10      	pop	{r4, pc}

0800488a <__swrite>:
 800488a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800488e:	461f      	mov	r7, r3
 8004890:	898b      	ldrh	r3, [r1, #12]
 8004892:	05db      	lsls	r3, r3, #23
 8004894:	4605      	mov	r5, r0
 8004896:	460c      	mov	r4, r1
 8004898:	4616      	mov	r6, r2
 800489a:	d505      	bpl.n	80048a8 <__swrite+0x1e>
 800489c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a0:	2302      	movs	r3, #2
 80048a2:	2200      	movs	r2, #0
 80048a4:	f000 f8d0 	bl	8004a48 <_lseek_r>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	4632      	mov	r2, r6
 80048b6:	463b      	mov	r3, r7
 80048b8:	4628      	mov	r0, r5
 80048ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048be:	f000 b8e7 	b.w	8004a90 <_write_r>

080048c2 <__sseek>:
 80048c2:	b510      	push	{r4, lr}
 80048c4:	460c      	mov	r4, r1
 80048c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ca:	f000 f8bd 	bl	8004a48 <_lseek_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	bf15      	itete	ne
 80048d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80048d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048de:	81a3      	strheq	r3, [r4, #12]
 80048e0:	bf18      	it	ne
 80048e2:	81a3      	strhne	r3, [r4, #12]
 80048e4:	bd10      	pop	{r4, pc}

080048e6 <__sclose>:
 80048e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ea:	f000 b89d 	b.w	8004a28 <_close_r>

080048ee <__swbuf_r>:
 80048ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f0:	460e      	mov	r6, r1
 80048f2:	4614      	mov	r4, r2
 80048f4:	4605      	mov	r5, r0
 80048f6:	b118      	cbz	r0, 8004900 <__swbuf_r+0x12>
 80048f8:	6a03      	ldr	r3, [r0, #32]
 80048fa:	b90b      	cbnz	r3, 8004900 <__swbuf_r+0x12>
 80048fc:	f7ff ff10 	bl	8004720 <__sinit>
 8004900:	69a3      	ldr	r3, [r4, #24]
 8004902:	60a3      	str	r3, [r4, #8]
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	071a      	lsls	r2, r3, #28
 8004908:	d525      	bpl.n	8004956 <__swbuf_r+0x68>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	b31b      	cbz	r3, 8004956 <__swbuf_r+0x68>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	1a98      	subs	r0, r3, r2
 8004914:	6963      	ldr	r3, [r4, #20]
 8004916:	b2f6      	uxtb	r6, r6
 8004918:	4283      	cmp	r3, r0
 800491a:	4637      	mov	r7, r6
 800491c:	dc04      	bgt.n	8004928 <__swbuf_r+0x3a>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 fd45 	bl	80053b0 <_fflush_r>
 8004926:	b9e0      	cbnz	r0, 8004962 <__swbuf_r+0x74>
 8004928:	68a3      	ldr	r3, [r4, #8]
 800492a:	3b01      	subs	r3, #1
 800492c:	60a3      	str	r3, [r4, #8]
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	6022      	str	r2, [r4, #0]
 8004934:	701e      	strb	r6, [r3, #0]
 8004936:	6962      	ldr	r2, [r4, #20]
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	429a      	cmp	r2, r3
 800493c:	d004      	beq.n	8004948 <__swbuf_r+0x5a>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d506      	bpl.n	8004952 <__swbuf_r+0x64>
 8004944:	2e0a      	cmp	r6, #10
 8004946:	d104      	bne.n	8004952 <__swbuf_r+0x64>
 8004948:	4621      	mov	r1, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 fd30 	bl	80053b0 <_fflush_r>
 8004950:	b938      	cbnz	r0, 8004962 <__swbuf_r+0x74>
 8004952:	4638      	mov	r0, r7
 8004954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004956:	4621      	mov	r1, r4
 8004958:	4628      	mov	r0, r5
 800495a:	f000 f805 	bl	8004968 <__swsetup_r>
 800495e:	2800      	cmp	r0, #0
 8004960:	d0d5      	beq.n	800490e <__swbuf_r+0x20>
 8004962:	f04f 37ff 	mov.w	r7, #4294967295
 8004966:	e7f4      	b.n	8004952 <__swbuf_r+0x64>

08004968 <__swsetup_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4b2a      	ldr	r3, [pc, #168]	; (8004a14 <__swsetup_r+0xac>)
 800496c:	4605      	mov	r5, r0
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	460c      	mov	r4, r1
 8004972:	b118      	cbz	r0, 800497c <__swsetup_r+0x14>
 8004974:	6a03      	ldr	r3, [r0, #32]
 8004976:	b90b      	cbnz	r3, 800497c <__swsetup_r+0x14>
 8004978:	f7ff fed2 	bl	8004720 <__sinit>
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004982:	0718      	lsls	r0, r3, #28
 8004984:	d422      	bmi.n	80049cc <__swsetup_r+0x64>
 8004986:	06d9      	lsls	r1, r3, #27
 8004988:	d407      	bmi.n	800499a <__swsetup_r+0x32>
 800498a:	2309      	movs	r3, #9
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	f04f 30ff 	mov.w	r0, #4294967295
 8004998:	e034      	b.n	8004a04 <__swsetup_r+0x9c>
 800499a:	0758      	lsls	r0, r3, #29
 800499c:	d512      	bpl.n	80049c4 <__swsetup_r+0x5c>
 800499e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049a0:	b141      	cbz	r1, 80049b4 <__swsetup_r+0x4c>
 80049a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049a6:	4299      	cmp	r1, r3
 80049a8:	d002      	beq.n	80049b0 <__swsetup_r+0x48>
 80049aa:	4628      	mov	r0, r5
 80049ac:	f000 f8ae 	bl	8004b0c <_free_r>
 80049b0:	2300      	movs	r3, #0
 80049b2:	6363      	str	r3, [r4, #52]	; 0x34
 80049b4:	89a3      	ldrh	r3, [r4, #12]
 80049b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	2300      	movs	r3, #0
 80049be:	6063      	str	r3, [r4, #4]
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	6023      	str	r3, [r4, #0]
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	f043 0308 	orr.w	r3, r3, #8
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	6923      	ldr	r3, [r4, #16]
 80049ce:	b94b      	cbnz	r3, 80049e4 <__swsetup_r+0x7c>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049da:	d003      	beq.n	80049e4 <__swsetup_r+0x7c>
 80049dc:	4621      	mov	r1, r4
 80049de:	4628      	mov	r0, r5
 80049e0:	f000 fd34 	bl	800544c <__smakebuf_r>
 80049e4:	89a0      	ldrh	r0, [r4, #12]
 80049e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049ea:	f010 0301 	ands.w	r3, r0, #1
 80049ee:	d00a      	beq.n	8004a06 <__swsetup_r+0x9e>
 80049f0:	2300      	movs	r3, #0
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6963      	ldr	r3, [r4, #20]
 80049f6:	425b      	negs	r3, r3
 80049f8:	61a3      	str	r3, [r4, #24]
 80049fa:	6923      	ldr	r3, [r4, #16]
 80049fc:	b943      	cbnz	r3, 8004a10 <__swsetup_r+0xa8>
 80049fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a02:	d1c4      	bne.n	800498e <__swsetup_r+0x26>
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	0781      	lsls	r1, r0, #30
 8004a08:	bf58      	it	pl
 8004a0a:	6963      	ldrpl	r3, [r4, #20]
 8004a0c:	60a3      	str	r3, [r4, #8]
 8004a0e:	e7f4      	b.n	80049fa <__swsetup_r+0x92>
 8004a10:	2000      	movs	r0, #0
 8004a12:	e7f7      	b.n	8004a04 <__swsetup_r+0x9c>
 8004a14:	20000068 	.word	0x20000068

08004a18 <memset>:
 8004a18:	4402      	add	r2, r0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	f803 1b01 	strb.w	r1, [r3], #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <_close_r>:
 8004a28:	b538      	push	{r3, r4, r5, lr}
 8004a2a:	4d06      	ldr	r5, [pc, #24]	; (8004a44 <_close_r+0x1c>)
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	4608      	mov	r0, r1
 8004a32:	602b      	str	r3, [r5, #0]
 8004a34:	f7fc fa61 	bl	8000efa <_close>
 8004a38:	1c43      	adds	r3, r0, #1
 8004a3a:	d102      	bne.n	8004a42 <_close_r+0x1a>
 8004a3c:	682b      	ldr	r3, [r5, #0]
 8004a3e:	b103      	cbz	r3, 8004a42 <_close_r+0x1a>
 8004a40:	6023      	str	r3, [r4, #0]
 8004a42:	bd38      	pop	{r3, r4, r5, pc}
 8004a44:	20000278 	.word	0x20000278

08004a48 <_lseek_r>:
 8004a48:	b538      	push	{r3, r4, r5, lr}
 8004a4a:	4d07      	ldr	r5, [pc, #28]	; (8004a68 <_lseek_r+0x20>)
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	4608      	mov	r0, r1
 8004a50:	4611      	mov	r1, r2
 8004a52:	2200      	movs	r2, #0
 8004a54:	602a      	str	r2, [r5, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	f7fc fa76 	bl	8000f48 <_lseek>
 8004a5c:	1c43      	adds	r3, r0, #1
 8004a5e:	d102      	bne.n	8004a66 <_lseek_r+0x1e>
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	b103      	cbz	r3, 8004a66 <_lseek_r+0x1e>
 8004a64:	6023      	str	r3, [r4, #0]
 8004a66:	bd38      	pop	{r3, r4, r5, pc}
 8004a68:	20000278 	.word	0x20000278

08004a6c <_read_r>:
 8004a6c:	b538      	push	{r3, r4, r5, lr}
 8004a6e:	4d07      	ldr	r5, [pc, #28]	; (8004a8c <_read_r+0x20>)
 8004a70:	4604      	mov	r4, r0
 8004a72:	4608      	mov	r0, r1
 8004a74:	4611      	mov	r1, r2
 8004a76:	2200      	movs	r2, #0
 8004a78:	602a      	str	r2, [r5, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f7fc fa20 	bl	8000ec0 <_read>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_read_r+0x1e>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_read_r+0x1e>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20000278 	.word	0x20000278

08004a90 <_write_r>:
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4d07      	ldr	r5, [pc, #28]	; (8004ab0 <_write_r+0x20>)
 8004a94:	4604      	mov	r4, r0
 8004a96:	4608      	mov	r0, r1
 8004a98:	4611      	mov	r1, r2
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f7fb fd64 	bl	800056c <_write>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_write_r+0x1e>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_write_r+0x1e>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	20000278 	.word	0x20000278

08004ab4 <__errno>:
 8004ab4:	4b01      	ldr	r3, [pc, #4]	; (8004abc <__errno+0x8>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000068 	.word	0x20000068

08004ac0 <__libc_init_array>:
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	4d0d      	ldr	r5, [pc, #52]	; (8004af8 <__libc_init_array+0x38>)
 8004ac4:	4c0d      	ldr	r4, [pc, #52]	; (8004afc <__libc_init_array+0x3c>)
 8004ac6:	1b64      	subs	r4, r4, r5
 8004ac8:	10a4      	asrs	r4, r4, #2
 8004aca:	2600      	movs	r6, #0
 8004acc:	42a6      	cmp	r6, r4
 8004ace:	d109      	bne.n	8004ae4 <__libc_init_array+0x24>
 8004ad0:	4d0b      	ldr	r5, [pc, #44]	; (8004b00 <__libc_init_array+0x40>)
 8004ad2:	4c0c      	ldr	r4, [pc, #48]	; (8004b04 <__libc_init_array+0x44>)
 8004ad4:	f000 fd28 	bl	8005528 <_init>
 8004ad8:	1b64      	subs	r4, r4, r5
 8004ada:	10a4      	asrs	r4, r4, #2
 8004adc:	2600      	movs	r6, #0
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	d105      	bne.n	8004aee <__libc_init_array+0x2e>
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae8:	4798      	blx	r3
 8004aea:	3601      	adds	r6, #1
 8004aec:	e7ee      	b.n	8004acc <__libc_init_array+0xc>
 8004aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af2:	4798      	blx	r3
 8004af4:	3601      	adds	r6, #1
 8004af6:	e7f2      	b.n	8004ade <__libc_init_array+0x1e>
 8004af8:	08005604 	.word	0x08005604
 8004afc:	08005604 	.word	0x08005604
 8004b00:	08005604 	.word	0x08005604
 8004b04:	08005608 	.word	0x08005608

08004b08 <__retarget_lock_acquire_recursive>:
 8004b08:	4770      	bx	lr

08004b0a <__retarget_lock_release_recursive>:
 8004b0a:	4770      	bx	lr

08004b0c <_free_r>:
 8004b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b0e:	2900      	cmp	r1, #0
 8004b10:	d044      	beq.n	8004b9c <_free_r+0x90>
 8004b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b16:	9001      	str	r0, [sp, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8004b1e:	bfb8      	it	lt
 8004b20:	18e4      	addlt	r4, r4, r3
 8004b22:	f000 f8df 	bl	8004ce4 <__malloc_lock>
 8004b26:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <_free_r+0x94>)
 8004b28:	9801      	ldr	r0, [sp, #4]
 8004b2a:	6813      	ldr	r3, [r2, #0]
 8004b2c:	b933      	cbnz	r3, 8004b3c <_free_r+0x30>
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	6014      	str	r4, [r2, #0]
 8004b32:	b003      	add	sp, #12
 8004b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b38:	f000 b8da 	b.w	8004cf0 <__malloc_unlock>
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	d908      	bls.n	8004b52 <_free_r+0x46>
 8004b40:	6825      	ldr	r5, [r4, #0]
 8004b42:	1961      	adds	r1, r4, r5
 8004b44:	428b      	cmp	r3, r1
 8004b46:	bf01      	itttt	eq
 8004b48:	6819      	ldreq	r1, [r3, #0]
 8004b4a:	685b      	ldreq	r3, [r3, #4]
 8004b4c:	1949      	addeq	r1, r1, r5
 8004b4e:	6021      	streq	r1, [r4, #0]
 8004b50:	e7ed      	b.n	8004b2e <_free_r+0x22>
 8004b52:	461a      	mov	r2, r3
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	b10b      	cbz	r3, 8004b5c <_free_r+0x50>
 8004b58:	42a3      	cmp	r3, r4
 8004b5a:	d9fa      	bls.n	8004b52 <_free_r+0x46>
 8004b5c:	6811      	ldr	r1, [r2, #0]
 8004b5e:	1855      	adds	r5, r2, r1
 8004b60:	42a5      	cmp	r5, r4
 8004b62:	d10b      	bne.n	8004b7c <_free_r+0x70>
 8004b64:	6824      	ldr	r4, [r4, #0]
 8004b66:	4421      	add	r1, r4
 8004b68:	1854      	adds	r4, r2, r1
 8004b6a:	42a3      	cmp	r3, r4
 8004b6c:	6011      	str	r1, [r2, #0]
 8004b6e:	d1e0      	bne.n	8004b32 <_free_r+0x26>
 8004b70:	681c      	ldr	r4, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	6053      	str	r3, [r2, #4]
 8004b76:	440c      	add	r4, r1
 8004b78:	6014      	str	r4, [r2, #0]
 8004b7a:	e7da      	b.n	8004b32 <_free_r+0x26>
 8004b7c:	d902      	bls.n	8004b84 <_free_r+0x78>
 8004b7e:	230c      	movs	r3, #12
 8004b80:	6003      	str	r3, [r0, #0]
 8004b82:	e7d6      	b.n	8004b32 <_free_r+0x26>
 8004b84:	6825      	ldr	r5, [r4, #0]
 8004b86:	1961      	adds	r1, r4, r5
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	bf04      	itt	eq
 8004b8c:	6819      	ldreq	r1, [r3, #0]
 8004b8e:	685b      	ldreq	r3, [r3, #4]
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	bf04      	itt	eq
 8004b94:	1949      	addeq	r1, r1, r5
 8004b96:	6021      	streq	r1, [r4, #0]
 8004b98:	6054      	str	r4, [r2, #4]
 8004b9a:	e7ca      	b.n	8004b32 <_free_r+0x26>
 8004b9c:	b003      	add	sp, #12
 8004b9e:	bd30      	pop	{r4, r5, pc}
 8004ba0:	20000280 	.word	0x20000280

08004ba4 <sbrk_aligned>:
 8004ba4:	b570      	push	{r4, r5, r6, lr}
 8004ba6:	4e0e      	ldr	r6, [pc, #56]	; (8004be0 <sbrk_aligned+0x3c>)
 8004ba8:	460c      	mov	r4, r1
 8004baa:	6831      	ldr	r1, [r6, #0]
 8004bac:	4605      	mov	r5, r0
 8004bae:	b911      	cbnz	r1, 8004bb6 <sbrk_aligned+0x12>
 8004bb0:	f000 fcaa 	bl	8005508 <_sbrk_r>
 8004bb4:	6030      	str	r0, [r6, #0]
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	4628      	mov	r0, r5
 8004bba:	f000 fca5 	bl	8005508 <_sbrk_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	d00a      	beq.n	8004bd8 <sbrk_aligned+0x34>
 8004bc2:	1cc4      	adds	r4, r0, #3
 8004bc4:	f024 0403 	bic.w	r4, r4, #3
 8004bc8:	42a0      	cmp	r0, r4
 8004bca:	d007      	beq.n	8004bdc <sbrk_aligned+0x38>
 8004bcc:	1a21      	subs	r1, r4, r0
 8004bce:	4628      	mov	r0, r5
 8004bd0:	f000 fc9a 	bl	8005508 <_sbrk_r>
 8004bd4:	3001      	adds	r0, #1
 8004bd6:	d101      	bne.n	8004bdc <sbrk_aligned+0x38>
 8004bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8004bdc:	4620      	mov	r0, r4
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
 8004be0:	20000284 	.word	0x20000284

08004be4 <_malloc_r>:
 8004be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be8:	1ccd      	adds	r5, r1, #3
 8004bea:	f025 0503 	bic.w	r5, r5, #3
 8004bee:	3508      	adds	r5, #8
 8004bf0:	2d0c      	cmp	r5, #12
 8004bf2:	bf38      	it	cc
 8004bf4:	250c      	movcc	r5, #12
 8004bf6:	2d00      	cmp	r5, #0
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	db01      	blt.n	8004c00 <_malloc_r+0x1c>
 8004bfc:	42a9      	cmp	r1, r5
 8004bfe:	d905      	bls.n	8004c0c <_malloc_r+0x28>
 8004c00:	230c      	movs	r3, #12
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	2600      	movs	r6, #0
 8004c06:	4630      	mov	r0, r6
 8004c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004ce0 <_malloc_r+0xfc>
 8004c10:	f000 f868 	bl	8004ce4 <__malloc_lock>
 8004c14:	f8d8 3000 	ldr.w	r3, [r8]
 8004c18:	461c      	mov	r4, r3
 8004c1a:	bb5c      	cbnz	r4, 8004c74 <_malloc_r+0x90>
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f7ff ffc0 	bl	8004ba4 <sbrk_aligned>
 8004c24:	1c43      	adds	r3, r0, #1
 8004c26:	4604      	mov	r4, r0
 8004c28:	d155      	bne.n	8004cd6 <_malloc_r+0xf2>
 8004c2a:	f8d8 4000 	ldr.w	r4, [r8]
 8004c2e:	4626      	mov	r6, r4
 8004c30:	2e00      	cmp	r6, #0
 8004c32:	d145      	bne.n	8004cc0 <_malloc_r+0xdc>
 8004c34:	2c00      	cmp	r4, #0
 8004c36:	d048      	beq.n	8004cca <_malloc_r+0xe6>
 8004c38:	6823      	ldr	r3, [r4, #0]
 8004c3a:	4631      	mov	r1, r6
 8004c3c:	4638      	mov	r0, r7
 8004c3e:	eb04 0903 	add.w	r9, r4, r3
 8004c42:	f000 fc61 	bl	8005508 <_sbrk_r>
 8004c46:	4581      	cmp	r9, r0
 8004c48:	d13f      	bne.n	8004cca <_malloc_r+0xe6>
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	1a6d      	subs	r5, r5, r1
 8004c4e:	4629      	mov	r1, r5
 8004c50:	4638      	mov	r0, r7
 8004c52:	f7ff ffa7 	bl	8004ba4 <sbrk_aligned>
 8004c56:	3001      	adds	r0, #1
 8004c58:	d037      	beq.n	8004cca <_malloc_r+0xe6>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	442b      	add	r3, r5
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	f8d8 3000 	ldr.w	r3, [r8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d038      	beq.n	8004cda <_malloc_r+0xf6>
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	42a2      	cmp	r2, r4
 8004c6c:	d12b      	bne.n	8004cc6 <_malloc_r+0xe2>
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	e00f      	b.n	8004c94 <_malloc_r+0xb0>
 8004c74:	6822      	ldr	r2, [r4, #0]
 8004c76:	1b52      	subs	r2, r2, r5
 8004c78:	d41f      	bmi.n	8004cba <_malloc_r+0xd6>
 8004c7a:	2a0b      	cmp	r2, #11
 8004c7c:	d917      	bls.n	8004cae <_malloc_r+0xca>
 8004c7e:	1961      	adds	r1, r4, r5
 8004c80:	42a3      	cmp	r3, r4
 8004c82:	6025      	str	r5, [r4, #0]
 8004c84:	bf18      	it	ne
 8004c86:	6059      	strne	r1, [r3, #4]
 8004c88:	6863      	ldr	r3, [r4, #4]
 8004c8a:	bf08      	it	eq
 8004c8c:	f8c8 1000 	streq.w	r1, [r8]
 8004c90:	5162      	str	r2, [r4, r5]
 8004c92:	604b      	str	r3, [r1, #4]
 8004c94:	4638      	mov	r0, r7
 8004c96:	f104 060b 	add.w	r6, r4, #11
 8004c9a:	f000 f829 	bl	8004cf0 <__malloc_unlock>
 8004c9e:	f026 0607 	bic.w	r6, r6, #7
 8004ca2:	1d23      	adds	r3, r4, #4
 8004ca4:	1af2      	subs	r2, r6, r3
 8004ca6:	d0ae      	beq.n	8004c06 <_malloc_r+0x22>
 8004ca8:	1b9b      	subs	r3, r3, r6
 8004caa:	50a3      	str	r3, [r4, r2]
 8004cac:	e7ab      	b.n	8004c06 <_malloc_r+0x22>
 8004cae:	42a3      	cmp	r3, r4
 8004cb0:	6862      	ldr	r2, [r4, #4]
 8004cb2:	d1dd      	bne.n	8004c70 <_malloc_r+0x8c>
 8004cb4:	f8c8 2000 	str.w	r2, [r8]
 8004cb8:	e7ec      	b.n	8004c94 <_malloc_r+0xb0>
 8004cba:	4623      	mov	r3, r4
 8004cbc:	6864      	ldr	r4, [r4, #4]
 8004cbe:	e7ac      	b.n	8004c1a <_malloc_r+0x36>
 8004cc0:	4634      	mov	r4, r6
 8004cc2:	6876      	ldr	r6, [r6, #4]
 8004cc4:	e7b4      	b.n	8004c30 <_malloc_r+0x4c>
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	e7cc      	b.n	8004c64 <_malloc_r+0x80>
 8004cca:	230c      	movs	r3, #12
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f000 f80e 	bl	8004cf0 <__malloc_unlock>
 8004cd4:	e797      	b.n	8004c06 <_malloc_r+0x22>
 8004cd6:	6025      	str	r5, [r4, #0]
 8004cd8:	e7dc      	b.n	8004c94 <_malloc_r+0xb0>
 8004cda:	605b      	str	r3, [r3, #4]
 8004cdc:	deff      	udf	#255	; 0xff
 8004cde:	bf00      	nop
 8004ce0:	20000280 	.word	0x20000280

08004ce4 <__malloc_lock>:
 8004ce4:	4801      	ldr	r0, [pc, #4]	; (8004cec <__malloc_lock+0x8>)
 8004ce6:	f7ff bf0f 	b.w	8004b08 <__retarget_lock_acquire_recursive>
 8004cea:	bf00      	nop
 8004cec:	2000027c 	.word	0x2000027c

08004cf0 <__malloc_unlock>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	; (8004cf8 <__malloc_unlock+0x8>)
 8004cf2:	f7ff bf0a 	b.w	8004b0a <__retarget_lock_release_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	2000027c 	.word	0x2000027c

08004cfc <__sfputc_r>:
 8004cfc:	6893      	ldr	r3, [r2, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	b410      	push	{r4}
 8004d04:	6093      	str	r3, [r2, #8]
 8004d06:	da08      	bge.n	8004d1a <__sfputc_r+0x1e>
 8004d08:	6994      	ldr	r4, [r2, #24]
 8004d0a:	42a3      	cmp	r3, r4
 8004d0c:	db01      	blt.n	8004d12 <__sfputc_r+0x16>
 8004d0e:	290a      	cmp	r1, #10
 8004d10:	d103      	bne.n	8004d1a <__sfputc_r+0x1e>
 8004d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d16:	f7ff bdea 	b.w	80048ee <__swbuf_r>
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	1c58      	adds	r0, r3, #1
 8004d1e:	6010      	str	r0, [r2, #0]
 8004d20:	7019      	strb	r1, [r3, #0]
 8004d22:	4608      	mov	r0, r1
 8004d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <__sfputs_r>:
 8004d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	460f      	mov	r7, r1
 8004d30:	4614      	mov	r4, r2
 8004d32:	18d5      	adds	r5, r2, r3
 8004d34:	42ac      	cmp	r4, r5
 8004d36:	d101      	bne.n	8004d3c <__sfputs_r+0x12>
 8004d38:	2000      	movs	r0, #0
 8004d3a:	e007      	b.n	8004d4c <__sfputs_r+0x22>
 8004d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d40:	463a      	mov	r2, r7
 8004d42:	4630      	mov	r0, r6
 8004d44:	f7ff ffda 	bl	8004cfc <__sfputc_r>
 8004d48:	1c43      	adds	r3, r0, #1
 8004d4a:	d1f3      	bne.n	8004d34 <__sfputs_r+0xa>
 8004d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d50 <_vfiprintf_r>:
 8004d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d54:	460d      	mov	r5, r1
 8004d56:	b09d      	sub	sp, #116	; 0x74
 8004d58:	4614      	mov	r4, r2
 8004d5a:	4698      	mov	r8, r3
 8004d5c:	4606      	mov	r6, r0
 8004d5e:	b118      	cbz	r0, 8004d68 <_vfiprintf_r+0x18>
 8004d60:	6a03      	ldr	r3, [r0, #32]
 8004d62:	b90b      	cbnz	r3, 8004d68 <_vfiprintf_r+0x18>
 8004d64:	f7ff fcdc 	bl	8004720 <__sinit>
 8004d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d6a:	07d9      	lsls	r1, r3, #31
 8004d6c:	d405      	bmi.n	8004d7a <_vfiprintf_r+0x2a>
 8004d6e:	89ab      	ldrh	r3, [r5, #12]
 8004d70:	059a      	lsls	r2, r3, #22
 8004d72:	d402      	bmi.n	8004d7a <_vfiprintf_r+0x2a>
 8004d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d76:	f7ff fec7 	bl	8004b08 <__retarget_lock_acquire_recursive>
 8004d7a:	89ab      	ldrh	r3, [r5, #12]
 8004d7c:	071b      	lsls	r3, r3, #28
 8004d7e:	d501      	bpl.n	8004d84 <_vfiprintf_r+0x34>
 8004d80:	692b      	ldr	r3, [r5, #16]
 8004d82:	b99b      	cbnz	r3, 8004dac <_vfiprintf_r+0x5c>
 8004d84:	4629      	mov	r1, r5
 8004d86:	4630      	mov	r0, r6
 8004d88:	f7ff fdee 	bl	8004968 <__swsetup_r>
 8004d8c:	b170      	cbz	r0, 8004dac <_vfiprintf_r+0x5c>
 8004d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d90:	07dc      	lsls	r4, r3, #31
 8004d92:	d504      	bpl.n	8004d9e <_vfiprintf_r+0x4e>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	b01d      	add	sp, #116	; 0x74
 8004d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9e:	89ab      	ldrh	r3, [r5, #12]
 8004da0:	0598      	lsls	r0, r3, #22
 8004da2:	d4f7      	bmi.n	8004d94 <_vfiprintf_r+0x44>
 8004da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004da6:	f7ff feb0 	bl	8004b0a <__retarget_lock_release_recursive>
 8004daa:	e7f3      	b.n	8004d94 <_vfiprintf_r+0x44>
 8004dac:	2300      	movs	r3, #0
 8004dae:	9309      	str	r3, [sp, #36]	; 0x24
 8004db0:	2320      	movs	r3, #32
 8004db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dba:	2330      	movs	r3, #48	; 0x30
 8004dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004f70 <_vfiprintf_r+0x220>
 8004dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc4:	f04f 0901 	mov.w	r9, #1
 8004dc8:	4623      	mov	r3, r4
 8004dca:	469a      	mov	sl, r3
 8004dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd0:	b10a      	cbz	r2, 8004dd6 <_vfiprintf_r+0x86>
 8004dd2:	2a25      	cmp	r2, #37	; 0x25
 8004dd4:	d1f9      	bne.n	8004dca <_vfiprintf_r+0x7a>
 8004dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8004dda:	d00b      	beq.n	8004df4 <_vfiprintf_r+0xa4>
 8004ddc:	465b      	mov	r3, fp
 8004dde:	4622      	mov	r2, r4
 8004de0:	4629      	mov	r1, r5
 8004de2:	4630      	mov	r0, r6
 8004de4:	f7ff ffa1 	bl	8004d2a <__sfputs_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	f000 80a9 	beq.w	8004f40 <_vfiprintf_r+0x1f0>
 8004dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df0:	445a      	add	r2, fp
 8004df2:	9209      	str	r2, [sp, #36]	; 0x24
 8004df4:	f89a 3000 	ldrb.w	r3, [sl]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a1 	beq.w	8004f40 <_vfiprintf_r+0x1f0>
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f04f 32ff 	mov.w	r2, #4294967295
 8004e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e08:	f10a 0a01 	add.w	sl, sl, #1
 8004e0c:	9304      	str	r3, [sp, #16]
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e14:	931a      	str	r3, [sp, #104]	; 0x68
 8004e16:	4654      	mov	r4, sl
 8004e18:	2205      	movs	r2, #5
 8004e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1e:	4854      	ldr	r0, [pc, #336]	; (8004f70 <_vfiprintf_r+0x220>)
 8004e20:	f7fb f9d6 	bl	80001d0 <memchr>
 8004e24:	9a04      	ldr	r2, [sp, #16]
 8004e26:	b9d8      	cbnz	r0, 8004e60 <_vfiprintf_r+0x110>
 8004e28:	06d1      	lsls	r1, r2, #27
 8004e2a:	bf44      	itt	mi
 8004e2c:	2320      	movmi	r3, #32
 8004e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e32:	0713      	lsls	r3, r2, #28
 8004e34:	bf44      	itt	mi
 8004e36:	232b      	movmi	r3, #43	; 0x2b
 8004e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e40:	2b2a      	cmp	r3, #42	; 0x2a
 8004e42:	d015      	beq.n	8004e70 <_vfiprintf_r+0x120>
 8004e44:	9a07      	ldr	r2, [sp, #28]
 8004e46:	4654      	mov	r4, sl
 8004e48:	2000      	movs	r0, #0
 8004e4a:	f04f 0c0a 	mov.w	ip, #10
 8004e4e:	4621      	mov	r1, r4
 8004e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e54:	3b30      	subs	r3, #48	; 0x30
 8004e56:	2b09      	cmp	r3, #9
 8004e58:	d94d      	bls.n	8004ef6 <_vfiprintf_r+0x1a6>
 8004e5a:	b1b0      	cbz	r0, 8004e8a <_vfiprintf_r+0x13a>
 8004e5c:	9207      	str	r2, [sp, #28]
 8004e5e:	e014      	b.n	8004e8a <_vfiprintf_r+0x13a>
 8004e60:	eba0 0308 	sub.w	r3, r0, r8
 8004e64:	fa09 f303 	lsl.w	r3, r9, r3
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	9304      	str	r3, [sp, #16]
 8004e6c:	46a2      	mov	sl, r4
 8004e6e:	e7d2      	b.n	8004e16 <_vfiprintf_r+0xc6>
 8004e70:	9b03      	ldr	r3, [sp, #12]
 8004e72:	1d19      	adds	r1, r3, #4
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	9103      	str	r1, [sp, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	bfbb      	ittet	lt
 8004e7c:	425b      	neglt	r3, r3
 8004e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8004e82:	9307      	strge	r3, [sp, #28]
 8004e84:	9307      	strlt	r3, [sp, #28]
 8004e86:	bfb8      	it	lt
 8004e88:	9204      	strlt	r2, [sp, #16]
 8004e8a:	7823      	ldrb	r3, [r4, #0]
 8004e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e8e:	d10c      	bne.n	8004eaa <_vfiprintf_r+0x15a>
 8004e90:	7863      	ldrb	r3, [r4, #1]
 8004e92:	2b2a      	cmp	r3, #42	; 0x2a
 8004e94:	d134      	bne.n	8004f00 <_vfiprintf_r+0x1b0>
 8004e96:	9b03      	ldr	r3, [sp, #12]
 8004e98:	1d1a      	adds	r2, r3, #4
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	9203      	str	r2, [sp, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	bfb8      	it	lt
 8004ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea6:	3402      	adds	r4, #2
 8004ea8:	9305      	str	r3, [sp, #20]
 8004eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f80 <_vfiprintf_r+0x230>
 8004eae:	7821      	ldrb	r1, [r4, #0]
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	f7fb f98c 	bl	80001d0 <memchr>
 8004eb8:	b138      	cbz	r0, 8004eca <_vfiprintf_r+0x17a>
 8004eba:	9b04      	ldr	r3, [sp, #16]
 8004ebc:	eba0 000a 	sub.w	r0, r0, sl
 8004ec0:	2240      	movs	r2, #64	; 0x40
 8004ec2:	4082      	lsls	r2, r0
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	9304      	str	r3, [sp, #16]
 8004eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ece:	4829      	ldr	r0, [pc, #164]	; (8004f74 <_vfiprintf_r+0x224>)
 8004ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed4:	2206      	movs	r2, #6
 8004ed6:	f7fb f97b 	bl	80001d0 <memchr>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	d03f      	beq.n	8004f5e <_vfiprintf_r+0x20e>
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <_vfiprintf_r+0x228>)
 8004ee0:	bb1b      	cbnz	r3, 8004f2a <_vfiprintf_r+0x1da>
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	3307      	adds	r3, #7
 8004ee6:	f023 0307 	bic.w	r3, r3, #7
 8004eea:	3308      	adds	r3, #8
 8004eec:	9303      	str	r3, [sp, #12]
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	443b      	add	r3, r7
 8004ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef4:	e768      	b.n	8004dc8 <_vfiprintf_r+0x78>
 8004ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004efa:	460c      	mov	r4, r1
 8004efc:	2001      	movs	r0, #1
 8004efe:	e7a6      	b.n	8004e4e <_vfiprintf_r+0xfe>
 8004f00:	2300      	movs	r3, #0
 8004f02:	3401      	adds	r4, #1
 8004f04:	9305      	str	r3, [sp, #20]
 8004f06:	4619      	mov	r1, r3
 8004f08:	f04f 0c0a 	mov.w	ip, #10
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f12:	3a30      	subs	r2, #48	; 0x30
 8004f14:	2a09      	cmp	r2, #9
 8004f16:	d903      	bls.n	8004f20 <_vfiprintf_r+0x1d0>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0c6      	beq.n	8004eaa <_vfiprintf_r+0x15a>
 8004f1c:	9105      	str	r1, [sp, #20]
 8004f1e:	e7c4      	b.n	8004eaa <_vfiprintf_r+0x15a>
 8004f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f24:	4604      	mov	r4, r0
 8004f26:	2301      	movs	r3, #1
 8004f28:	e7f0      	b.n	8004f0c <_vfiprintf_r+0x1bc>
 8004f2a:	ab03      	add	r3, sp, #12
 8004f2c:	9300      	str	r3, [sp, #0]
 8004f2e:	462a      	mov	r2, r5
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <_vfiprintf_r+0x22c>)
 8004f32:	a904      	add	r1, sp, #16
 8004f34:	4630      	mov	r0, r6
 8004f36:	f3af 8000 	nop.w
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	1c78      	adds	r0, r7, #1
 8004f3e:	d1d6      	bne.n	8004eee <_vfiprintf_r+0x19e>
 8004f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f42:	07d9      	lsls	r1, r3, #31
 8004f44:	d405      	bmi.n	8004f52 <_vfiprintf_r+0x202>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	059a      	lsls	r2, r3, #22
 8004f4a:	d402      	bmi.n	8004f52 <_vfiprintf_r+0x202>
 8004f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4e:	f7ff fddc 	bl	8004b0a <__retarget_lock_release_recursive>
 8004f52:	89ab      	ldrh	r3, [r5, #12]
 8004f54:	065b      	lsls	r3, r3, #25
 8004f56:	f53f af1d 	bmi.w	8004d94 <_vfiprintf_r+0x44>
 8004f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f5c:	e71c      	b.n	8004d98 <_vfiprintf_r+0x48>
 8004f5e:	ab03      	add	r3, sp, #12
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	462a      	mov	r2, r5
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <_vfiprintf_r+0x22c>)
 8004f66:	a904      	add	r1, sp, #16
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f000 f879 	bl	8005060 <_printf_i>
 8004f6e:	e7e4      	b.n	8004f3a <_vfiprintf_r+0x1ea>
 8004f70:	080055c8 	.word	0x080055c8
 8004f74:	080055d2 	.word	0x080055d2
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	08004d2b 	.word	0x08004d2b
 8004f80:	080055ce 	.word	0x080055ce

08004f84 <_printf_common>:
 8004f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f88:	4616      	mov	r6, r2
 8004f8a:	4699      	mov	r9, r3
 8004f8c:	688a      	ldr	r2, [r1, #8]
 8004f8e:	690b      	ldr	r3, [r1, #16]
 8004f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bfb8      	it	lt
 8004f98:	4613      	movlt	r3, r2
 8004f9a:	6033      	str	r3, [r6, #0]
 8004f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fa0:	4607      	mov	r7, r0
 8004fa2:	460c      	mov	r4, r1
 8004fa4:	b10a      	cbz	r2, 8004faa <_printf_common+0x26>
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	6033      	str	r3, [r6, #0]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	0699      	lsls	r1, r3, #26
 8004fae:	bf42      	ittt	mi
 8004fb0:	6833      	ldrmi	r3, [r6, #0]
 8004fb2:	3302      	addmi	r3, #2
 8004fb4:	6033      	strmi	r3, [r6, #0]
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	f015 0506 	ands.w	r5, r5, #6
 8004fbc:	d106      	bne.n	8004fcc <_printf_common+0x48>
 8004fbe:	f104 0a19 	add.w	sl, r4, #25
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	6832      	ldr	r2, [r6, #0]
 8004fc6:	1a9b      	subs	r3, r3, r2
 8004fc8:	42ab      	cmp	r3, r5
 8004fca:	dc26      	bgt.n	800501a <_printf_common+0x96>
 8004fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fd0:	1e13      	subs	r3, r2, #0
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	bf18      	it	ne
 8004fd6:	2301      	movne	r3, #1
 8004fd8:	0692      	lsls	r2, r2, #26
 8004fda:	d42b      	bmi.n	8005034 <_printf_common+0xb0>
 8004fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c0      	blx	r8
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d01e      	beq.n	8005028 <_printf_common+0xa4>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	f003 0306 	and.w	r3, r3, #6
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	bf02      	ittt	eq
 8004ff6:	68e5      	ldreq	r5, [r4, #12]
 8004ff8:	6833      	ldreq	r3, [r6, #0]
 8004ffa:	1aed      	subeq	r5, r5, r3
 8004ffc:	68a3      	ldr	r3, [r4, #8]
 8004ffe:	bf0c      	ite	eq
 8005000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005004:	2500      	movne	r5, #0
 8005006:	4293      	cmp	r3, r2
 8005008:	bfc4      	itt	gt
 800500a:	1a9b      	subgt	r3, r3, r2
 800500c:	18ed      	addgt	r5, r5, r3
 800500e:	2600      	movs	r6, #0
 8005010:	341a      	adds	r4, #26
 8005012:	42b5      	cmp	r5, r6
 8005014:	d11a      	bne.n	800504c <_printf_common+0xc8>
 8005016:	2000      	movs	r0, #0
 8005018:	e008      	b.n	800502c <_printf_common+0xa8>
 800501a:	2301      	movs	r3, #1
 800501c:	4652      	mov	r2, sl
 800501e:	4649      	mov	r1, r9
 8005020:	4638      	mov	r0, r7
 8005022:	47c0      	blx	r8
 8005024:	3001      	adds	r0, #1
 8005026:	d103      	bne.n	8005030 <_printf_common+0xac>
 8005028:	f04f 30ff 	mov.w	r0, #4294967295
 800502c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005030:	3501      	adds	r5, #1
 8005032:	e7c6      	b.n	8004fc2 <_printf_common+0x3e>
 8005034:	18e1      	adds	r1, r4, r3
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	2030      	movs	r0, #48	; 0x30
 800503a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800503e:	4422      	add	r2, r4
 8005040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005048:	3302      	adds	r3, #2
 800504a:	e7c7      	b.n	8004fdc <_printf_common+0x58>
 800504c:	2301      	movs	r3, #1
 800504e:	4622      	mov	r2, r4
 8005050:	4649      	mov	r1, r9
 8005052:	4638      	mov	r0, r7
 8005054:	47c0      	blx	r8
 8005056:	3001      	adds	r0, #1
 8005058:	d0e6      	beq.n	8005028 <_printf_common+0xa4>
 800505a:	3601      	adds	r6, #1
 800505c:	e7d9      	b.n	8005012 <_printf_common+0x8e>
	...

08005060 <_printf_i>:
 8005060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	7e0f      	ldrb	r7, [r1, #24]
 8005066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005068:	2f78      	cmp	r7, #120	; 0x78
 800506a:	4691      	mov	r9, r2
 800506c:	4680      	mov	r8, r0
 800506e:	460c      	mov	r4, r1
 8005070:	469a      	mov	sl, r3
 8005072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005076:	d807      	bhi.n	8005088 <_printf_i+0x28>
 8005078:	2f62      	cmp	r7, #98	; 0x62
 800507a:	d80a      	bhi.n	8005092 <_printf_i+0x32>
 800507c:	2f00      	cmp	r7, #0
 800507e:	f000 80d4 	beq.w	800522a <_printf_i+0x1ca>
 8005082:	2f58      	cmp	r7, #88	; 0x58
 8005084:	f000 80c0 	beq.w	8005208 <_printf_i+0x1a8>
 8005088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005090:	e03a      	b.n	8005108 <_printf_i+0xa8>
 8005092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005096:	2b15      	cmp	r3, #21
 8005098:	d8f6      	bhi.n	8005088 <_printf_i+0x28>
 800509a:	a101      	add	r1, pc, #4	; (adr r1, 80050a0 <_printf_i+0x40>)
 800509c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	0800510d 	.word	0x0800510d
 80050a8:	08005089 	.word	0x08005089
 80050ac:	08005089 	.word	0x08005089
 80050b0:	08005089 	.word	0x08005089
 80050b4:	08005089 	.word	0x08005089
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005089 	.word	0x08005089
 80050c0:	08005089 	.word	0x08005089
 80050c4:	08005089 	.word	0x08005089
 80050c8:	08005089 	.word	0x08005089
 80050cc:	08005211 	.word	0x08005211
 80050d0:	08005139 	.word	0x08005139
 80050d4:	080051cb 	.word	0x080051cb
 80050d8:	08005089 	.word	0x08005089
 80050dc:	08005089 	.word	0x08005089
 80050e0:	08005233 	.word	0x08005233
 80050e4:	08005089 	.word	0x08005089
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005089 	.word	0x08005089
 80050f0:	08005089 	.word	0x08005089
 80050f4:	080051d3 	.word	0x080051d3
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	602a      	str	r2, [r5, #0]
 8005100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005108:	2301      	movs	r3, #1
 800510a:	e09f      	b.n	800524c <_printf_i+0x1ec>
 800510c:	6820      	ldr	r0, [r4, #0]
 800510e:	682b      	ldr	r3, [r5, #0]
 8005110:	0607      	lsls	r7, r0, #24
 8005112:	f103 0104 	add.w	r1, r3, #4
 8005116:	6029      	str	r1, [r5, #0]
 8005118:	d501      	bpl.n	800511e <_printf_i+0xbe>
 800511a:	681e      	ldr	r6, [r3, #0]
 800511c:	e003      	b.n	8005126 <_printf_i+0xc6>
 800511e:	0646      	lsls	r6, r0, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0xba>
 8005122:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005126:	2e00      	cmp	r6, #0
 8005128:	da03      	bge.n	8005132 <_printf_i+0xd2>
 800512a:	232d      	movs	r3, #45	; 0x2d
 800512c:	4276      	negs	r6, r6
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005132:	485a      	ldr	r0, [pc, #360]	; (800529c <_printf_i+0x23c>)
 8005134:	230a      	movs	r3, #10
 8005136:	e012      	b.n	800515e <_printf_i+0xfe>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	1d19      	adds	r1, r3, #4
 800513e:	6029      	str	r1, [r5, #0]
 8005140:	0605      	lsls	r5, r0, #24
 8005142:	d501      	bpl.n	8005148 <_printf_i+0xe8>
 8005144:	681e      	ldr	r6, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0xee>
 8005148:	0641      	lsls	r1, r0, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0xe4>
 800514c:	881e      	ldrh	r6, [r3, #0]
 800514e:	4853      	ldr	r0, [pc, #332]	; (800529c <_printf_i+0x23c>)
 8005150:	2f6f      	cmp	r7, #111	; 0x6f
 8005152:	bf0c      	ite	eq
 8005154:	2308      	moveq	r3, #8
 8005156:	230a      	movne	r3, #10
 8005158:	2100      	movs	r1, #0
 800515a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515e:	6865      	ldr	r5, [r4, #4]
 8005160:	60a5      	str	r5, [r4, #8]
 8005162:	2d00      	cmp	r5, #0
 8005164:	bfa2      	ittt	ge
 8005166:	6821      	ldrge	r1, [r4, #0]
 8005168:	f021 0104 	bicge.w	r1, r1, #4
 800516c:	6021      	strge	r1, [r4, #0]
 800516e:	b90e      	cbnz	r6, 8005174 <_printf_i+0x114>
 8005170:	2d00      	cmp	r5, #0
 8005172:	d04b      	beq.n	800520c <_printf_i+0x1ac>
 8005174:	4615      	mov	r5, r2
 8005176:	fbb6 f1f3 	udiv	r1, r6, r3
 800517a:	fb03 6711 	mls	r7, r3, r1, r6
 800517e:	5dc7      	ldrb	r7, [r0, r7]
 8005180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005184:	4637      	mov	r7, r6
 8005186:	42bb      	cmp	r3, r7
 8005188:	460e      	mov	r6, r1
 800518a:	d9f4      	bls.n	8005176 <_printf_i+0x116>
 800518c:	2b08      	cmp	r3, #8
 800518e:	d10b      	bne.n	80051a8 <_printf_i+0x148>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07de      	lsls	r6, r3, #31
 8005194:	d508      	bpl.n	80051a8 <_printf_i+0x148>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	6861      	ldr	r1, [r4, #4]
 800519a:	4299      	cmp	r1, r3
 800519c:	bfde      	ittt	le
 800519e:	2330      	movle	r3, #48	; 0x30
 80051a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051a8:	1b52      	subs	r2, r2, r5
 80051aa:	6122      	str	r2, [r4, #16]
 80051ac:	f8cd a000 	str.w	sl, [sp]
 80051b0:	464b      	mov	r3, r9
 80051b2:	aa03      	add	r2, sp, #12
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff fee4 	bl	8004f84 <_printf_common>
 80051bc:	3001      	adds	r0, #1
 80051be:	d14a      	bne.n	8005256 <_printf_i+0x1f6>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	b004      	add	sp, #16
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	f043 0320 	orr.w	r3, r3, #32
 80051d0:	6023      	str	r3, [r4, #0]
 80051d2:	4833      	ldr	r0, [pc, #204]	; (80052a0 <_printf_i+0x240>)
 80051d4:	2778      	movs	r7, #120	; 0x78
 80051d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	6829      	ldr	r1, [r5, #0]
 80051de:	061f      	lsls	r7, r3, #24
 80051e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e4:	d402      	bmi.n	80051ec <_printf_i+0x18c>
 80051e6:	065f      	lsls	r7, r3, #25
 80051e8:	bf48      	it	mi
 80051ea:	b2b6      	uxthmi	r6, r6
 80051ec:	07df      	lsls	r7, r3, #31
 80051ee:	bf48      	it	mi
 80051f0:	f043 0320 	orrmi.w	r3, r3, #32
 80051f4:	6029      	str	r1, [r5, #0]
 80051f6:	bf48      	it	mi
 80051f8:	6023      	strmi	r3, [r4, #0]
 80051fa:	b91e      	cbnz	r6, 8005204 <_printf_i+0x1a4>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	f023 0320 	bic.w	r3, r3, #32
 8005202:	6023      	str	r3, [r4, #0]
 8005204:	2310      	movs	r3, #16
 8005206:	e7a7      	b.n	8005158 <_printf_i+0xf8>
 8005208:	4824      	ldr	r0, [pc, #144]	; (800529c <_printf_i+0x23c>)
 800520a:	e7e4      	b.n	80051d6 <_printf_i+0x176>
 800520c:	4615      	mov	r5, r2
 800520e:	e7bd      	b.n	800518c <_printf_i+0x12c>
 8005210:	682b      	ldr	r3, [r5, #0]
 8005212:	6826      	ldr	r6, [r4, #0]
 8005214:	6961      	ldr	r1, [r4, #20]
 8005216:	1d18      	adds	r0, r3, #4
 8005218:	6028      	str	r0, [r5, #0]
 800521a:	0635      	lsls	r5, r6, #24
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	d501      	bpl.n	8005224 <_printf_i+0x1c4>
 8005220:	6019      	str	r1, [r3, #0]
 8005222:	e002      	b.n	800522a <_printf_i+0x1ca>
 8005224:	0670      	lsls	r0, r6, #25
 8005226:	d5fb      	bpl.n	8005220 <_printf_i+0x1c0>
 8005228:	8019      	strh	r1, [r3, #0]
 800522a:	2300      	movs	r3, #0
 800522c:	6123      	str	r3, [r4, #16]
 800522e:	4615      	mov	r5, r2
 8005230:	e7bc      	b.n	80051ac <_printf_i+0x14c>
 8005232:	682b      	ldr	r3, [r5, #0]
 8005234:	1d1a      	adds	r2, r3, #4
 8005236:	602a      	str	r2, [r5, #0]
 8005238:	681d      	ldr	r5, [r3, #0]
 800523a:	6862      	ldr	r2, [r4, #4]
 800523c:	2100      	movs	r1, #0
 800523e:	4628      	mov	r0, r5
 8005240:	f7fa ffc6 	bl	80001d0 <memchr>
 8005244:	b108      	cbz	r0, 800524a <_printf_i+0x1ea>
 8005246:	1b40      	subs	r0, r0, r5
 8005248:	6060      	str	r0, [r4, #4]
 800524a:	6863      	ldr	r3, [r4, #4]
 800524c:	6123      	str	r3, [r4, #16]
 800524e:	2300      	movs	r3, #0
 8005250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005254:	e7aa      	b.n	80051ac <_printf_i+0x14c>
 8005256:	6923      	ldr	r3, [r4, #16]
 8005258:	462a      	mov	r2, r5
 800525a:	4649      	mov	r1, r9
 800525c:	4640      	mov	r0, r8
 800525e:	47d0      	blx	sl
 8005260:	3001      	adds	r0, #1
 8005262:	d0ad      	beq.n	80051c0 <_printf_i+0x160>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	079b      	lsls	r3, r3, #30
 8005268:	d413      	bmi.n	8005292 <_printf_i+0x232>
 800526a:	68e0      	ldr	r0, [r4, #12]
 800526c:	9b03      	ldr	r3, [sp, #12]
 800526e:	4298      	cmp	r0, r3
 8005270:	bfb8      	it	lt
 8005272:	4618      	movlt	r0, r3
 8005274:	e7a6      	b.n	80051c4 <_printf_i+0x164>
 8005276:	2301      	movs	r3, #1
 8005278:	4632      	mov	r2, r6
 800527a:	4649      	mov	r1, r9
 800527c:	4640      	mov	r0, r8
 800527e:	47d0      	blx	sl
 8005280:	3001      	adds	r0, #1
 8005282:	d09d      	beq.n	80051c0 <_printf_i+0x160>
 8005284:	3501      	adds	r5, #1
 8005286:	68e3      	ldr	r3, [r4, #12]
 8005288:	9903      	ldr	r1, [sp, #12]
 800528a:	1a5b      	subs	r3, r3, r1
 800528c:	42ab      	cmp	r3, r5
 800528e:	dcf2      	bgt.n	8005276 <_printf_i+0x216>
 8005290:	e7eb      	b.n	800526a <_printf_i+0x20a>
 8005292:	2500      	movs	r5, #0
 8005294:	f104 0619 	add.w	r6, r4, #25
 8005298:	e7f5      	b.n	8005286 <_printf_i+0x226>
 800529a:	bf00      	nop
 800529c:	080055d9 	.word	0x080055d9
 80052a0:	080055ea 	.word	0x080055ea

080052a4 <__sflush_r>:
 80052a4:	898a      	ldrh	r2, [r1, #12]
 80052a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	4605      	mov	r5, r0
 80052ac:	0710      	lsls	r0, r2, #28
 80052ae:	460c      	mov	r4, r1
 80052b0:	d458      	bmi.n	8005364 <__sflush_r+0xc0>
 80052b2:	684b      	ldr	r3, [r1, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	dc05      	bgt.n	80052c4 <__sflush_r+0x20>
 80052b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	dc02      	bgt.n	80052c4 <__sflush_r+0x20>
 80052be:	2000      	movs	r0, #0
 80052c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052c6:	2e00      	cmp	r6, #0
 80052c8:	d0f9      	beq.n	80052be <__sflush_r+0x1a>
 80052ca:	2300      	movs	r3, #0
 80052cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052d0:	682f      	ldr	r7, [r5, #0]
 80052d2:	6a21      	ldr	r1, [r4, #32]
 80052d4:	602b      	str	r3, [r5, #0]
 80052d6:	d032      	beq.n	800533e <__sflush_r+0x9a>
 80052d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	075a      	lsls	r2, r3, #29
 80052de:	d505      	bpl.n	80052ec <__sflush_r+0x48>
 80052e0:	6863      	ldr	r3, [r4, #4]
 80052e2:	1ac0      	subs	r0, r0, r3
 80052e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052e6:	b10b      	cbz	r3, 80052ec <__sflush_r+0x48>
 80052e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ea:	1ac0      	subs	r0, r0, r3
 80052ec:	2300      	movs	r3, #0
 80052ee:	4602      	mov	r2, r0
 80052f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f2:	6a21      	ldr	r1, [r4, #32]
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b0      	blx	r6
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	89a3      	ldrh	r3, [r4, #12]
 80052fc:	d106      	bne.n	800530c <__sflush_r+0x68>
 80052fe:	6829      	ldr	r1, [r5, #0]
 8005300:	291d      	cmp	r1, #29
 8005302:	d82b      	bhi.n	800535c <__sflush_r+0xb8>
 8005304:	4a29      	ldr	r2, [pc, #164]	; (80053ac <__sflush_r+0x108>)
 8005306:	410a      	asrs	r2, r1
 8005308:	07d6      	lsls	r6, r2, #31
 800530a:	d427      	bmi.n	800535c <__sflush_r+0xb8>
 800530c:	2200      	movs	r2, #0
 800530e:	6062      	str	r2, [r4, #4]
 8005310:	04d9      	lsls	r1, r3, #19
 8005312:	6922      	ldr	r2, [r4, #16]
 8005314:	6022      	str	r2, [r4, #0]
 8005316:	d504      	bpl.n	8005322 <__sflush_r+0x7e>
 8005318:	1c42      	adds	r2, r0, #1
 800531a:	d101      	bne.n	8005320 <__sflush_r+0x7c>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	b903      	cbnz	r3, 8005322 <__sflush_r+0x7e>
 8005320:	6560      	str	r0, [r4, #84]	; 0x54
 8005322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005324:	602f      	str	r7, [r5, #0]
 8005326:	2900      	cmp	r1, #0
 8005328:	d0c9      	beq.n	80052be <__sflush_r+0x1a>
 800532a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800532e:	4299      	cmp	r1, r3
 8005330:	d002      	beq.n	8005338 <__sflush_r+0x94>
 8005332:	4628      	mov	r0, r5
 8005334:	f7ff fbea 	bl	8004b0c <_free_r>
 8005338:	2000      	movs	r0, #0
 800533a:	6360      	str	r0, [r4, #52]	; 0x34
 800533c:	e7c0      	b.n	80052c0 <__sflush_r+0x1c>
 800533e:	2301      	movs	r3, #1
 8005340:	4628      	mov	r0, r5
 8005342:	47b0      	blx	r6
 8005344:	1c41      	adds	r1, r0, #1
 8005346:	d1c8      	bne.n	80052da <__sflush_r+0x36>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d0c5      	beq.n	80052da <__sflush_r+0x36>
 800534e:	2b1d      	cmp	r3, #29
 8005350:	d001      	beq.n	8005356 <__sflush_r+0xb2>
 8005352:	2b16      	cmp	r3, #22
 8005354:	d101      	bne.n	800535a <__sflush_r+0xb6>
 8005356:	602f      	str	r7, [r5, #0]
 8005358:	e7b1      	b.n	80052be <__sflush_r+0x1a>
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005360:	81a3      	strh	r3, [r4, #12]
 8005362:	e7ad      	b.n	80052c0 <__sflush_r+0x1c>
 8005364:	690f      	ldr	r7, [r1, #16]
 8005366:	2f00      	cmp	r7, #0
 8005368:	d0a9      	beq.n	80052be <__sflush_r+0x1a>
 800536a:	0793      	lsls	r3, r2, #30
 800536c:	680e      	ldr	r6, [r1, #0]
 800536e:	bf08      	it	eq
 8005370:	694b      	ldreq	r3, [r1, #20]
 8005372:	600f      	str	r7, [r1, #0]
 8005374:	bf18      	it	ne
 8005376:	2300      	movne	r3, #0
 8005378:	eba6 0807 	sub.w	r8, r6, r7
 800537c:	608b      	str	r3, [r1, #8]
 800537e:	f1b8 0f00 	cmp.w	r8, #0
 8005382:	dd9c      	ble.n	80052be <__sflush_r+0x1a>
 8005384:	6a21      	ldr	r1, [r4, #32]
 8005386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005388:	4643      	mov	r3, r8
 800538a:	463a      	mov	r2, r7
 800538c:	4628      	mov	r0, r5
 800538e:	47b0      	blx	r6
 8005390:	2800      	cmp	r0, #0
 8005392:	dc06      	bgt.n	80053a2 <__sflush_r+0xfe>
 8005394:	89a3      	ldrh	r3, [r4, #12]
 8005396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800539a:	81a3      	strh	r3, [r4, #12]
 800539c:	f04f 30ff 	mov.w	r0, #4294967295
 80053a0:	e78e      	b.n	80052c0 <__sflush_r+0x1c>
 80053a2:	4407      	add	r7, r0
 80053a4:	eba8 0800 	sub.w	r8, r8, r0
 80053a8:	e7e9      	b.n	800537e <__sflush_r+0xda>
 80053aa:	bf00      	nop
 80053ac:	dfbffffe 	.word	0xdfbffffe

080053b0 <_fflush_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	690b      	ldr	r3, [r1, #16]
 80053b4:	4605      	mov	r5, r0
 80053b6:	460c      	mov	r4, r1
 80053b8:	b913      	cbnz	r3, 80053c0 <_fflush_r+0x10>
 80053ba:	2500      	movs	r5, #0
 80053bc:	4628      	mov	r0, r5
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	b118      	cbz	r0, 80053ca <_fflush_r+0x1a>
 80053c2:	6a03      	ldr	r3, [r0, #32]
 80053c4:	b90b      	cbnz	r3, 80053ca <_fflush_r+0x1a>
 80053c6:	f7ff f9ab 	bl	8004720 <__sinit>
 80053ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f3      	beq.n	80053ba <_fflush_r+0xa>
 80053d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053d4:	07d0      	lsls	r0, r2, #31
 80053d6:	d404      	bmi.n	80053e2 <_fflush_r+0x32>
 80053d8:	0599      	lsls	r1, r3, #22
 80053da:	d402      	bmi.n	80053e2 <_fflush_r+0x32>
 80053dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053de:	f7ff fb93 	bl	8004b08 <__retarget_lock_acquire_recursive>
 80053e2:	4628      	mov	r0, r5
 80053e4:	4621      	mov	r1, r4
 80053e6:	f7ff ff5d 	bl	80052a4 <__sflush_r>
 80053ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ec:	07da      	lsls	r2, r3, #31
 80053ee:	4605      	mov	r5, r0
 80053f0:	d4e4      	bmi.n	80053bc <_fflush_r+0xc>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	059b      	lsls	r3, r3, #22
 80053f6:	d4e1      	bmi.n	80053bc <_fflush_r+0xc>
 80053f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fa:	f7ff fb86 	bl	8004b0a <__retarget_lock_release_recursive>
 80053fe:	e7dd      	b.n	80053bc <_fflush_r+0xc>

08005400 <__swhatbuf_r>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	460c      	mov	r4, r1
 8005404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005408:	2900      	cmp	r1, #0
 800540a:	b096      	sub	sp, #88	; 0x58
 800540c:	4615      	mov	r5, r2
 800540e:	461e      	mov	r6, r3
 8005410:	da0d      	bge.n	800542e <__swhatbuf_r+0x2e>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	bf0c      	ite	eq
 800541e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005422:	2340      	movne	r3, #64	; 0x40
 8005424:	2000      	movs	r0, #0
 8005426:	6031      	str	r1, [r6, #0]
 8005428:	602b      	str	r3, [r5, #0]
 800542a:	b016      	add	sp, #88	; 0x58
 800542c:	bd70      	pop	{r4, r5, r6, pc}
 800542e:	466a      	mov	r2, sp
 8005430:	f000 f848 	bl	80054c4 <_fstat_r>
 8005434:	2800      	cmp	r0, #0
 8005436:	dbec      	blt.n	8005412 <__swhatbuf_r+0x12>
 8005438:	9901      	ldr	r1, [sp, #4]
 800543a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800543e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005442:	4259      	negs	r1, r3
 8005444:	4159      	adcs	r1, r3
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	e7eb      	b.n	8005424 <__swhatbuf_r+0x24>

0800544c <__smakebuf_r>:
 800544c:	898b      	ldrh	r3, [r1, #12]
 800544e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005450:	079d      	lsls	r5, r3, #30
 8005452:	4606      	mov	r6, r0
 8005454:	460c      	mov	r4, r1
 8005456:	d507      	bpl.n	8005468 <__smakebuf_r+0x1c>
 8005458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	6123      	str	r3, [r4, #16]
 8005460:	2301      	movs	r3, #1
 8005462:	6163      	str	r3, [r4, #20]
 8005464:	b002      	add	sp, #8
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	ab01      	add	r3, sp, #4
 800546a:	466a      	mov	r2, sp
 800546c:	f7ff ffc8 	bl	8005400 <__swhatbuf_r>
 8005470:	9900      	ldr	r1, [sp, #0]
 8005472:	4605      	mov	r5, r0
 8005474:	4630      	mov	r0, r6
 8005476:	f7ff fbb5 	bl	8004be4 <_malloc_r>
 800547a:	b948      	cbnz	r0, 8005490 <__smakebuf_r+0x44>
 800547c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005480:	059a      	lsls	r2, r3, #22
 8005482:	d4ef      	bmi.n	8005464 <__smakebuf_r+0x18>
 8005484:	f023 0303 	bic.w	r3, r3, #3
 8005488:	f043 0302 	orr.w	r3, r3, #2
 800548c:	81a3      	strh	r3, [r4, #12]
 800548e:	e7e3      	b.n	8005458 <__smakebuf_r+0xc>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	6020      	str	r0, [r4, #0]
 8005494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	9b00      	ldr	r3, [sp, #0]
 800549c:	6163      	str	r3, [r4, #20]
 800549e:	9b01      	ldr	r3, [sp, #4]
 80054a0:	6120      	str	r0, [r4, #16]
 80054a2:	b15b      	cbz	r3, 80054bc <__smakebuf_r+0x70>
 80054a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a8:	4630      	mov	r0, r6
 80054aa:	f000 f81d 	bl	80054e8 <_isatty_r>
 80054ae:	b128      	cbz	r0, 80054bc <__smakebuf_r+0x70>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	f023 0303 	bic.w	r3, r3, #3
 80054b6:	f043 0301 	orr.w	r3, r3, #1
 80054ba:	81a3      	strh	r3, [r4, #12]
 80054bc:	89a3      	ldrh	r3, [r4, #12]
 80054be:	431d      	orrs	r5, r3
 80054c0:	81a5      	strh	r5, [r4, #12]
 80054c2:	e7cf      	b.n	8005464 <__smakebuf_r+0x18>

080054c4 <_fstat_r>:
 80054c4:	b538      	push	{r3, r4, r5, lr}
 80054c6:	4d07      	ldr	r5, [pc, #28]	; (80054e4 <_fstat_r+0x20>)
 80054c8:	2300      	movs	r3, #0
 80054ca:	4604      	mov	r4, r0
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	602b      	str	r3, [r5, #0]
 80054d2:	f7fb fd1e 	bl	8000f12 <_fstat>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d102      	bne.n	80054e0 <_fstat_r+0x1c>
 80054da:	682b      	ldr	r3, [r5, #0]
 80054dc:	b103      	cbz	r3, 80054e0 <_fstat_r+0x1c>
 80054de:	6023      	str	r3, [r4, #0]
 80054e0:	bd38      	pop	{r3, r4, r5, pc}
 80054e2:	bf00      	nop
 80054e4:	20000278 	.word	0x20000278

080054e8 <_isatty_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d06      	ldr	r5, [pc, #24]	; (8005504 <_isatty_r+0x1c>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	f7fb fd1d 	bl	8000f32 <_isatty>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_isatty_r+0x1a>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_isatty_r+0x1a>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	20000278 	.word	0x20000278

08005508 <_sbrk_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d06      	ldr	r5, [pc, #24]	; (8005524 <_sbrk_r+0x1c>)
 800550c:	2300      	movs	r3, #0
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	602b      	str	r3, [r5, #0]
 8005514:	f7fb fd26 	bl	8000f64 <_sbrk>
 8005518:	1c43      	adds	r3, r0, #1
 800551a:	d102      	bne.n	8005522 <_sbrk_r+0x1a>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	b103      	cbz	r3, 8005522 <_sbrk_r+0x1a>
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	bd38      	pop	{r3, r4, r5, pc}
 8005524:	20000278 	.word	0x20000278

08005528 <_init>:
 8005528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552a:	bf00      	nop
 800552c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800552e:	bc08      	pop	{r3}
 8005530:	469e      	mov	lr, r3
 8005532:	4770      	bx	lr

08005534 <_fini>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	bf00      	nop
 8005538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553a:	bc08      	pop	{r3}
 800553c:	469e      	mov	lr, r3
 800553e:	4770      	bx	lr
