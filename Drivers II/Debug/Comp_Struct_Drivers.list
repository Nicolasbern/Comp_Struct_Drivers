
Comp_Struct_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005124  08005124  00015124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051ac  080051ac  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080051ac  080051ac  000151ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b4  080051b4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  08005224  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005224  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cb6c  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020aa  00000000  00000000  0002cc47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ac8  00000000  00000000  0002ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000082f  00000000  00000000  0002f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000269fe  00000000  00000000  0002ffef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d4bd  00000000  00000000  000569ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e981b  00000000  00000000  00063eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000323c  00000000  00000000  0014d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00150904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800510c 	.word	0x0800510c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800510c 	.word	0x0800510c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 800056c:	b580      	push	{r7, lr}
 800056e:	b084      	sub	sp, #16
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	b29a      	uxth	r2, r3
 800057c:	f04f 33ff 	mov.w	r3, #4294967295
 8000580:	68b9      	ldr	r1, [r7, #8]
 8000582:	4804      	ldr	r0, [pc, #16]	; (8000594 <_write+0x28>)
 8000584:	f002 fb24 	bl	8002bd0 <HAL_UART_Transmit>
	return len;
 8000588:	687b      	ldr	r3, [r7, #4]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000084 	.word	0x20000084

08000598 <HAL_UART_RxCpltCallback>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	ring_buffer_put(&ring_buffer_uart_rx, rx_data);
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_UART_RxCpltCallback+0x28>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4619      	mov	r1, r3
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <HAL_UART_RxCpltCallback+0x2c>)
 80005a8:	f000 f98b 	bl	80008c2 <ring_buffer_put>
	HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005ac:	2201      	movs	r2, #1
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <HAL_UART_RxCpltCallback+0x28>)
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <HAL_UART_RxCpltCallback+0x30>)
 80005b2:	f002 fb97 	bl	8002ce4 <HAL_UART_Receive_IT>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	20000128 	.word	0x20000128
 80005c4:	2000011c 	.word	0x2000011c
 80005c8:	20000084 	.word	0x20000084

080005cc <main>:
int main(void)
{
 80005cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fb9c 	bl	8000d10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f86a 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f8ea 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e0:	f000 f8b8 	bl	8000754 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
ring_buffer_init(&ring_buffer_uart_rx,rx_buffer,16);
 80005e4:	2210      	movs	r2, #16
 80005e6:	492d      	ldr	r1, [pc, #180]	; (800069c <main+0xd0>)
 80005e8:	482d      	ldr	r0, [pc, #180]	; (80006a0 <main+0xd4>)
 80005ea:	f000 f94e 	bl	800088a <ring_buffer_init>

HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 80005ee:	2201      	movs	r2, #1
 80005f0:	492c      	ldr	r1, [pc, #176]	; (80006a4 <main+0xd8>)
 80005f2:	482d      	ldr	r0, [pc, #180]	; (80006a8 <main+0xdc>)
 80005f4:	f002 fb76 	bl	8002ce4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 uint16_t size = ring_buffer_size(&ring_buffer_uart_rx);
 80005f8:	4829      	ldr	r0, [pc, #164]	; (80006a0 <main+0xd4>)
 80005fa:	f000 f9c9 	bl	8000990 <ring_buffer_size>
 80005fe:	4603      	mov	r3, r0
 8000600:	81bb      	strh	r3, [r7, #12]
	 if (size != 0) {
 8000602:	89bb      	ldrh	r3, [r7, #12]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d044      	beq.n	8000692 <main+0xc6>
 8000608:	466b      	mov	r3, sp
 800060a:	461e      	mov	r6, r3
		 uint8_t rx_array[size + 1];
 800060c:	89bb      	ldrh	r3, [r7, #12]
 800060e:	1c59      	adds	r1, r3, #1
 8000610:	1e4b      	subs	r3, r1, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	460a      	mov	r2, r1
 8000616:	2300      	movs	r3, #0
 8000618:	4614      	mov	r4, r2
 800061a:	461d      	mov	r5, r3
 800061c:	f04f 0200 	mov.w	r2, #0
 8000620:	f04f 0300 	mov.w	r3, #0
 8000624:	00eb      	lsls	r3, r5, #3
 8000626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800062a:	00e2      	lsls	r2, r4, #3
 800062c:	460a      	mov	r2, r1
 800062e:	2300      	movs	r3, #0
 8000630:	4690      	mov	r8, r2
 8000632:	4699      	mov	r9, r3
 8000634:	f04f 0200 	mov.w	r2, #0
 8000638:	f04f 0300 	mov.w	r3, #0
 800063c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000640:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000644:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000648:	460b      	mov	r3, r1
 800064a:	3307      	adds	r3, #7
 800064c:	08db      	lsrs	r3, r3, #3
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	ebad 0d03 	sub.w	sp, sp, r3
 8000654:	466b      	mov	r3, sp
 8000656:	3300      	adds	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
		 for (uint16_t idx = 0; idx < size; idx++) {
 800065a:	2300      	movs	r3, #0
 800065c:	81fb      	strh	r3, [r7, #14]
 800065e:	e00b      	b.n	8000678 <main+0xac>
			 uint8_t rx_val = 50;
 8000660:	2332      	movs	r3, #50	; 0x32
 8000662:	70fb      	strb	r3, [r7, #3]
			 ring_buffer_get(&ring_buffer_uart_rx, &rx_array[idx]);
 8000664:	89fb      	ldrh	r3, [r7, #14]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	4413      	add	r3, r2
 800066a:	4619      	mov	r1, r3
 800066c:	480c      	ldr	r0, [pc, #48]	; (80006a0 <main+0xd4>)
 800066e:	f000 f965 	bl	800093c <ring_buffer_get>
		 for (uint16_t idx = 0; idx < size; idx++) {
 8000672:	89fb      	ldrh	r3, [r7, #14]
 8000674:	3301      	adds	r3, #1
 8000676:	81fb      	strh	r3, [r7, #14]
 8000678:	89fa      	ldrh	r2, [r7, #14]
 800067a:	89bb      	ldrh	r3, [r7, #12]
 800067c:	429a      	cmp	r2, r3
 800067e:	d3ef      	bcc.n	8000660 <main+0x94>
		 }
		 rx_array[size] = 0;
 8000680:	89bb      	ldrh	r3, [r7, #12]
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	2100      	movs	r1, #0
 8000686:	54d1      	strb	r1, [r2, r3]
		 printf("Rec: %s\r\n", rx_array);
 8000688:	6879      	ldr	r1, [r7, #4]
 800068a:	4808      	ldr	r0, [pc, #32]	; (80006ac <main+0xe0>)
 800068c:	f003 feca 	bl	8004424 <iprintf>
 8000690:	46b5      	mov	sp, r6
	 }
	 HAL_Delay(1000);
 8000692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000696:	f000 fbb7 	bl	8000e08 <HAL_Delay>
  {
 800069a:	e7ad      	b.n	80005f8 <main+0x2c>
 800069c:	2000010c 	.word	0x2000010c
 80006a0:	2000011c 	.word	0x2000011c
 80006a4:	20000128 	.word	0x20000128
 80006a8:	20000084 	.word	0x20000084
 80006ac:	08005124 	.word	0x08005124

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b096      	sub	sp, #88	; 0x58
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	2244      	movs	r2, #68	; 0x44
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 ff05 	bl	80044ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	463b      	mov	r3, r7
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d6:	f000 ff1b 	bl	8001510 <HAL_PWREx_ControlVoltageScaling>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e0:	f000 f8ce 	bl	8000880 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f6:	2302      	movs	r3, #2
 80006f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006fe:	230a      	movs	r3, #10
 8000700:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4618      	mov	r0, r3
 8000714:	f000 ff52 	bl	80015bc <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800071e:	f000 f8af 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2303      	movs	r3, #3
 8000728:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000736:	463b      	mov	r3, r7
 8000738:	2104      	movs	r1, #4
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fb1a 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000746:	f000 f89b 	bl	8000880 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3758      	adds	r7, #88	; 0x58
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART2_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000798:	f002 f9cc 	bl	8002b34 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f86d 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000084 	.word	0x20000084
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b2b      	ldr	r3, [pc, #172]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b28      	ldr	r3, [pc, #160]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	4b25      	ldr	r3, [pc, #148]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a24      	ldr	r2, [pc, #144]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b22      	ldr	r3, [pc, #136]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a18      	ldr	r2, [pc, #96]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2120      	movs	r1, #32
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f000 fe47 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000836:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0xc8>)
 800084e:	f000 fc8f 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086c:	f000 fc80 	bl	8001170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	; 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	48000800 	.word	0x48000800

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>

0800088a <ring_buffer_init>:
 *      Author: valer
 */
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer_t *ring_buffer, uint8_t *buffer, uint16_t capacity)
{
 800088a:	b480      	push	{r7}
 800088c:	b085      	sub	sp, #20
 800088e:	af00      	add	r7, sp, #0
 8000890:	60f8      	str	r0, [r7, #12]
 8000892:	60b9      	str	r1, [r7, #8]
 8000894:	4613      	mov	r3, r2
 8000896:	80fb      	strh	r3, [r7, #6]
	ring_buffer->buffer = buffer;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68ba      	ldr	r2, [r7, #8]
 800089c:	601a      	str	r2, [r3, #0]
	ring_buffer->capacity = capacity;
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	88fa      	ldrh	r2, [r7, #6]
 80008a2:	811a      	strh	r2, [r3, #8]
	ring_buffer->head = 0;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2200      	movs	r2, #0
 80008a8:	809a      	strh	r2, [r3, #4]
	ring_buffer->tail = 0;
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	2200      	movs	r2, #0
 80008ae:	80da      	strh	r2, [r3, #6]
	ring_buffer->is_full = 0;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2200      	movs	r2, #0
 80008b4:	729a      	strb	r2, [r3, #10]
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <ring_buffer_put>:
uint8_t ring_buffer_put(ring_buffer_t *ring_buffer,uint8_t data)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	460b      	mov	r3, r1
 80008cc:	70fb      	strb	r3, [r7, #3]
	ring_buffer->buffer[ring_buffer->head] = data;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	8892      	ldrh	r2, [r2, #4]
 80008d6:	4413      	add	r3, r2
 80008d8:	78fa      	ldrb	r2, [r7, #3]
 80008da:	701a      	strb	r2, [r3, #0]
	ring_buffer->head = (ring_buffer->head +1 ) % ring_buffer->capacity;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	889b      	ldrh	r3, [r3, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	8912      	ldrh	r2, [r2, #8]
 80008e6:	fb93 f1f2 	sdiv	r1, r3, r2
 80008ea:	fb01 f202 	mul.w	r2, r1, r2
 80008ee:	1a9b      	subs	r3, r3, r2
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	809a      	strh	r2, [r3, #4]

	if (ring_buffer->is_full != 0){
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a9b      	ldrb	r3, [r3, #10]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <ring_buffer_put+0x56>
		ring_buffer->tail = (ring_buffer->tail+1) % ring_buffer->capacity;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	88db      	ldrh	r3, [r3, #6]
 8000902:	3301      	adds	r3, #1
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	8912      	ldrh	r2, [r2, #8]
 8000908:	fb93 f1f2 	sdiv	r1, r3, r2
 800090c:	fb01 f202 	mul.w	r2, r1, r2
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	b29a      	uxth	r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	80da      	strh	r2, [r3, #6]
	}
	if (ring_buffer->head == ring_buffer->tail){
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	889a      	ldrh	r2, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	88db      	ldrh	r3, [r3, #6]
 8000920:	429a      	cmp	r2, r3
 8000922:	d104      	bne.n	800092e <ring_buffer_put+0x6c>
		ring_buffer->is_full = 1;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2201      	movs	r2, #1
 8000928:	729a      	strb	r2, [r3, #10]
		return 0;
 800092a:	2300      	movs	r3, #0
 800092c:	e000      	b.n	8000930 <ring_buffer_put+0x6e>
		}
	return 1;
 800092e:	2301      	movs	r3, #1
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <ring_buffer_get>:

uint8_t ring_buffer_get(ring_buffer_t *ring_buffer, uint8_t *data)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
	if(ring_buffer_is_empty(ring_buffer) == 0/*(ring_buffer->is_full != 0) || (ring_buffer->tail != ring_buffer->head)*/){
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 f84a 	bl	80009e0 <ring_buffer_is_empty>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d119      	bne.n	8000986 <ring_buffer_get+0x4a>
		*data = ring_buffer->buffer[ring_buffer->tail];
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	88d2      	ldrh	r2, [r2, #6]
 800095a:	4413      	add	r3, r2
 800095c:	781a      	ldrb	r2, [r3, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	701a      	strb	r2, [r3, #0]
		ring_buffer->tail = (ring_buffer->tail+1) % ring_buffer->capacity;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	88db      	ldrh	r3, [r3, #6]
 8000966:	3301      	adds	r3, #1
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	8912      	ldrh	r2, [r2, #8]
 800096c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000970:	fb01 f202 	mul.w	r2, r1, r2
 8000974:	1a9b      	subs	r3, r3, r2
 8000976:	b29a      	uxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	80da      	strh	r2, [r3, #6]
		ring_buffer->is_full = 0;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	729a      	strb	r2, [r3, #10]
		return 1;
 8000982:	2301      	movs	r3, #1
 8000984:	e000      	b.n	8000988 <ring_buffer_get+0x4c>

	}
	return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <ring_buffer_size>:

uint16_t ring_buffer_size(ring_buffer_t * ring_buffer)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	81fb      	strh	r3, [r7, #14]

		if ((ring_buffer->is_full == 0)&&(ring_buffer->tail <= ring_buffer->head)){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7a9b      	ldrb	r3, [r3, #10]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d10c      	bne.n	80009be <ring_buffer_size+0x2e>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	88da      	ldrh	r2, [r3, #6]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	889b      	ldrh	r3, [r3, #4]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d806      	bhi.n	80009be <ring_buffer_size+0x2e>
			size = ring_buffer->head - ring_buffer->tail;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	889a      	ldrh	r2, [r3, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	88db      	ldrh	r3, [r3, #6]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	81fb      	strh	r3, [r7, #14]
 80009bc:	e009      	b.n	80009d2 <ring_buffer_size+0x42>
		} else {
			size = ring_buffer ->head +(ring_buffer->capacity - ring_buffer->tail);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	889a      	ldrh	r2, [r3, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	8919      	ldrh	r1, [r3, #8]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	88db      	ldrh	r3, [r3, #6]
 80009ca:	1acb      	subs	r3, r1, r3
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4413      	add	r3, r2
 80009d0:	81fb      	strh	r3, [r7, #14]
		}
	return size;
 80009d2:	89fb      	ldrh	r3, [r7, #14]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <ring_buffer_is_empty>:


uint8_t ring_buffer_is_empty(ring_buffer_t *ring_buffer)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	return (ring_buffer->is_full == 0)&&(ring_buffer->tail == ring_buffer->head);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	7a9b      	ldrb	r3, [r3, #10]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d107      	bne.n	8000a00 <ring_buffer_is_empty+0x20>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	88da      	ldrh	r2, [r3, #6]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	889b      	ldrh	r3, [r3, #4]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d101      	bne.n	8000a00 <ring_buffer_is_empty+0x20>
 80009fc:	2301      	movs	r3, #1
 80009fe:	e000      	b.n	8000a02 <ring_buffer_is_empty+0x22>
 8000a00:	2300      	movs	r3, #0
 8000a02:	b2db      	uxtb	r3, r3
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0ac      	sub	sp, #176	; 0xb0
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2288      	movs	r2, #136	; 0x88
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fd28 	bl	80044ce <memset>
  if(huart->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a25      	ldr	r2, [pc, #148]	; (8000b18 <HAL_UART_MspInit+0xc0>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d143      	bne.n	8000b10 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fb91 	bl	80021bc <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff feee 	bl	8000880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aae:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <HAL_UART_MspInit+0xc4>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aec:	2307      	movs	r3, #7
 8000aee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000af6:	4619      	mov	r1, r3
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f000 fb38 	bl	8001170 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2026      	movs	r0, #38	; 0x26
 8000b06:	f000 fa7e 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b0a:	2026      	movs	r0, #38	; 0x26
 8000b0c:	f000 fa97 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b10:	bf00      	nop
 8000b12:	37b0      	adds	r7, #176	; 0xb0
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40004400 	.word	0x40004400
 8000b1c:	40021000 	.word	0x40021000

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <NMI_Handler+0x4>

08000b26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <MemManage_Handler+0x4>

08000b32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f92c 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <USART2_IRQHandler+0x10>)
 8000b7a:	f002 f8ff 	bl	8002d7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000084 	.word	0x20000084

08000b88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
  }

  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
  return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f003 fc86 	bl	800456c <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20018000 	.word	0x20018000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000012c 	.word	0x2000012c
 8000c94:	20000280 	.word	0x20000280

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 fc45 	bl	8004578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fc6d 	bl	80005cc <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d00:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 8000d04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d08:	20000280 	.word	0x20000280

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>
	...

08000d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_Init+0x3c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_Init+0x3c>)
 8000d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d26:	2003      	movs	r0, #3
 8000d28:	f000 f962 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 f80f 	bl	8000d50 <HAL_InitTick>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d002      	beq.n	8000d3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	e001      	b.n	8000d42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3e:	f7ff fe67 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d42:	79fb      	ldrb	r3, [r7, #7]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40022000 	.word	0x40022000

08000d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d5c:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <HAL_InitTick+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d023      	beq.n	8000dac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_InitTick+0x70>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <HAL_InitTick+0x6c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 f96d 	bl	800105a <HAL_SYSTICK_Config>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10f      	bne.n	8000da6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d809      	bhi.n	8000da0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f937 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d98:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_InitTick+0x74>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	73fb      	strb	r3, [r7, #15]
 8000da4:	e004      	b.n	8000db0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	73fb      	strb	r3, [r7, #15]
 8000daa:	e001      	b.n	8000db0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000130 	.word	0x20000130

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000130 	.word	0x20000130

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e022      	b.n	80010e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020e 	bic.w	r2, r2, #14
 80010aa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0201 	bic.w	r2, r2, #1
 80010ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c0:	f003 021c 	and.w	r2, r3, #28
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	2101      	movs	r1, #1
 80010ca:	fa01 f202 	lsl.w	r2, r1, r2
 80010ce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b084      	sub	sp, #16
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d005      	beq.n	8001112 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2204      	movs	r2, #4
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e029      	b.n	8001166 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 020e 	bic.w	r2, r2, #14
 8001120:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0201 	bic.w	r2, r2, #1
 8001130:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f003 021c 	and.w	r2, r3, #28
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	2101      	movs	r1, #1
 8001140:	fa01 f202 	lsl.w	r2, r1, r2
 8001144:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2201      	movs	r2, #1
 800114a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	4798      	blx	r3
    }
  }
  return status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117e:	e17f      	b.n	8001480 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2101      	movs	r1, #1
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa01 f303 	lsl.w	r3, r1, r3
 800118c:	4013      	ands	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 8171 	beq.w	800147a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d005      	beq.n	80011b0 <HAL_GPIO_Init+0x40>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d130      	bne.n	8001212 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e6:	2201      	movs	r2, #1
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	f003 0201 	and.w	r2, r3, #1
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 0303 	and.w	r3, r3, #3
 800121a:	2b03      	cmp	r3, #3
 800121c:	d118      	bne.n	8001250 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001224:	2201      	movs	r2, #1
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	f003 0201 	and.w	r2, r3, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4313      	orrs	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b03      	cmp	r3, #3
 800125a:	d017      	beq.n	800128c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d123      	bne.n	80012e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	08da      	lsrs	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3208      	adds	r2, #8
 80012a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	693a      	ldr	r2, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	08da      	lsrs	r2, r3, #3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3208      	adds	r2, #8
 80012da:	6939      	ldr	r1, [r7, #16]
 80012dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	2203      	movs	r2, #3
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0203 	and.w	r2, r3, #3
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131c:	2b00      	cmp	r3, #0
 800131e:	f000 80ac 	beq.w	800147a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	4b5f      	ldr	r3, [pc, #380]	; (80014a0 <HAL_GPIO_Init+0x330>)
 8001324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001326:	4a5e      	ldr	r2, [pc, #376]	; (80014a0 <HAL_GPIO_Init+0x330>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6613      	str	r3, [r2, #96]	; 0x60
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <HAL_GPIO_Init+0x330>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800133a:	4a5a      	ldr	r2, [pc, #360]	; (80014a4 <HAL_GPIO_Init+0x334>)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001364:	d025      	beq.n	80013b2 <HAL_GPIO_Init+0x242>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4f      	ldr	r2, [pc, #316]	; (80014a8 <HAL_GPIO_Init+0x338>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d01f      	beq.n	80013ae <HAL_GPIO_Init+0x23e>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_GPIO_Init+0x33c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d019      	beq.n	80013aa <HAL_GPIO_Init+0x23a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <HAL_GPIO_Init+0x340>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x236>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a4c      	ldr	r2, [pc, #304]	; (80014b4 <HAL_GPIO_Init+0x344>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x232>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a4b      	ldr	r2, [pc, #300]	; (80014b8 <HAL_GPIO_Init+0x348>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x22e>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a4a      	ldr	r2, [pc, #296]	; (80014bc <HAL_GPIO_Init+0x34c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x22a>
 8001396:	2306      	movs	r3, #6
 8001398:	e00c      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 800139a:	2307      	movs	r3, #7
 800139c:	e00a      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 800139e:	2305      	movs	r3, #5
 80013a0:	e008      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 80013a2:	2304      	movs	r3, #4
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 80013a6:	2303      	movs	r3, #3
 80013a8:	e004      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 80013aa:	2302      	movs	r3, #2
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e000      	b.n	80013b4 <HAL_GPIO_Init+0x244>
 80013b2:	2300      	movs	r3, #0
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	f002 0203 	and.w	r2, r2, #3
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	4093      	lsls	r3, r2
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c4:	4937      	ldr	r1, [pc, #220]	; (80014a4 <HAL_GPIO_Init+0x334>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_GPIO_Init+0x350>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f6:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <HAL_GPIO_Init+0x350>)
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_GPIO_Init+0x350>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <HAL_GPIO_Init+0x350>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_GPIO_Init+0x350>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_GPIO_Init+0x350>)
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001450:	4b1b      	ldr	r3, [pc, #108]	; (80014c0 <HAL_GPIO_Init+0x350>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001474:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <HAL_GPIO_Init+0x350>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa22 f303 	lsr.w	r3, r2, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	f47f ae78 	bne.w	8001180 <HAL_GPIO_Init+0x10>
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	371c      	adds	r7, #28
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010000 	.word	0x40010000
 80014a8:	48000400 	.word	0x48000400
 80014ac:	48000800 	.word	0x48000800
 80014b0:	48000c00 	.word	0x48000c00
 80014b4:	48001000 	.word	0x48001000
 80014b8:	48001400 	.word	0x48001400
 80014bc:	48001800 	.word	0x48001800
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014e0:	e002      	b.n	80014e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_PWREx_GetVoltageRange+0x18>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40007000 	.word	0x40007000

08001510 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151e:	d130      	bne.n	8001582 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d038      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001536:	4a1e      	ldr	r2, [pc, #120]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2232      	movs	r2, #50	; 0x32
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3301      	adds	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001554:	e002      	b.n	800155c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3b01      	subs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001568:	d102      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x60>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f2      	bne.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800157c:	d110      	bne.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e00f      	b.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158e:	d007      	beq.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001598:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40007000 	.word	0x40007000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	431bde83 	.word	0x431bde83

080015bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e3ca      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ce:	4b97      	ldr	r3, [pc, #604]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d8:	4b94      	ldr	r3, [pc, #592]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 80e4 	beq.w	80017b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_RCC_OscConfig+0x4a>
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b0c      	cmp	r3, #12
 80015fa:	f040 808b 	bne.w	8001714 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	2b01      	cmp	r3, #1
 8001602:	f040 8087 	bne.w	8001714 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001606:	4b89      	ldr	r3, [pc, #548]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x62>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d101      	bne.n	800161e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e3a2      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4b82      	ldr	r3, [pc, #520]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <HAL_RCC_OscConfig+0x7c>
 800162e:	4b7f      	ldr	r3, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001636:	e005      	b.n	8001644 <HAL_RCC_OscConfig+0x88>
 8001638:	4b7c      	ldr	r3, [pc, #496]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800163a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001644:	4293      	cmp	r3, r2
 8001646:	d223      	bcs.n	8001690 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fd55 	bl	80020fc <RCC_SetFlashLatencyFromMSIRange>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e383      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800165c:	4b73      	ldr	r3, [pc, #460]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a72      	ldr	r2, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001662:	f043 0308 	orr.w	r3, r3, #8
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b70      	ldr	r3, [pc, #448]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	496d      	ldr	r1, [pc, #436]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167a:	4b6c      	ldr	r3, [pc, #432]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	4968      	ldr	r1, [pc, #416]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800168a:	4313      	orrs	r3, r2
 800168c:	604b      	str	r3, [r1, #4]
 800168e:	e025      	b.n	80016dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001696:	f043 0308 	orr.w	r3, r3, #8
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4960      	ldr	r1, [pc, #384]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ae:	4b5f      	ldr	r3, [pc, #380]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	495b      	ldr	r1, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fd15 	bl	80020fc <RCC_SetFlashLatencyFromMSIRange>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e343      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016dc:	f000 fc4a 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80016e0:	4602      	mov	r2, r0
 80016e2:	4b52      	ldr	r3, [pc, #328]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	091b      	lsrs	r3, r3, #4
 80016e8:	f003 030f 	and.w	r3, r3, #15
 80016ec:	4950      	ldr	r1, [pc, #320]	; (8001830 <HAL_RCC_OscConfig+0x274>)
 80016ee:	5ccb      	ldrb	r3, [r1, r3]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_RCC_OscConfig+0x278>)
 80016fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fc:	4b4e      	ldr	r3, [pc, #312]	; (8001838 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fb25 	bl	8000d50 <HAL_InitTick>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d052      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	e327      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d032      	beq.n	8001782 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171c:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a42      	ldr	r2, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001728:	f7ff fb62 	bl	8000df0 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001730:	f7ff fb5e 	bl	8000df0 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e310      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a36      	ldr	r2, [pc, #216]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001754:	f043 0308 	orr.w	r3, r3, #8
 8001758:	6013      	str	r3, [r2, #0]
 800175a:	4b34      	ldr	r3, [pc, #208]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4931      	ldr	r1, [pc, #196]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	021b      	lsls	r3, r3, #8
 800177a:	492c      	ldr	r1, [pc, #176]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e01a      	b.n	80017b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a29      	ldr	r2, [pc, #164]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001788:	f023 0301 	bic.w	r3, r3, #1
 800178c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb2f 	bl	8000df0 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001796:	f7ff fb2b 	bl	8000df0 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e2dd      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x1da>
 80017b4:	e000      	b.n	80017b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d074      	beq.n	80018ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b08      	cmp	r3, #8
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x21a>
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b0c      	cmp	r3, #12
 80017ce:	d10e      	bne.n	80017ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d10b      	bne.n	80017ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d064      	beq.n	80018ac <HAL_RCC_OscConfig+0x2f0>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d160      	bne.n	80018ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e2ba      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f6:	d106      	bne.n	8001806 <HAL_RCC_OscConfig+0x24a>
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RCC_OscConfig+0x270>)
 80017fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	e026      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180e:	d115      	bne.n	800183c <HAL_RCC_OscConfig+0x280>
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181a:	6013      	str	r3, [r2, #0]
 800181c:	4b03      	ldr	r3, [pc, #12]	; (800182c <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a02      	ldr	r2, [pc, #8]	; (800182c <HAL_RCC_OscConfig+0x270>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	e014      	b.n	8001854 <HAL_RCC_OscConfig+0x298>
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	08005130 	.word	0x08005130
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004
 800183c:	4ba0      	ldr	r3, [pc, #640]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9f      	ldr	r2, [pc, #636]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	4b9d      	ldr	r3, [pc, #628]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a9c      	ldr	r2, [pc, #624]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800184e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d013      	beq.n	8001884 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185c:	f7ff fac8 	bl	8000df0 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fac4 	bl	8000df0 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e276      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001876:	4b92      	ldr	r3, [pc, #584]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2a8>
 8001882:	e014      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff fab4 	bl	8000df0 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800188c:	f7ff fab0 	bl	8000df0 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b64      	cmp	r3, #100	; 0x64
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e262      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f0      	bne.n	800188c <HAL_RCC_OscConfig+0x2d0>
 80018aa:	e000      	b.n	80018ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d060      	beq.n	800197c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x310>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d119      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d116      	bne.n	80018fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018cc:	4b7c      	ldr	r3, [pc, #496]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x328>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e23f      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	061b      	lsls	r3, r3, #24
 80018f2:	4973      	ldr	r1, [pc, #460]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f8:	e040      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a6e      	ldr	r2, [pc, #440]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fa6f 	bl	8000df0 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa6b 	bl	8000df0 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e21d      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	061b      	lsls	r3, r3, #24
 8001942:	495f      	ldr	r1, [pc, #380]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b5d      	ldr	r3, [pc, #372]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a5c      	ldr	r2, [pc, #368]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001954:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001956:	f7ff fa4b 	bl	8000df0 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195e:	f7ff fa47 	bl	8000df0 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e1f9      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001970:	4b53      	ldr	r3, [pc, #332]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d03c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d01c      	beq.n	80019ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001990:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7ff fa26 	bl	8000df0 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fa22 	bl	8000df0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1d4      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ba:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ef      	beq.n	80019a8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	e01b      	b.n	8001a02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d0:	4a3b      	ldr	r2, [pc, #236]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019d2:	f023 0301 	bic.w	r3, r3, #1
 80019d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019da:	f7ff fa09 	bl	8000df0 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019e2:	f7ff fa05 	bl	8000df0 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1b7      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f4:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ef      	bne.n	80019e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0304 	and.w	r3, r3, #4
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 80a6 	beq.w	8001b5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a10:	2300      	movs	r3, #0
 8001a12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a14:	4b2a      	ldr	r3, [pc, #168]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10d      	bne.n	8001a3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a34:	60bb      	str	r3, [r7, #8]
 8001a36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d118      	bne.n	8001a7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1d      	ldr	r2, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a54:	f7ff f9cc 	bl	8000df0 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff f9c8 	bl	8000df0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e17a      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCC_OscConfig+0x508>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d108      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d8>
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a92:	e029      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b05      	cmp	r3, #5
 8001a9a:	d115      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x50c>
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab2:	4a03      	ldr	r2, [pc, #12]	; (8001ac0 <HAL_RCC_OscConfig+0x504>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001abc:	e014      	b.n	8001ae8 <HAL_RCC_OscConfig+0x52c>
 8001abe:	bf00      	nop
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	4b9c      	ldr	r3, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ace:	4a9b      	ldr	r2, [pc, #620]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ad0:	f023 0301 	bic.w	r3, r3, #1
 8001ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad8:	4b98      	ldr	r3, [pc, #608]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ade:	4a97      	ldr	r2, [pc, #604]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ae0:	f023 0304 	bic.w	r3, r3, #4
 8001ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d016      	beq.n	8001b1e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f97e 	bl	8000df0 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f97a 	bl	8000df0 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e12a      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b0e:	4b8b      	ldr	r3, [pc, #556]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d0ed      	beq.n	8001af8 <HAL_RCC_OscConfig+0x53c>
 8001b1c:	e015      	b.n	8001b4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f967 	bl	8000df0 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b24:	e00a      	b.n	8001b3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f963 	bl	8000df0 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e113      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b3c:	4b7f      	ldr	r3, [pc, #508]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ed      	bne.n	8001b26 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b4a:	7ffb      	ldrb	r3, [r7, #31]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b7a      	ldr	r3, [pc, #488]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	4a79      	ldr	r2, [pc, #484]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80fe 	beq.w	8001d62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 80d0 	bne.w	8001d10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b70:	4b72      	ldr	r3, [pc, #456]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0203 	and.w	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d130      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d127      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d11f      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb0:	2a07      	cmp	r2, #7
 8001bb2:	bf14      	ite	ne
 8001bb4:	2201      	movne	r2, #1
 8001bb6:	2200      	moveq	r2, #0
 8001bb8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d113      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d109      	bne.n	8001be6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	085b      	lsrs	r3, r3, #1
 8001bde:	3b01      	subs	r3, #1
 8001be0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d06e      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	2b0c      	cmp	r3, #12
 8001bea:	d069      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0ad      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c08:	4b4c      	ldr	r3, [pc, #304]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a4b      	ldr	r2, [pc, #300]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7ff f8ec 	bl	8000df0 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8e8 	bl	8000df0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e09a      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2e:	4b43      	ldr	r3, [pc, #268]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3a:	4b40      	ldr	r3, [pc, #256]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c3c:	68da      	ldr	r2, [r3, #12]
 8001c3e:	4b40      	ldr	r3, [pc, #256]	; (8001d40 <HAL_RCC_OscConfig+0x784>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c4a:	3a01      	subs	r2, #1
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	4311      	orrs	r1, r2
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c54:	0212      	lsls	r2, r2, #8
 8001c56:	4311      	orrs	r1, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c5c:	0852      	lsrs	r2, r2, #1
 8001c5e:	3a01      	subs	r2, #1
 8001c60:	0552      	lsls	r2, r2, #21
 8001c62:	4311      	orrs	r1, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c68:	0852      	lsrs	r2, r2, #1
 8001c6a:	3a01      	subs	r2, #1
 8001c6c:	0652      	lsls	r2, r2, #25
 8001c6e:	4311      	orrs	r1, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c74:	0912      	lsrs	r2, r2, #4
 8001c76:	0452      	lsls	r2, r2, #17
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	4930      	ldr	r1, [pc, #192]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c80:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c8c:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	4a2a      	ldr	r2, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c98:	f7ff f8aa 	bl	8000df0 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff f8a6 	bl	8000df0 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e058      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbe:	e050      	b.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04f      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d148      	bne.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b1a      	ldr	r3, [pc, #104]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a19      	ldr	r2, [pc, #100]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce8:	f7ff f882 	bl	8000df0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f87e 	bl	8000df0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e030      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x734>
 8001d0e:	e028      	b.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d023      	beq.n	8001d5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x780>)
 8001d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f865 	bl	8000df0 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	e00c      	b.n	8001d44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f861 	bl	8000df0 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d905      	bls.n	8001d44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e013      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ec      	bne.n	8001d2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4905      	ldr	r1, [pc, #20]	; (8001d6c <HAL_RCC_OscConfig+0x7b0>)
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x7b4>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
 8001d5c:	e001      	b.n	8001d62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	feeefffc 	.word	0xfeeefffc

08001d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0e7      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d88:	4b75      	ldr	r3, [pc, #468]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d910      	bls.n	8001db8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 0207 	bic.w	r2, r3, #7
 8001d9e:	4970      	ldr	r1, [pc, #448]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0cf      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d010      	beq.n	8001de6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d908      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd4:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4960      	ldr	r1, [pc, #384]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d04c      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d121      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e0a6      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d107      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e12:	4b54      	ldr	r3, [pc, #336]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d115      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e09a      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d109      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e08e      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e086      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f023 0203 	bic.w	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4943      	ldr	r1, [pc, #268]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e5c:	f7fe ffc8 	bl	8000df0 <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e62:	e00a      	b.n	8001e7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7fe ffc4 	bl	8000df0 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e06e      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 020c 	and.w	r2, r3, #12
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d1eb      	bne.n	8001e64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d208      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	492b      	ldr	r1, [pc, #172]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eba:	4b29      	ldr	r3, [pc, #164]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d210      	bcs.n	8001eea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 0207 	bic.w	r2, r3, #7
 8001ed0:	4923      	ldr	r1, [pc, #140]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed8:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_RCC_ClockConfig+0x1ec>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d001      	beq.n	8001eea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e036      	b.n	8001f58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d008      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	4918      	ldr	r1, [pc, #96]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	4910      	ldr	r1, [pc, #64]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f28:	f000 f824 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	490b      	ldr	r1, [pc, #44]	; (8001f68 <HAL_RCC_ClockConfig+0x1f4>)
 8001f3a:	5ccb      	ldrb	r3, [r1, r3]
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	fa22 f303 	lsr.w	r3, r2, r3
 8001f44:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1f8>)
 8001f46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1fc>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe feff 	bl	8000d50 <HAL_InitTick>
 8001f52:	4603      	mov	r3, r0
 8001f54:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f56:	7afb      	ldrb	r3, [r7, #11]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08005130 	.word	0x08005130
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f82:	4b3e      	ldr	r3, [pc, #248]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	2b0c      	cmp	r3, #12
 8001fa0:	d121      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d11e      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fa8:	4b34      	ldr	r3, [pc, #208]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d107      	bne.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 030f 	and.w	r3, r3, #15
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	e005      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	091b      	lsrs	r3, r3, #4
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fee:	61bb      	str	r3, [r7, #24]
 8001ff0:	e004      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ff8:	4b23      	ldr	r3, [pc, #140]	; (8002088 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d134      	bne.n	800206c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d003      	beq.n	800201a <HAL_RCC_GetSysClockFreq+0xa6>
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b03      	cmp	r3, #3
 8002016:	d003      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0xac>
 8002018:	e005      	b.n	8002026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_RCC_GetSysClockFreq+0x110>)
 800201c:	617b      	str	r3, [r7, #20]
      break;
 800201e:	e005      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_GetSysClockFreq+0x114>)
 8002022:	617b      	str	r3, [r7, #20]
      break;
 8002024:	e002      	b.n	800202c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	617b      	str	r3, [r7, #20]
      break;
 800202a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	3301      	adds	r3, #1
 8002038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	fb03 f202 	mul.w	r2, r3, r2
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	0e5b      	lsrs	r3, r3, #25
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	3301      	adds	r3, #1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800206c:	69bb      	ldr	r3, [r7, #24]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	08005148 	.word	0x08005148
 8002084:	00f42400 	.word	0x00f42400
 8002088:	007a1200 	.word	0x007a1200

0800208c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000000 	.word	0x20000000

080020a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020a8:	f7ff fff0 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08005140 	.word	0x08005140

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020d4:	f7ff ffda 	bl	800208c <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0adb      	lsrs	r3, r3, #11
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4904      	ldr	r1, [pc, #16]	; (80020f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08005140 	.word	0x08005140

080020fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002108:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002114:	f7ff f9ee 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002118:	6178      	str	r0, [r7, #20]
 800211a:	e014      	b.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b25      	ldr	r3, [pc, #148]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a24      	ldr	r2, [pc, #144]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002134:	f7ff f9de 	bl	80014f4 <HAL_PWREx_GetVoltageRange>
 8002138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800213c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213e:	4a1d      	ldr	r2, [pc, #116]	; (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214c:	d10b      	bne.n	8002166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d919      	bls.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2ba0      	cmp	r3, #160	; 0xa0
 8002158:	d902      	bls.n	8002160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800215a:	2302      	movs	r3, #2
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	e013      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	e010      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d902      	bls.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800216c:	2303      	movs	r3, #3
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	e00a      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d102      	bne.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002178:	2302      	movs	r3, #2
 800217a:	613b      	str	r3, [r7, #16]
 800217c:	e004      	b.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b70      	cmp	r3, #112	; 0x70
 8002182:	d101      	bne.n	8002188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002184:	2301      	movs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 0207 	bic.w	r2, r3, #7
 8002190:	4909      	ldr	r1, [pc, #36]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40022000 	.word	0x40022000

080021bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021c4:	2300      	movs	r3, #0
 80021c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021c8:	2300      	movs	r3, #0
 80021ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d041      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e0:	d02a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021e6:	d824      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021ec:	d008      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021f2:	d81e      	bhi.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fc:	d010      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021fe:	e018      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002200:	4b86      	ldr	r3, [pc, #536]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a85      	ldr	r2, [pc, #532]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800220c:	e015      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3304      	adds	r3, #4
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f000 fabb 	bl	8002790 <RCCEx_PLLSAI1_Config>
 800221a:	4603      	mov	r3, r0
 800221c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800221e:	e00c      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3320      	adds	r3, #32
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f000 fba6 	bl	8002978 <RCCEx_PLLSAI2_Config>
 800222c:	4603      	mov	r3, r0
 800222e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002230:	e003      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	74fb      	strb	r3, [r7, #19]
      break;
 8002236:	e000      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002240:	4b76      	ldr	r3, [pc, #472]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800224e:	4973      	ldr	r1, [pc, #460]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002256:	e001      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002258:	7cfb      	ldrb	r3, [r7, #19]
 800225a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d041      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800226c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002270:	d02a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002276:	d824      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800227c:	d008      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800227e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002282:	d81e      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800228c:	d010      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800228e:	e018      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002290:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	4a61      	ldr	r2, [pc, #388]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800229c:	e015      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fa73 	bl	8002790 <RCCEx_PLLSAI1_Config>
 80022aa:	4603      	mov	r3, r0
 80022ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3320      	adds	r3, #32
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 fb5e 	bl	8002978 <RCCEx_PLLSAI2_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80022c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022de:	494f      	ldr	r1, [pc, #316]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80a0 	beq.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	4a40      	ldr	r2, [pc, #256]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	; 0x58
 8002320:	4b3e      	ldr	r3, [pc, #248]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002330:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3a      	ldr	r2, [pc, #232]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800233c:	f7fe fd58 	bl	8000df0 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002344:	f7fe fd54 	bl	8000df0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d902      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	74fb      	strb	r3, [r7, #19]
        break;
 8002356:	e005      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002358:	4b31      	ldr	r3, [pc, #196]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ef      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d15c      	bne.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01f      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	d019      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002388:	4b24      	ldr	r3, [pc, #144]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002394:	4b21      	ldr	r3, [pc, #132]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239a:	4a20      	ldr	r2, [pc, #128]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d016      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7fe fd13 	bl	8000df0 <HAL_GetTick>
 80023ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023cc:	e00b      	b.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe fd0f 	bl	8000df0 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023dc:	4293      	cmp	r3, r2
 80023de:	d902      	bls.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	74fb      	strb	r3, [r7, #19]
            break;
 80023e4:	e006      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0ec      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240a:	4904      	ldr	r1, [pc, #16]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002412:	e009      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
 8002418:	e006      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002424:	7cfb      	ldrb	r3, [r7, #19]
 8002426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002428:	7c7b      	ldrb	r3, [r7, #17]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242e:	4b9e      	ldr	r3, [pc, #632]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a9d      	ldr	r2, [pc, #628]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002446:	4b98      	ldr	r3, [pc, #608]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244c:	f023 0203 	bic.w	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002454:	4994      	ldr	r1, [pc, #592]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002468:	4b8f      	ldr	r3, [pc, #572]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246e:	f023 020c 	bic.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	498c      	ldr	r1, [pc, #560]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800248a:	4b87      	ldr	r3, [pc, #540]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	4983      	ldr	r1, [pc, #524]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024ac:	4b7e      	ldr	r3, [pc, #504]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	497b      	ldr	r1, [pc, #492]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	4972      	ldr	r1, [pc, #456]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0320 	and.w	r3, r3, #32
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f0:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	496a      	ldr	r1, [pc, #424]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002512:	4b65      	ldr	r3, [pc, #404]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	4961      	ldr	r1, [pc, #388]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002534:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002542:	4959      	ldr	r1, [pc, #356]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002556:	4b54      	ldr	r3, [pc, #336]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002564:	4950      	ldr	r1, [pc, #320]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	4948      	ldr	r1, [pc, #288]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259a:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a8:	493f      	ldr	r1, [pc, #252]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d028      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ca:	4937      	ldr	r1, [pc, #220]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025da:	d106      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a31      	ldr	r2, [pc, #196]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025e6:	60d3      	str	r3, [r2, #12]
 80025e8:	e011      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f2:	d10c      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	2101      	movs	r1, #1
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 f8c8 	bl	8002790 <RCCEx_PLLSAI1_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800260a:	7cfb      	ldrb	r3, [r7, #19]
 800260c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d028      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	491f      	ldr	r1, [pc, #124]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002638:	d106      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002644:	60d3      	str	r3, [r2, #12]
 8002646:	e011      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002650:	d10c      	bne.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3304      	adds	r3, #4
 8002656:	2101      	movs	r1, #1
 8002658:	4618      	mov	r0, r3
 800265a:	f000 f899 	bl	8002790 <RCCEx_PLLSAI1_Config>
 800265e:	4603      	mov	r3, r0
 8002660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002662:	7cfb      	ldrb	r3, [r7, #19]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d02b      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800267e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002686:	4908      	ldr	r1, [pc, #32]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002696:	d109      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	4a02      	ldr	r2, [pc, #8]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a2:	60d3      	str	r3, [r2, #12]
 80026a4:	e014      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f867 	bl	8002790 <RCCEx_PLLSAI1_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
 80026ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d02f      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026dc:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ea:	4928      	ldr	r1, [pc, #160]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026fa:	d10d      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f000 f844 	bl	8002790 <RCCEx_PLLSAI1_Config>
 8002708:	4603      	mov	r3, r0
 800270a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d014      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	74bb      	strb	r3, [r7, #18]
 8002716:	e011      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800271c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3320      	adds	r3, #32
 8002726:	2102      	movs	r1, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f925 	bl	8002978 <RCCEx_PLLSAI2_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002748:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002756:	490d      	ldr	r1, [pc, #52]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800276a:	4b08      	ldr	r3, [pc, #32]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800277a:	4904      	ldr	r1, [pc, #16]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800277c:	4313      	orrs	r3, r2
 800277e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002782:	7cbb      	ldrb	r3, [r7, #18]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000

08002790 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800279e:	4b75      	ldr	r3, [pc, #468]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d018      	beq.n	80027dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027aa:	4b72      	ldr	r3, [pc, #456]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f003 0203 	and.w	r2, r3, #3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10d      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
       ||
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027c2:	4b6c      	ldr	r3, [pc, #432]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
       ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d047      	beq.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	73fb      	strb	r3, [r7, #15]
 80027da:	e044      	b.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d018      	beq.n	8002816 <RCCEx_PLLSAI1_Config+0x86>
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d825      	bhi.n	8002834 <RCCEx_PLLSAI1_Config+0xa4>
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d002      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0x62>
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d009      	beq.n	8002804 <RCCEx_PLLSAI1_Config+0x74>
 80027f0:	e020      	b.n	8002834 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027f2:	4b60      	ldr	r3, [pc, #384]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d11d      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002802:	e01a      	b.n	800283a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002804:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280c:	2b00      	cmp	r3, #0
 800280e:	d116      	bne.n	800283e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002814:	e013      	b.n	800283e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002816:	4b57      	ldr	r3, [pc, #348]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d10f      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002822:	4b54      	ldr	r3, [pc, #336]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d109      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002832:	e006      	b.n	8002842 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e004      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283a:	bf00      	nop
 800283c:	e002      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800283e:	bf00      	nop
 8002840:	e000      	b.n	8002844 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002842:	bf00      	nop
    }

    if(status == HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800284a:	4b4a      	ldr	r3, [pc, #296]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	430b      	orrs	r3, r1
 8002860:	4944      	ldr	r1, [pc, #272]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d17d      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800286c:	4b41      	ldr	r3, [pc, #260]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a40      	ldr	r2, [pc, #256]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002878:	f7fe faba 	bl	8000df0 <HAL_GetTick>
 800287c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800287e:	e009      	b.n	8002894 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002880:	f7fe fab6 	bl	8000df0 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d902      	bls.n	8002894 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	73fb      	strb	r3, [r7, #15]
        break;
 8002892:	e005      	b.n	80028a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002894:	4b37      	ldr	r3, [pc, #220]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ef      	bne.n	8002880 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d160      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028ac:	4b31      	ldr	r3, [pc, #196]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6892      	ldr	r2, [r2, #8]
 80028bc:	0211      	lsls	r1, r2, #8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68d2      	ldr	r2, [r2, #12]
 80028c2:	0912      	lsrs	r2, r2, #4
 80028c4:	0452      	lsls	r2, r2, #17
 80028c6:	430a      	orrs	r2, r1
 80028c8:	492a      	ldr	r1, [pc, #168]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
 80028ce:	e027      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d112      	bne.n	80028fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	0211      	lsls	r1, r2, #8
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6912      	ldr	r2, [r2, #16]
 80028ec:	0852      	lsrs	r2, r2, #1
 80028ee:	3a01      	subs	r2, #1
 80028f0:	0552      	lsls	r2, r2, #21
 80028f2:	430a      	orrs	r2, r1
 80028f4:	491f      	ldr	r1, [pc, #124]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	610b      	str	r3, [r1, #16]
 80028fa:	e011      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028fc:	4b1d      	ldr	r3, [pc, #116]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002904:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6892      	ldr	r2, [r2, #8]
 800290c:	0211      	lsls	r1, r2, #8
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6952      	ldr	r2, [r2, #20]
 8002912:	0852      	lsrs	r2, r2, #1
 8002914:	3a01      	subs	r2, #1
 8002916:	0652      	lsls	r2, r2, #25
 8002918:	430a      	orrs	r2, r1
 800291a:	4916      	ldr	r1, [pc, #88]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002920:	4b14      	ldr	r3, [pc, #80]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a13      	ldr	r2, [pc, #76]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800292a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fa60 	bl	8000df0 <HAL_GetTick>
 8002930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002932:	e009      	b.n	8002948 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002934:	f7fe fa5c 	bl	8000df0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	73fb      	strb	r3, [r7, #15]
          break;
 8002946:	e005      	b.n	8002954 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4904      	ldr	r1, [pc, #16]	; (8002974 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002968:	7bfb      	ldrb	r3, [r7, #15]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40021000 	.word	0x40021000

08002978 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002986:	4b6a      	ldr	r3, [pc, #424]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002992:	4b67      	ldr	r3, [pc, #412]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0203 	and.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d10d      	bne.n	80029be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
       ||
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029aa:	4b61      	ldr	r3, [pc, #388]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
       ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d047      	beq.n	8002a4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	e044      	b.n	8002a4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d018      	beq.n	80029fe <RCCEx_PLLSAI2_Config+0x86>
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d825      	bhi.n	8002a1c <RCCEx_PLLSAI2_Config+0xa4>
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d002      	beq.n	80029da <RCCEx_PLLSAI2_Config+0x62>
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d009      	beq.n	80029ec <RCCEx_PLLSAI2_Config+0x74>
 80029d8:	e020      	b.n	8002a1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029da:	4b55      	ldr	r3, [pc, #340]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11d      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ea:	e01a      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fc:	e013      	b.n	8002a26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029fe:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10f      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a0a:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a1a:	e006      	b.n	8002a2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a20:	e004      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a22:	bf00      	nop
 8002a24:	e002      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	430b      	orrs	r3, r1
 8002a48:	4939      	ldr	r1, [pc, #228]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d167      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a54:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a35      	ldr	r2, [pc, #212]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe f9c6 	bl	8000df0 <HAL_GetTick>
 8002a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a66:	e009      	b.n	8002a7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a68:	f7fe f9c2 	bl	8000df0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d902      	bls.n	8002a7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	73fb      	strb	r3, [r7, #15]
        break;
 8002a7a:	e005      	b.n	8002a88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d1ef      	bne.n	8002a68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d14a      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6892      	ldr	r2, [r2, #8]
 8002aa4:	0211      	lsls	r1, r2, #8
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68d2      	ldr	r2, [r2, #12]
 8002aaa:	0912      	lsrs	r2, r2, #4
 8002aac:	0452      	lsls	r2, r2, #17
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	491f      	ldr	r1, [pc, #124]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	614b      	str	r3, [r1, #20]
 8002ab6:	e011      	b.n	8002adc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6892      	ldr	r2, [r2, #8]
 8002ac8:	0211      	lsls	r1, r2, #8
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6912      	ldr	r2, [r2, #16]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	3a01      	subs	r2, #1
 8002ad2:	0652      	lsls	r2, r2, #25
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	4916      	ldr	r1, [pc, #88]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002adc:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe f982 	bl	8000df0 <HAL_GetTick>
 8002aec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002aee:	e009      	b.n	8002b04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002af0:	f7fe f97e 	bl	8000df0 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	73fb      	strb	r3, [r7, #15]
          break;
 8002b02:	e005      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	4904      	ldr	r1, [pc, #16]	; (8002b30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000

08002b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e040      	b.n	8002bc8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd ff7e 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2224      	movs	r2, #36	; 0x24
 8002b60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fec0 	bl	8003900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fc05 	bl	8003390 <UART_SetConfig>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e01b      	b.n	8002bc8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685a      	ldr	r2, [r3, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0201 	orr.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 ff3f 	bl	8003a44 <UART_CheckIdleState>
 8002bc6:	4603      	mov	r3, r0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d178      	bne.n	8002cda <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_UART_Transmit+0x24>
 8002bee:	88fb      	ldrh	r3, [r7, #6]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e071      	b.n	8002cdc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2221      	movs	r2, #33	; 0x21
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c06:	f7fe f8f3 	bl	8000df0 <HAL_GetTick>
 8002c0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	88fa      	ldrh	r2, [r7, #6]
 8002c18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d108      	bne.n	8002c38 <HAL_UART_Transmit+0x68>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d104      	bne.n	8002c38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	e003      	b.n	8002c40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c40:	e030      	b.n	8002ca4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2180      	movs	r1, #128	; 0x80
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 ffa1 	bl	8003b94 <UART_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e03c      	b.n	8002cdc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	881a      	ldrh	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c74:	b292      	uxth	r2, r2
 8002c76:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	3302      	adds	r3, #2
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e008      	b.n	8002c92 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1c8      	bne.n	8002c42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2140      	movs	r1, #64	; 0x40
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 ff6a 	bl	8003b94 <UART_WaitOnFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e005      	b.n	8002cdc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e000      	b.n	8002cdc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002cda:	2302      	movs	r3, #2
  }
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d137      	bne.n	8002d6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UART_Receive_IT+0x24>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e030      	b.n	8002d6e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a18      	ldr	r2, [pc, #96]	; (8002d78 <HAL_UART_Receive_IT+0x94>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01f      	beq.n	8002d5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	e853 3f00 	ldrex	r3, [r3]
 8002d36:	613b      	str	r3, [r7, #16]
   return(result);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	69f9      	ldr	r1, [r7, #28]
 8002d4e:	6a3a      	ldr	r2, [r7, #32]
 8002d50:	e841 2300 	strex	r3, r2, [r1]
 8002d54:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1e6      	bne.n	8002d2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 ff7e 	bl	8003c64 <UART_Start_Receive_IT>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	e000      	b.n	8002d6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d6c:	2302      	movs	r3, #2
  }
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3728      	adds	r7, #40	; 0x28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40008000 	.word	0x40008000

08002d7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0ba      	sub	sp, #232	; 0xe8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002da2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002da6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002daa:	4013      	ands	r3, r2
 8002dac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d115      	bne.n	8002de4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbc:	f003 0320 	and.w	r3, r3, #32
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00f      	beq.n	8002de4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d009      	beq.n	8002de4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 82ae 	beq.w	8003336 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
      }
      return;
 8002de2:	e2a8      	b.n	8003336 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002de4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 8117 	beq.w	800301c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002dfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_UART_IRQHandler+0x298>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 810a 	beq.w	800301c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d011      	beq.n	8002e38 <HAL_UART_IRQHandler+0xbc>
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00b      	beq.n	8002e38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2201      	movs	r2, #1
 8002e26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d011      	beq.n	8002e68 <HAL_UART_IRQHandler+0xec>
 8002e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00b      	beq.n	8002e68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2202      	movs	r2, #2
 8002e56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d011      	beq.n	8002e98 <HAL_UART_IRQHandler+0x11c>
 8002e74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00b      	beq.n	8002e98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2204      	movs	r2, #4
 8002e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d105      	bne.n	8002ebc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00b      	beq.n	8002ed4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eca:	f043 0208 	orr.w	r2, r3, #8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d012      	beq.n	8002f06 <HAL_UART_IRQHandler+0x18a>
 8002ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00c      	beq.n	8002f06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8214 	beq.w	800333a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f16:	f003 0320 	and.w	r3, r3, #32
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d007      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002f52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d04f      	beq.n	8002ffe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 ff46 	bl	8003df0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	2b40      	cmp	r3, #64	; 0x40
 8002f70:	d141      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3308      	adds	r3, #8
 8002f78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3308      	adds	r3, #8
 8002f9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002faa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1d9      	bne.n	8002f72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d013      	beq.n	8002fee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fca:	4a13      	ldr	r2, [pc, #76]	; (8003018 <HAL_UART_IRQHandler+0x29c>)
 8002fcc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f88b 	bl	80010ee <HAL_DMA_Abort_IT>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d017      	beq.n	800300e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fec:	e00f      	b.n	800300e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f9b8 	bl	8003364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff4:	e00b      	b.n	800300e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9b4 	bl	8003364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ffc:	e007      	b.n	800300e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9b0 	bl	8003364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800300c:	e195      	b.n	800333a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800300e:	bf00      	nop
    return;
 8003010:	e193      	b.n	800333a <HAL_UART_IRQHandler+0x5be>
 8003012:	bf00      	nop
 8003014:	04000120 	.word	0x04000120
 8003018:	08003eb9 	.word	0x08003eb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	2b01      	cmp	r3, #1
 8003022:	f040 814e 	bne.w	80032c2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8147 	beq.w	80032c2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8140 	beq.w	80032c2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2210      	movs	r2, #16
 8003048:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	f040 80b8 	bne.w	80031ca <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003066:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8167 	beq.w	800333e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003076:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800307a:	429a      	cmp	r2, r3
 800307c:	f080 815f 	bcs.w	800333e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003086:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8086 	bne.w	80031a8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030a8:	e853 3f00 	ldrex	r3, [r3]
 80030ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80030c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1da      	bne.n	800309c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3308      	adds	r3, #8
 80030ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80030f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3308      	adds	r3, #8
 8003106:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800310a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800310e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003112:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800311c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1e1      	bne.n	80030e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3308      	adds	r3, #8
 8003128:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3308      	adds	r3, #8
 8003142:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003146:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003148:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800314c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e3      	bne.n	8003122 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003170:	e853 3f00 	ldrex	r3, [r3]
 8003174:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003178:	f023 0310 	bic.w	r3, r3, #16
 800317c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800318a:	65bb      	str	r3, [r7, #88]	; 0x58
 800318c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003190:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003192:	e841 2300 	strex	r3, r2, [r1]
 8003196:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1e4      	bne.n	8003168 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd ff65 	bl	8001072 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2202      	movs	r2, #2
 80031ac:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8d8 	bl	8003378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80031c8:	e0b9      	b.n	800333e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80ab 	beq.w	8003342 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80031ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80a6 	beq.w	8003342 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800320a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003218:	647b      	str	r3, [r7, #68]	; 0x44
 800321a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800321e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e4      	bne.n	80031f6 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	623b      	str	r3, [r7, #32]
   return(result);
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3308      	adds	r3, #8
 800324c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003250:	633a      	str	r2, [r7, #48]	; 0x30
 8003252:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e3      	bne.n	800322c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	60fb      	str	r3, [r7, #12]
   return(result);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	617b      	str	r3, [r7, #20]
   return(result);
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e4      	bne.n	8003278 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2202      	movs	r2, #2
 80032b2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f85c 	bl	8003378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032c0:	e03f      	b.n	8003342 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00e      	beq.n	80032ec <HAL_UART_IRQHandler+0x570>
 80032ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80032e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 ffe3 	bl	80042b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80032ea:	e02d      	b.n	8003348 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01c      	beq.n	8003346 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	4798      	blx	r3
    }
    return;
 8003314:	e017      	b.n	8003346 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d012      	beq.n	8003348 <HAL_UART_IRQHandler+0x5cc>
 8003322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fdd8 	bl	8003ee4 <UART_EndTransmit_IT>
    return;
 8003334:	e008      	b.n	8003348 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003336:	bf00      	nop
 8003338:	e006      	b.n	8003348 <HAL_UART_IRQHandler+0x5cc>
    return;
 800333a:	bf00      	nop
 800333c:	e004      	b.n	8003348 <HAL_UART_IRQHandler+0x5cc>
      return;
 800333e:	bf00      	nop
 8003340:	e002      	b.n	8003348 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003342:	bf00      	nop
 8003344:	e000      	b.n	8003348 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003346:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003348:	37e8      	adds	r7, #232	; 0xe8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop

08003350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003394:	b08a      	sub	sp, #40	; 0x28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4ba4      	ldr	r3, [pc, #656]	; (8003650 <UART_SetConfig+0x2c0>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a99      	ldr	r2, [pc, #612]	; (8003654 <UART_SetConfig+0x2c4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f8:	4313      	orrs	r3, r2
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a90      	ldr	r2, [pc, #576]	; (8003658 <UART_SetConfig+0x2c8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d126      	bne.n	8003468 <UART_SetConfig+0xd8>
 800341a:	4b90      	ldr	r3, [pc, #576]	; (800365c <UART_SetConfig+0x2cc>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b03      	cmp	r3, #3
 8003426:	d81b      	bhi.n	8003460 <UART_SetConfig+0xd0>
 8003428:	a201      	add	r2, pc, #4	; (adr r2, 8003430 <UART_SetConfig+0xa0>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003441 	.word	0x08003441
 8003434:	08003451 	.word	0x08003451
 8003438:	08003449 	.word	0x08003449
 800343c:	08003459 	.word	0x08003459
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003446:	e116      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003448:	2302      	movs	r3, #2
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344e:	e112      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003450:	2304      	movs	r3, #4
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003456:	e10e      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003458:	2308      	movs	r3, #8
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345e:	e10a      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003460:	2310      	movs	r3, #16
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003466:	e106      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a7c      	ldr	r2, [pc, #496]	; (8003660 <UART_SetConfig+0x2d0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d138      	bne.n	80034e4 <UART_SetConfig+0x154>
 8003472:	4b7a      	ldr	r3, [pc, #488]	; (800365c <UART_SetConfig+0x2cc>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d82d      	bhi.n	80034dc <UART_SetConfig+0x14c>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <UART_SetConfig+0xf8>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034dd 	.word	0x080034dd
 8003494:	080034dd 	.word	0x080034dd
 8003498:	080034cd 	.word	0x080034cd
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	080034dd 	.word	0x080034dd
 80034a4:	080034dd 	.word	0x080034dd
 80034a8:	080034c5 	.word	0x080034c5
 80034ac:	080034dd 	.word	0x080034dd
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034d5 	.word	0x080034d5
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e0d8      	b.n	8003676 <UART_SetConfig+0x2e6>
 80034c4:	2302      	movs	r3, #2
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e0d4      	b.n	8003676 <UART_SetConfig+0x2e6>
 80034cc:	2304      	movs	r3, #4
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e0d0      	b.n	8003676 <UART_SetConfig+0x2e6>
 80034d4:	2308      	movs	r3, #8
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034da:	e0cc      	b.n	8003676 <UART_SetConfig+0x2e6>
 80034dc:	2310      	movs	r3, #16
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e2:	e0c8      	b.n	8003676 <UART_SetConfig+0x2e6>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a5e      	ldr	r2, [pc, #376]	; (8003664 <UART_SetConfig+0x2d4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d125      	bne.n	800353a <UART_SetConfig+0x1aa>
 80034ee:	4b5b      	ldr	r3, [pc, #364]	; (800365c <UART_SetConfig+0x2cc>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d016      	beq.n	800352a <UART_SetConfig+0x19a>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d818      	bhi.n	8003532 <UART_SetConfig+0x1a2>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d00a      	beq.n	800351a <UART_SetConfig+0x18a>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d814      	bhi.n	8003532 <UART_SetConfig+0x1a2>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <UART_SetConfig+0x182>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d008      	beq.n	8003522 <UART_SetConfig+0x192>
 8003510:	e00f      	b.n	8003532 <UART_SetConfig+0x1a2>
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003518:	e0ad      	b.n	8003676 <UART_SetConfig+0x2e6>
 800351a:	2302      	movs	r3, #2
 800351c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003520:	e0a9      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003522:	2304      	movs	r3, #4
 8003524:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003528:	e0a5      	b.n	8003676 <UART_SetConfig+0x2e6>
 800352a:	2308      	movs	r3, #8
 800352c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003530:	e0a1      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003532:	2310      	movs	r3, #16
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003538:	e09d      	b.n	8003676 <UART_SetConfig+0x2e6>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <UART_SetConfig+0x2d8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d125      	bne.n	8003590 <UART_SetConfig+0x200>
 8003544:	4b45      	ldr	r3, [pc, #276]	; (800365c <UART_SetConfig+0x2cc>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800354e:	2bc0      	cmp	r3, #192	; 0xc0
 8003550:	d016      	beq.n	8003580 <UART_SetConfig+0x1f0>
 8003552:	2bc0      	cmp	r3, #192	; 0xc0
 8003554:	d818      	bhi.n	8003588 <UART_SetConfig+0x1f8>
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d00a      	beq.n	8003570 <UART_SetConfig+0x1e0>
 800355a:	2b80      	cmp	r3, #128	; 0x80
 800355c:	d814      	bhi.n	8003588 <UART_SetConfig+0x1f8>
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <UART_SetConfig+0x1d8>
 8003562:	2b40      	cmp	r3, #64	; 0x40
 8003564:	d008      	beq.n	8003578 <UART_SetConfig+0x1e8>
 8003566:	e00f      	b.n	8003588 <UART_SetConfig+0x1f8>
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e082      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003570:	2302      	movs	r3, #2
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e07e      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003578:	2304      	movs	r3, #4
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e07a      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003580:	2308      	movs	r3, #8
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e076      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003588:	2310      	movs	r3, #16
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e072      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a35      	ldr	r2, [pc, #212]	; (800366c <UART_SetConfig+0x2dc>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d12a      	bne.n	80035f0 <UART_SetConfig+0x260>
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <UART_SetConfig+0x2cc>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a8:	d01a      	beq.n	80035e0 <UART_SetConfig+0x250>
 80035aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ae:	d81b      	bhi.n	80035e8 <UART_SetConfig+0x258>
 80035b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b4:	d00c      	beq.n	80035d0 <UART_SetConfig+0x240>
 80035b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035ba:	d815      	bhi.n	80035e8 <UART_SetConfig+0x258>
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <UART_SetConfig+0x238>
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d008      	beq.n	80035d8 <UART_SetConfig+0x248>
 80035c6:	e00f      	b.n	80035e8 <UART_SetConfig+0x258>
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ce:	e052      	b.n	8003676 <UART_SetConfig+0x2e6>
 80035d0:	2302      	movs	r3, #2
 80035d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d6:	e04e      	b.n	8003676 <UART_SetConfig+0x2e6>
 80035d8:	2304      	movs	r3, #4
 80035da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035de:	e04a      	b.n	8003676 <UART_SetConfig+0x2e6>
 80035e0:	2308      	movs	r3, #8
 80035e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e6:	e046      	b.n	8003676 <UART_SetConfig+0x2e6>
 80035e8:	2310      	movs	r3, #16
 80035ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ee:	e042      	b.n	8003676 <UART_SetConfig+0x2e6>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a17      	ldr	r2, [pc, #92]	; (8003654 <UART_SetConfig+0x2c4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d13a      	bne.n	8003670 <UART_SetConfig+0x2e0>
 80035fa:	4b18      	ldr	r3, [pc, #96]	; (800365c <UART_SetConfig+0x2cc>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003608:	d01a      	beq.n	8003640 <UART_SetConfig+0x2b0>
 800360a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800360e:	d81b      	bhi.n	8003648 <UART_SetConfig+0x2b8>
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003614:	d00c      	beq.n	8003630 <UART_SetConfig+0x2a0>
 8003616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361a:	d815      	bhi.n	8003648 <UART_SetConfig+0x2b8>
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <UART_SetConfig+0x298>
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003624:	d008      	beq.n	8003638 <UART_SetConfig+0x2a8>
 8003626:	e00f      	b.n	8003648 <UART_SetConfig+0x2b8>
 8003628:	2300      	movs	r3, #0
 800362a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362e:	e022      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003630:	2302      	movs	r3, #2
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e01e      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003638:	2304      	movs	r3, #4
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e01a      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003640:	2308      	movs	r3, #8
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003646:	e016      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003648:	2310      	movs	r3, #16
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364e:	e012      	b.n	8003676 <UART_SetConfig+0x2e6>
 8003650:	efff69f3 	.word	0xefff69f3
 8003654:	40008000 	.word	0x40008000
 8003658:	40013800 	.word	0x40013800
 800365c:	40021000 	.word	0x40021000
 8003660:	40004400 	.word	0x40004400
 8003664:	40004800 	.word	0x40004800
 8003668:	40004c00 	.word	0x40004c00
 800366c:	40005000 	.word	0x40005000
 8003670:	2310      	movs	r3, #16
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a9f      	ldr	r2, [pc, #636]	; (80038f8 <UART_SetConfig+0x568>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d17a      	bne.n	8003776 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003680:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003684:	2b08      	cmp	r3, #8
 8003686:	d824      	bhi.n	80036d2 <UART_SetConfig+0x342>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0x300>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036b5 	.word	0x080036b5
 8003694:	080036d3 	.word	0x080036d3
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036d3 	.word	0x080036d3
 80036a0:	080036c3 	.word	0x080036c3
 80036a4:	080036d3 	.word	0x080036d3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036d3 	.word	0x080036d3
 80036b0:	080036cb 	.word	0x080036cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b4:	f7fe fcf6 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80036b8:	61f8      	str	r0, [r7, #28]
        break;
 80036ba:	e010      	b.n	80036de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036bc:	4b8f      	ldr	r3, [pc, #572]	; (80038fc <UART_SetConfig+0x56c>)
 80036be:	61fb      	str	r3, [r7, #28]
        break;
 80036c0:	e00d      	b.n	80036de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036c2:	f7fe fc57 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80036c6:	61f8      	str	r0, [r7, #28]
        break;
 80036c8:	e009      	b.n	80036de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036ce:	61fb      	str	r3, [r7, #28]
        break;
 80036d0:	e005      	b.n	80036de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80036dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 80fb 	beq.w	80038dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d305      	bcc.n	8003702 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d903      	bls.n	800370a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003708:	e0e8      	b.n	80038dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2200      	movs	r2, #0
 800370e:	461c      	mov	r4, r3
 8003710:	4615      	mov	r5, r2
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	022b      	lsls	r3, r5, #8
 800371c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003720:	0222      	lsls	r2, r4, #8
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	6849      	ldr	r1, [r1, #4]
 8003726:	0849      	lsrs	r1, r1, #1
 8003728:	2000      	movs	r0, #0
 800372a:	4688      	mov	r8, r1
 800372c:	4681      	mov	r9, r0
 800372e:	eb12 0a08 	adds.w	sl, r2, r8
 8003732:	eb43 0b09 	adc.w	fp, r3, r9
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003744:	4650      	mov	r0, sl
 8003746:	4659      	mov	r1, fp
 8003748:	f7fc fd92 	bl	8000270 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4613      	mov	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800375a:	d308      	bcc.n	800376e <UART_SetConfig+0x3de>
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003762:	d204      	bcs.n	800376e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	e0b6      	b.n	80038dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003774:	e0b2      	b.n	80038dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377e:	d15e      	bne.n	800383e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003780:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003784:	2b08      	cmp	r3, #8
 8003786:	d828      	bhi.n	80037da <UART_SetConfig+0x44a>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0x400>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037b5 	.word	0x080037b5
 8003794:	080037bd 	.word	0x080037bd
 8003798:	080037c5 	.word	0x080037c5
 800379c:	080037db 	.word	0x080037db
 80037a0:	080037cb 	.word	0x080037cb
 80037a4:	080037db 	.word	0x080037db
 80037a8:	080037db 	.word	0x080037db
 80037ac:	080037db 	.word	0x080037db
 80037b0:	080037d3 	.word	0x080037d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b4:	f7fe fc76 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 80037b8:	61f8      	str	r0, [r7, #28]
        break;
 80037ba:	e014      	b.n	80037e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037bc:	f7fe fc88 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 80037c0:	61f8      	str	r0, [r7, #28]
        break;
 80037c2:	e010      	b.n	80037e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c4:	4b4d      	ldr	r3, [pc, #308]	; (80038fc <UART_SetConfig+0x56c>)
 80037c6:	61fb      	str	r3, [r7, #28]
        break;
 80037c8:	e00d      	b.n	80037e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ca:	f7fe fbd3 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80037ce:	61f8      	str	r0, [r7, #28]
        break;
 80037d0:	e009      	b.n	80037e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037d6:	61fb      	str	r3, [r7, #28]
        break;
 80037d8:	e005      	b.n	80037e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80037e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d077      	beq.n	80038dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	005a      	lsls	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	441a      	add	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b0f      	cmp	r3, #15
 8003806:	d916      	bls.n	8003836 <UART_SetConfig+0x4a6>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d212      	bcs.n	8003836 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f023 030f 	bic.w	r3, r3, #15
 8003818:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	b29a      	uxth	r2, r3
 8003826:	8afb      	ldrh	r3, [r7, #22]
 8003828:	4313      	orrs	r3, r2
 800382a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	8afa      	ldrh	r2, [r7, #22]
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	e052      	b.n	80038dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800383c:	e04e      	b.n	80038dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800383e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003842:	2b08      	cmp	r3, #8
 8003844:	d827      	bhi.n	8003896 <UART_SetConfig+0x506>
 8003846:	a201      	add	r2, pc, #4	; (adr r2, 800384c <UART_SetConfig+0x4bc>)
 8003848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800384c:	08003871 	.word	0x08003871
 8003850:	08003879 	.word	0x08003879
 8003854:	08003881 	.word	0x08003881
 8003858:	08003897 	.word	0x08003897
 800385c:	08003887 	.word	0x08003887
 8003860:	08003897 	.word	0x08003897
 8003864:	08003897 	.word	0x08003897
 8003868:	08003897 	.word	0x08003897
 800386c:	0800388f 	.word	0x0800388f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003870:	f7fe fc18 	bl	80020a4 <HAL_RCC_GetPCLK1Freq>
 8003874:	61f8      	str	r0, [r7, #28]
        break;
 8003876:	e014      	b.n	80038a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003878:	f7fe fc2a 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 800387c:	61f8      	str	r0, [r7, #28]
        break;
 800387e:	e010      	b.n	80038a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003880:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <UART_SetConfig+0x56c>)
 8003882:	61fb      	str	r3, [r7, #28]
        break;
 8003884:	e00d      	b.n	80038a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003886:	f7fe fb75 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 800388a:	61f8      	str	r0, [r7, #28]
        break;
 800388c:	e009      	b.n	80038a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800388e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003892:	61fb      	str	r3, [r7, #28]
        break;
 8003894:	e005      	b.n	80038a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038a0:	bf00      	nop
    }

    if (pclk != 0U)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d019      	beq.n	80038dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	085a      	lsrs	r2, r3, #1
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	2b0f      	cmp	r3, #15
 80038c0:	d909      	bls.n	80038d6 <UART_SetConfig+0x546>
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d205      	bcs.n	80038d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	e002      	b.n	80038dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3728      	adds	r7, #40	; 0x28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038f6:	bf00      	nop
 80038f8:	40008000 	.word	0x40008000
 80038fc:	00f42400 	.word	0x00f42400

08003900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	f003 0308 	and.w	r3, r3, #8
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00a      	beq.n	800392a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00a      	beq.n	800394c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00a      	beq.n	800396e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01a      	beq.n	8003a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fe:	d10a      	bne.n	8003a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b098      	sub	sp, #96	; 0x60
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a54:	f7fd f9cc 	bl	8000df0 <HAL_GetTick>
 8003a58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d12e      	bne.n	8003ac6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a70:	2200      	movs	r2, #0
 8003a72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f88c 	bl	8003b94 <UART_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d021      	beq.n	8003ac6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a96:	653b      	str	r3, [r7, #80]	; 0x50
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e6      	bne.n	8003a82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e062      	b.n	8003b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d149      	bne.n	8003b68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003adc:	2200      	movs	r2, #0
 8003ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f856 	bl	8003b94 <UART_WaitOnFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d03c      	beq.n	8003b68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	623b      	str	r3, [r7, #32]
   return(result);
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003b0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e6      	bne.n	8003aee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3308      	adds	r3, #8
 8003b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b40:	61fa      	str	r2, [r7, #28]
 8003b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	69b9      	ldr	r1, [r7, #24]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e5      	bne.n	8003b20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e011      	b.n	8003b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3758      	adds	r7, #88	; 0x58
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba4:	e049      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d045      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fd f91f 	bl	8000df0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e048      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d031      	beq.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d110      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2208      	movs	r2, #8
 8003bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 f8ff 	bl	8003df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2208      	movs	r2, #8
 8003bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e029      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c14:	d111      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f8e5 	bl	8003df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e00f      	b.n	8003c5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	79fb      	ldrb	r3, [r7, #7]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0a6      	beq.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b097      	sub	sp, #92	; 0x5c
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	88fa      	ldrh	r2, [r7, #6]
 8003c84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c96:	d10e      	bne.n	8003cb6 <UART_Start_Receive_IT+0x52>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d105      	bne.n	8003cac <UART_Start_Receive_IT+0x48>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ca6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003caa:	e02d      	b.n	8003d08 <UART_Start_Receive_IT+0xa4>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	22ff      	movs	r2, #255	; 0xff
 8003cb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cb4:	e028      	b.n	8003d08 <UART_Start_Receive_IT+0xa4>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10d      	bne.n	8003cda <UART_Start_Receive_IT+0x76>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <UART_Start_Receive_IT+0x6c>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	22ff      	movs	r2, #255	; 0xff
 8003cca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cce:	e01b      	b.n	8003d08 <UART_Start_Receive_IT+0xa4>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	227f      	movs	r2, #127	; 0x7f
 8003cd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cd8:	e016      	b.n	8003d08 <UART_Start_Receive_IT+0xa4>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce2:	d10d      	bne.n	8003d00 <UART_Start_Receive_IT+0x9c>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d104      	bne.n	8003cf6 <UART_Start_Receive_IT+0x92>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	227f      	movs	r2, #127	; 0x7f
 8003cf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cf4:	e008      	b.n	8003d08 <UART_Start_Receive_IT+0xa4>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	223f      	movs	r2, #63	; 0x3f
 8003cfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003cfe:	e003      	b.n	8003d08 <UART_Start_Receive_IT+0xa4>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2222      	movs	r2, #34	; 0x22
 8003d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3308      	adds	r3, #8
 8003d36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d38:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e5      	bne.n	8003d18 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d107      	bne.n	8003d66 <UART_Start_Receive_IT+0x102>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <UART_Start_Receive_IT+0x184>)
 8003d62:	669a      	str	r2, [r3, #104]	; 0x68
 8003d64:	e002      	b.n	8003d6c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a20      	ldr	r2, [pc, #128]	; (8003dec <UART_Start_Receive_IT+0x188>)
 8003d6a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d019      	beq.n	8003da8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
 8003d94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <UART_Start_Receive_IT+0x110>
 8003da6:	e018      	b.n	8003dda <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	e853 3f00 	ldrex	r3, [r3]
 8003db4:	613b      	str	r3, [r7, #16]
   return(result);
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f043 0320 	orr.w	r3, r3, #32
 8003dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc6:	623b      	str	r3, [r7, #32]
 8003dc8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	69f9      	ldr	r1, [r7, #28]
 8003dcc:	6a3a      	ldr	r2, [r7, #32]
 8003dce:	e841 2300 	strex	r3, r2, [r1]
 8003dd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1e6      	bne.n	8003da8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	375c      	adds	r7, #92	; 0x5c
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	080040f5 	.word	0x080040f5
 8003dec:	08003f39 	.word	0x08003f39

08003df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b095      	sub	sp, #84	; 0x54
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e00:	e853 3f00 	ldrex	r3, [r3]
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e16:	643b      	str	r3, [r7, #64]	; 0x40
 8003e18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e1e:	e841 2300 	strex	r3, r2, [r1]
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1e6      	bne.n	8003df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	e853 3f00 	ldrex	r3, [r3]
 8003e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3308      	adds	r3, #8
 8003e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e5      	bne.n	8003e2a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d118      	bne.n	8003e98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0310 	bic.w	r3, r3, #16
 8003e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	6979      	ldr	r1, [r7, #20]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	613b      	str	r3, [r7, #16]
   return(result);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e6      	bne.n	8003e66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003eac:	bf00      	nop
 8003eae:	3754      	adds	r7, #84	; 0x54
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f7ff fa44 	bl	8003364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	61bb      	str	r3, [r7, #24]
 8003f0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0e:	6979      	ldr	r1, [r7, #20]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	e841 2300 	strex	r3, r2, [r1]
 8003f16:	613b      	str	r3, [r7, #16]
   return(result);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1e6      	bne.n	8003eec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fa10 	bl	8003350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f30:	bf00      	nop
 8003f32:	3720      	adds	r7, #32
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b09c      	sub	sp, #112	; 0x70
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f46:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f50:	2b22      	cmp	r3, #34	; 0x22
 8003f52:	f040 80be 	bne.w	80040d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f5c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f64:	b2d9      	uxtb	r1, r3
 8003f66:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	400a      	ands	r2, r1
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 80a3 	bne.w	80040e6 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fc0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e6      	bne.n	8003fa0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3308      	adds	r3, #8
 8003ff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ff2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ff4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <UART_RxISR_8BIT+0x1b8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d01f      	beq.n	8004064 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d018      	beq.n	8004064 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	623b      	str	r3, [r7, #32]
   return(result);
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004046:	663b      	str	r3, [r7, #96]	; 0x60
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
 8004052:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e6      	bne.n	8004032 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004068:	2b01      	cmp	r3, #1
 800406a:	d12e      	bne.n	80040ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	e853 3f00 	ldrex	r3, [r3]
 800407e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0310 	bic.w	r3, r3, #16
 8004086:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004094:	69b9      	ldr	r1, [r7, #24]
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	e841 2300 	strex	r3, r2, [r1]
 800409c:	617b      	str	r3, [r7, #20]
   return(result);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1e6      	bne.n	8004072 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0310 	and.w	r3, r3, #16
 80040ae:	2b10      	cmp	r3, #16
 80040b0:	d103      	bne.n	80040ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2210      	movs	r2, #16
 80040b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040c0:	4619      	mov	r1, r3
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff f958 	bl	8003378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040c8:	e00d      	b.n	80040e6 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc fa64 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 80040d0:	e009      	b.n	80040e6 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	8b1b      	ldrh	r3, [r3, #24]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0208 	orr.w	r2, r2, #8
 80040e2:	b292      	uxth	r2, r2
 80040e4:	831a      	strh	r2, [r3, #24]
}
 80040e6:	bf00      	nop
 80040e8:	3770      	adds	r7, #112	; 0x70
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40008000 	.word	0x40008000

080040f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b09c      	sub	sp, #112	; 0x70
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004102:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410c:	2b22      	cmp	r3, #34	; 0x22
 800410e:	f040 80be 	bne.w	800428e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004118:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004122:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004126:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800412a:	4013      	ands	r3, r2
 800412c:	b29a      	uxth	r2, r3
 800412e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004130:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	1c9a      	adds	r2, r3, #2
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	f040 80a3 	bne.w	80042a2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800416a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004170:	667b      	str	r3, [r7, #100]	; 0x64
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800417a:	657b      	str	r3, [r7, #84]	; 0x54
 800417c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e6      	bne.n	800415c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	663b      	str	r3, [r7, #96]	; 0x60
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3308      	adds	r3, #8
 80041ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ae:	643a      	str	r2, [r7, #64]	; 0x40
 80041b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e5      	bne.n	800418e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a34      	ldr	r2, [pc, #208]	; (80042ac <UART_RxISR_16BIT+0x1b8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d01f      	beq.n	8004220 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d018      	beq.n	8004220 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	e853 3f00 	ldrex	r3, [r3]
 80041fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004202:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800420e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004214:	e841 2300 	strex	r3, r2, [r1]
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1e6      	bne.n	80041ee <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004224:	2b01      	cmp	r3, #1
 8004226:	d12e      	bne.n	8004286 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	60bb      	str	r3, [r7, #8]
   return(result);
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	f023 0310 	bic.w	r3, r3, #16
 8004242:	65bb      	str	r3, [r7, #88]	; 0x58
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6979      	ldr	r1, [r7, #20]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	613b      	str	r3, [r7, #16]
   return(result);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e6      	bne.n	800422e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d103      	bne.n	8004276 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2210      	movs	r2, #16
 8004274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800427c:	4619      	mov	r1, r3
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff f87a 	bl	8003378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004284:	e00d      	b.n	80042a2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fc f986 	bl	8000598 <HAL_UART_RxCpltCallback>
}
 800428c:	e009      	b.n	80042a2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	8b1b      	ldrh	r3, [r3, #24]
 8004294:	b29a      	uxth	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0208 	orr.w	r2, r2, #8
 800429e:	b292      	uxth	r2, r2
 80042a0:	831a      	strh	r2, [r3, #24]
}
 80042a2:	bf00      	nop
 80042a4:	3770      	adds	r7, #112	; 0x70
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40008000 	.word	0x40008000

080042b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <std>:
 80042c4:	2300      	movs	r3, #0
 80042c6:	b510      	push	{r4, lr}
 80042c8:	4604      	mov	r4, r0
 80042ca:	e9c0 3300 	strd	r3, r3, [r0]
 80042ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042d2:	6083      	str	r3, [r0, #8]
 80042d4:	8181      	strh	r1, [r0, #12]
 80042d6:	6643      	str	r3, [r0, #100]	; 0x64
 80042d8:	81c2      	strh	r2, [r0, #14]
 80042da:	6183      	str	r3, [r0, #24]
 80042dc:	4619      	mov	r1, r3
 80042de:	2208      	movs	r2, #8
 80042e0:	305c      	adds	r0, #92	; 0x5c
 80042e2:	f000 f8f4 	bl	80044ce <memset>
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <std+0x38>)
 80042e8:	6263      	str	r3, [r4, #36]	; 0x24
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <std+0x3c>)
 80042ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <std+0x40>)
 80042f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <std+0x44>)
 80042f4:	6224      	str	r4, [r4, #32]
 80042f6:	6323      	str	r3, [r4, #48]	; 0x30
 80042f8:	bd10      	pop	{r4, pc}
 80042fa:	bf00      	nop
 80042fc:	08004449 	.word	0x08004449
 8004300:	0800446b 	.word	0x0800446b
 8004304:	080044a3 	.word	0x080044a3
 8004308:	080044c7 	.word	0x080044c7

0800430c <stdio_exit_handler>:
 800430c:	4a02      	ldr	r2, [pc, #8]	; (8004318 <stdio_exit_handler+0xc>)
 800430e:	4903      	ldr	r1, [pc, #12]	; (800431c <stdio_exit_handler+0x10>)
 8004310:	4803      	ldr	r0, [pc, #12]	; (8004320 <stdio_exit_handler+0x14>)
 8004312:	f000 b869 	b.w	80043e8 <_fwalk_sglue>
 8004316:	bf00      	nop
 8004318:	2000000c 	.word	0x2000000c
 800431c:	08004e69 	.word	0x08004e69
 8004320:	20000018 	.word	0x20000018

08004324 <cleanup_stdio>:
 8004324:	6841      	ldr	r1, [r0, #4]
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <cleanup_stdio+0x34>)
 8004328:	4299      	cmp	r1, r3
 800432a:	b510      	push	{r4, lr}
 800432c:	4604      	mov	r4, r0
 800432e:	d001      	beq.n	8004334 <cleanup_stdio+0x10>
 8004330:	f000 fd9a 	bl	8004e68 <_fflush_r>
 8004334:	68a1      	ldr	r1, [r4, #8]
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <cleanup_stdio+0x38>)
 8004338:	4299      	cmp	r1, r3
 800433a:	d002      	beq.n	8004342 <cleanup_stdio+0x1e>
 800433c:	4620      	mov	r0, r4
 800433e:	f000 fd93 	bl	8004e68 <_fflush_r>
 8004342:	68e1      	ldr	r1, [r4, #12]
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <cleanup_stdio+0x3c>)
 8004346:	4299      	cmp	r1, r3
 8004348:	d004      	beq.n	8004354 <cleanup_stdio+0x30>
 800434a:	4620      	mov	r0, r4
 800434c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004350:	f000 bd8a 	b.w	8004e68 <_fflush_r>
 8004354:	bd10      	pop	{r4, pc}
 8004356:	bf00      	nop
 8004358:	20000134 	.word	0x20000134
 800435c:	2000019c 	.word	0x2000019c
 8004360:	20000204 	.word	0x20000204

08004364 <global_stdio_init.part.0>:
 8004364:	b510      	push	{r4, lr}
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <global_stdio_init.part.0+0x30>)
 8004368:	4c0b      	ldr	r4, [pc, #44]	; (8004398 <global_stdio_init.part.0+0x34>)
 800436a:	4a0c      	ldr	r2, [pc, #48]	; (800439c <global_stdio_init.part.0+0x38>)
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	4620      	mov	r0, r4
 8004370:	2200      	movs	r2, #0
 8004372:	2104      	movs	r1, #4
 8004374:	f7ff ffa6 	bl	80042c4 <std>
 8004378:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800437c:	2201      	movs	r2, #1
 800437e:	2109      	movs	r1, #9
 8004380:	f7ff ffa0 	bl	80042c4 <std>
 8004384:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004388:	2202      	movs	r2, #2
 800438a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800438e:	2112      	movs	r1, #18
 8004390:	f7ff bf98 	b.w	80042c4 <std>
 8004394:	2000026c 	.word	0x2000026c
 8004398:	20000134 	.word	0x20000134
 800439c:	0800430d 	.word	0x0800430d

080043a0 <__sfp_lock_acquire>:
 80043a0:	4801      	ldr	r0, [pc, #4]	; (80043a8 <__sfp_lock_acquire+0x8>)
 80043a2:	f000 b90d 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 80043a6:	bf00      	nop
 80043a8:	20000275 	.word	0x20000275

080043ac <__sfp_lock_release>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__sfp_lock_release+0x8>)
 80043ae:	f000 b908 	b.w	80045c2 <__retarget_lock_release_recursive>
 80043b2:	bf00      	nop
 80043b4:	20000275 	.word	0x20000275

080043b8 <__sinit>:
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4604      	mov	r4, r0
 80043bc:	f7ff fff0 	bl	80043a0 <__sfp_lock_acquire>
 80043c0:	6a23      	ldr	r3, [r4, #32]
 80043c2:	b11b      	cbz	r3, 80043cc <__sinit+0x14>
 80043c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c8:	f7ff bff0 	b.w	80043ac <__sfp_lock_release>
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <__sinit+0x28>)
 80043ce:	6223      	str	r3, [r4, #32]
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <__sinit+0x2c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1f5      	bne.n	80043c4 <__sinit+0xc>
 80043d8:	f7ff ffc4 	bl	8004364 <global_stdio_init.part.0>
 80043dc:	e7f2      	b.n	80043c4 <__sinit+0xc>
 80043de:	bf00      	nop
 80043e0:	08004325 	.word	0x08004325
 80043e4:	2000026c 	.word	0x2000026c

080043e8 <_fwalk_sglue>:
 80043e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043ec:	4607      	mov	r7, r0
 80043ee:	4688      	mov	r8, r1
 80043f0:	4614      	mov	r4, r2
 80043f2:	2600      	movs	r6, #0
 80043f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043f8:	f1b9 0901 	subs.w	r9, r9, #1
 80043fc:	d505      	bpl.n	800440a <_fwalk_sglue+0x22>
 80043fe:	6824      	ldr	r4, [r4, #0]
 8004400:	2c00      	cmp	r4, #0
 8004402:	d1f7      	bne.n	80043f4 <_fwalk_sglue+0xc>
 8004404:	4630      	mov	r0, r6
 8004406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d907      	bls.n	8004420 <_fwalk_sglue+0x38>
 8004410:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004414:	3301      	adds	r3, #1
 8004416:	d003      	beq.n	8004420 <_fwalk_sglue+0x38>
 8004418:	4629      	mov	r1, r5
 800441a:	4638      	mov	r0, r7
 800441c:	47c0      	blx	r8
 800441e:	4306      	orrs	r6, r0
 8004420:	3568      	adds	r5, #104	; 0x68
 8004422:	e7e9      	b.n	80043f8 <_fwalk_sglue+0x10>

08004424 <iprintf>:
 8004424:	b40f      	push	{r0, r1, r2, r3}
 8004426:	b507      	push	{r0, r1, r2, lr}
 8004428:	4906      	ldr	r1, [pc, #24]	; (8004444 <iprintf+0x20>)
 800442a:	ab04      	add	r3, sp, #16
 800442c:	6808      	ldr	r0, [r1, #0]
 800442e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004432:	6881      	ldr	r1, [r0, #8]
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	f000 f9e7 	bl	8004808 <_vfiprintf_r>
 800443a:	b003      	add	sp, #12
 800443c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004440:	b004      	add	sp, #16
 8004442:	4770      	bx	lr
 8004444:	20000064 	.word	0x20000064

08004448 <__sread>:
 8004448:	b510      	push	{r4, lr}
 800444a:	460c      	mov	r4, r1
 800444c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004450:	f000 f868 	bl	8004524 <_read_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	bfab      	itete	ge
 8004458:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800445a:	89a3      	ldrhlt	r3, [r4, #12]
 800445c:	181b      	addge	r3, r3, r0
 800445e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004462:	bfac      	ite	ge
 8004464:	6563      	strge	r3, [r4, #84]	; 0x54
 8004466:	81a3      	strhlt	r3, [r4, #12]
 8004468:	bd10      	pop	{r4, pc}

0800446a <__swrite>:
 800446a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446e:	461f      	mov	r7, r3
 8004470:	898b      	ldrh	r3, [r1, #12]
 8004472:	05db      	lsls	r3, r3, #23
 8004474:	4605      	mov	r5, r0
 8004476:	460c      	mov	r4, r1
 8004478:	4616      	mov	r6, r2
 800447a:	d505      	bpl.n	8004488 <__swrite+0x1e>
 800447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004480:	2302      	movs	r3, #2
 8004482:	2200      	movs	r2, #0
 8004484:	f000 f83c 	bl	8004500 <_lseek_r>
 8004488:	89a3      	ldrh	r3, [r4, #12]
 800448a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800448e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004492:	81a3      	strh	r3, [r4, #12]
 8004494:	4632      	mov	r2, r6
 8004496:	463b      	mov	r3, r7
 8004498:	4628      	mov	r0, r5
 800449a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800449e:	f000 b853 	b.w	8004548 <_write_r>

080044a2 <__sseek>:
 80044a2:	b510      	push	{r4, lr}
 80044a4:	460c      	mov	r4, r1
 80044a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044aa:	f000 f829 	bl	8004500 <_lseek_r>
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	bf15      	itete	ne
 80044b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80044b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80044ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80044be:	81a3      	strheq	r3, [r4, #12]
 80044c0:	bf18      	it	ne
 80044c2:	81a3      	strhne	r3, [r4, #12]
 80044c4:	bd10      	pop	{r4, pc}

080044c6 <__sclose>:
 80044c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044ca:	f000 b809 	b.w	80044e0 <_close_r>

080044ce <memset>:
 80044ce:	4402      	add	r2, r0
 80044d0:	4603      	mov	r3, r0
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d100      	bne.n	80044d8 <memset+0xa>
 80044d6:	4770      	bx	lr
 80044d8:	f803 1b01 	strb.w	r1, [r3], #1
 80044dc:	e7f9      	b.n	80044d2 <memset+0x4>
	...

080044e0 <_close_r>:
 80044e0:	b538      	push	{r3, r4, r5, lr}
 80044e2:	4d06      	ldr	r5, [pc, #24]	; (80044fc <_close_r+0x1c>)
 80044e4:	2300      	movs	r3, #0
 80044e6:	4604      	mov	r4, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	602b      	str	r3, [r5, #0]
 80044ec:	f7fc fb69 	bl	8000bc2 <_close>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_close_r+0x1a>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_close_r+0x1a>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	20000270 	.word	0x20000270

08004500 <_lseek_r>:
 8004500:	b538      	push	{r3, r4, r5, lr}
 8004502:	4d07      	ldr	r5, [pc, #28]	; (8004520 <_lseek_r+0x20>)
 8004504:	4604      	mov	r4, r0
 8004506:	4608      	mov	r0, r1
 8004508:	4611      	mov	r1, r2
 800450a:	2200      	movs	r2, #0
 800450c:	602a      	str	r2, [r5, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f7fc fb7e 	bl	8000c10 <_lseek>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_lseek_r+0x1e>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_lseek_r+0x1e>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	20000270 	.word	0x20000270

08004524 <_read_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4d07      	ldr	r5, [pc, #28]	; (8004544 <_read_r+0x20>)
 8004528:	4604      	mov	r4, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	602a      	str	r2, [r5, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f7fc fb28 	bl	8000b88 <_read>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_read_r+0x1e>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_read_r+0x1e>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20000270 	.word	0x20000270

08004548 <_write_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d07      	ldr	r5, [pc, #28]	; (8004568 <_write_r+0x20>)
 800454c:	4604      	mov	r4, r0
 800454e:	4608      	mov	r0, r1
 8004550:	4611      	mov	r1, r2
 8004552:	2200      	movs	r2, #0
 8004554:	602a      	str	r2, [r5, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	f7fc f808 	bl	800056c <_write>
 800455c:	1c43      	adds	r3, r0, #1
 800455e:	d102      	bne.n	8004566 <_write_r+0x1e>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	b103      	cbz	r3, 8004566 <_write_r+0x1e>
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	bd38      	pop	{r3, r4, r5, pc}
 8004568:	20000270 	.word	0x20000270

0800456c <__errno>:
 800456c:	4b01      	ldr	r3, [pc, #4]	; (8004574 <__errno+0x8>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000064 	.word	0x20000064

08004578 <__libc_init_array>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4d0d      	ldr	r5, [pc, #52]	; (80045b0 <__libc_init_array+0x38>)
 800457c:	4c0d      	ldr	r4, [pc, #52]	; (80045b4 <__libc_init_array+0x3c>)
 800457e:	1b64      	subs	r4, r4, r5
 8004580:	10a4      	asrs	r4, r4, #2
 8004582:	2600      	movs	r6, #0
 8004584:	42a6      	cmp	r6, r4
 8004586:	d109      	bne.n	800459c <__libc_init_array+0x24>
 8004588:	4d0b      	ldr	r5, [pc, #44]	; (80045b8 <__libc_init_array+0x40>)
 800458a:	4c0c      	ldr	r4, [pc, #48]	; (80045bc <__libc_init_array+0x44>)
 800458c:	f000 fdbe 	bl	800510c <_init>
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	2600      	movs	r6, #0
 8004596:	42a6      	cmp	r6, r4
 8004598:	d105      	bne.n	80045a6 <__libc_init_array+0x2e>
 800459a:	bd70      	pop	{r4, r5, r6, pc}
 800459c:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a0:	4798      	blx	r3
 80045a2:	3601      	adds	r6, #1
 80045a4:	e7ee      	b.n	8004584 <__libc_init_array+0xc>
 80045a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045aa:	4798      	blx	r3
 80045ac:	3601      	adds	r6, #1
 80045ae:	e7f2      	b.n	8004596 <__libc_init_array+0x1e>
 80045b0:	080051b4 	.word	0x080051b4
 80045b4:	080051b4 	.word	0x080051b4
 80045b8:	080051b4 	.word	0x080051b4
 80045bc:	080051b8 	.word	0x080051b8

080045c0 <__retarget_lock_acquire_recursive>:
 80045c0:	4770      	bx	lr

080045c2 <__retarget_lock_release_recursive>:
 80045c2:	4770      	bx	lr

080045c4 <_free_r>:
 80045c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045c6:	2900      	cmp	r1, #0
 80045c8:	d044      	beq.n	8004654 <_free_r+0x90>
 80045ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ce:	9001      	str	r0, [sp, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f1a1 0404 	sub.w	r4, r1, #4
 80045d6:	bfb8      	it	lt
 80045d8:	18e4      	addlt	r4, r4, r3
 80045da:	f000 f8df 	bl	800479c <__malloc_lock>
 80045de:	4a1e      	ldr	r2, [pc, #120]	; (8004658 <_free_r+0x94>)
 80045e0:	9801      	ldr	r0, [sp, #4]
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	b933      	cbnz	r3, 80045f4 <_free_r+0x30>
 80045e6:	6063      	str	r3, [r4, #4]
 80045e8:	6014      	str	r4, [r2, #0]
 80045ea:	b003      	add	sp, #12
 80045ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f0:	f000 b8da 	b.w	80047a8 <__malloc_unlock>
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	d908      	bls.n	800460a <_free_r+0x46>
 80045f8:	6825      	ldr	r5, [r4, #0]
 80045fa:	1961      	adds	r1, r4, r5
 80045fc:	428b      	cmp	r3, r1
 80045fe:	bf01      	itttt	eq
 8004600:	6819      	ldreq	r1, [r3, #0]
 8004602:	685b      	ldreq	r3, [r3, #4]
 8004604:	1949      	addeq	r1, r1, r5
 8004606:	6021      	streq	r1, [r4, #0]
 8004608:	e7ed      	b.n	80045e6 <_free_r+0x22>
 800460a:	461a      	mov	r2, r3
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b10b      	cbz	r3, 8004614 <_free_r+0x50>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d9fa      	bls.n	800460a <_free_r+0x46>
 8004614:	6811      	ldr	r1, [r2, #0]
 8004616:	1855      	adds	r5, r2, r1
 8004618:	42a5      	cmp	r5, r4
 800461a:	d10b      	bne.n	8004634 <_free_r+0x70>
 800461c:	6824      	ldr	r4, [r4, #0]
 800461e:	4421      	add	r1, r4
 8004620:	1854      	adds	r4, r2, r1
 8004622:	42a3      	cmp	r3, r4
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	d1e0      	bne.n	80045ea <_free_r+0x26>
 8004628:	681c      	ldr	r4, [r3, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	6053      	str	r3, [r2, #4]
 800462e:	440c      	add	r4, r1
 8004630:	6014      	str	r4, [r2, #0]
 8004632:	e7da      	b.n	80045ea <_free_r+0x26>
 8004634:	d902      	bls.n	800463c <_free_r+0x78>
 8004636:	230c      	movs	r3, #12
 8004638:	6003      	str	r3, [r0, #0]
 800463a:	e7d6      	b.n	80045ea <_free_r+0x26>
 800463c:	6825      	ldr	r5, [r4, #0]
 800463e:	1961      	adds	r1, r4, r5
 8004640:	428b      	cmp	r3, r1
 8004642:	bf04      	itt	eq
 8004644:	6819      	ldreq	r1, [r3, #0]
 8004646:	685b      	ldreq	r3, [r3, #4]
 8004648:	6063      	str	r3, [r4, #4]
 800464a:	bf04      	itt	eq
 800464c:	1949      	addeq	r1, r1, r5
 800464e:	6021      	streq	r1, [r4, #0]
 8004650:	6054      	str	r4, [r2, #4]
 8004652:	e7ca      	b.n	80045ea <_free_r+0x26>
 8004654:	b003      	add	sp, #12
 8004656:	bd30      	pop	{r4, r5, pc}
 8004658:	20000278 	.word	0x20000278

0800465c <sbrk_aligned>:
 800465c:	b570      	push	{r4, r5, r6, lr}
 800465e:	4e0e      	ldr	r6, [pc, #56]	; (8004698 <sbrk_aligned+0x3c>)
 8004660:	460c      	mov	r4, r1
 8004662:	6831      	ldr	r1, [r6, #0]
 8004664:	4605      	mov	r5, r0
 8004666:	b911      	cbnz	r1, 800466e <sbrk_aligned+0x12>
 8004668:	f000 fcbc 	bl	8004fe4 <_sbrk_r>
 800466c:	6030      	str	r0, [r6, #0]
 800466e:	4621      	mov	r1, r4
 8004670:	4628      	mov	r0, r5
 8004672:	f000 fcb7 	bl	8004fe4 <_sbrk_r>
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d00a      	beq.n	8004690 <sbrk_aligned+0x34>
 800467a:	1cc4      	adds	r4, r0, #3
 800467c:	f024 0403 	bic.w	r4, r4, #3
 8004680:	42a0      	cmp	r0, r4
 8004682:	d007      	beq.n	8004694 <sbrk_aligned+0x38>
 8004684:	1a21      	subs	r1, r4, r0
 8004686:	4628      	mov	r0, r5
 8004688:	f000 fcac 	bl	8004fe4 <_sbrk_r>
 800468c:	3001      	adds	r0, #1
 800468e:	d101      	bne.n	8004694 <sbrk_aligned+0x38>
 8004690:	f04f 34ff 	mov.w	r4, #4294967295
 8004694:	4620      	mov	r0, r4
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	2000027c 	.word	0x2000027c

0800469c <_malloc_r>:
 800469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	1ccd      	adds	r5, r1, #3
 80046a2:	f025 0503 	bic.w	r5, r5, #3
 80046a6:	3508      	adds	r5, #8
 80046a8:	2d0c      	cmp	r5, #12
 80046aa:	bf38      	it	cc
 80046ac:	250c      	movcc	r5, #12
 80046ae:	2d00      	cmp	r5, #0
 80046b0:	4607      	mov	r7, r0
 80046b2:	db01      	blt.n	80046b8 <_malloc_r+0x1c>
 80046b4:	42a9      	cmp	r1, r5
 80046b6:	d905      	bls.n	80046c4 <_malloc_r+0x28>
 80046b8:	230c      	movs	r3, #12
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	2600      	movs	r6, #0
 80046be:	4630      	mov	r0, r6
 80046c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004798 <_malloc_r+0xfc>
 80046c8:	f000 f868 	bl	800479c <__malloc_lock>
 80046cc:	f8d8 3000 	ldr.w	r3, [r8]
 80046d0:	461c      	mov	r4, r3
 80046d2:	bb5c      	cbnz	r4, 800472c <_malloc_r+0x90>
 80046d4:	4629      	mov	r1, r5
 80046d6:	4638      	mov	r0, r7
 80046d8:	f7ff ffc0 	bl	800465c <sbrk_aligned>
 80046dc:	1c43      	adds	r3, r0, #1
 80046de:	4604      	mov	r4, r0
 80046e0:	d155      	bne.n	800478e <_malloc_r+0xf2>
 80046e2:	f8d8 4000 	ldr.w	r4, [r8]
 80046e6:	4626      	mov	r6, r4
 80046e8:	2e00      	cmp	r6, #0
 80046ea:	d145      	bne.n	8004778 <_malloc_r+0xdc>
 80046ec:	2c00      	cmp	r4, #0
 80046ee:	d048      	beq.n	8004782 <_malloc_r+0xe6>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	4631      	mov	r1, r6
 80046f4:	4638      	mov	r0, r7
 80046f6:	eb04 0903 	add.w	r9, r4, r3
 80046fa:	f000 fc73 	bl	8004fe4 <_sbrk_r>
 80046fe:	4581      	cmp	r9, r0
 8004700:	d13f      	bne.n	8004782 <_malloc_r+0xe6>
 8004702:	6821      	ldr	r1, [r4, #0]
 8004704:	1a6d      	subs	r5, r5, r1
 8004706:	4629      	mov	r1, r5
 8004708:	4638      	mov	r0, r7
 800470a:	f7ff ffa7 	bl	800465c <sbrk_aligned>
 800470e:	3001      	adds	r0, #1
 8004710:	d037      	beq.n	8004782 <_malloc_r+0xe6>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	442b      	add	r3, r5
 8004716:	6023      	str	r3, [r4, #0]
 8004718:	f8d8 3000 	ldr.w	r3, [r8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d038      	beq.n	8004792 <_malloc_r+0xf6>
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	42a2      	cmp	r2, r4
 8004724:	d12b      	bne.n	800477e <_malloc_r+0xe2>
 8004726:	2200      	movs	r2, #0
 8004728:	605a      	str	r2, [r3, #4]
 800472a:	e00f      	b.n	800474c <_malloc_r+0xb0>
 800472c:	6822      	ldr	r2, [r4, #0]
 800472e:	1b52      	subs	r2, r2, r5
 8004730:	d41f      	bmi.n	8004772 <_malloc_r+0xd6>
 8004732:	2a0b      	cmp	r2, #11
 8004734:	d917      	bls.n	8004766 <_malloc_r+0xca>
 8004736:	1961      	adds	r1, r4, r5
 8004738:	42a3      	cmp	r3, r4
 800473a:	6025      	str	r5, [r4, #0]
 800473c:	bf18      	it	ne
 800473e:	6059      	strne	r1, [r3, #4]
 8004740:	6863      	ldr	r3, [r4, #4]
 8004742:	bf08      	it	eq
 8004744:	f8c8 1000 	streq.w	r1, [r8]
 8004748:	5162      	str	r2, [r4, r5]
 800474a:	604b      	str	r3, [r1, #4]
 800474c:	4638      	mov	r0, r7
 800474e:	f104 060b 	add.w	r6, r4, #11
 8004752:	f000 f829 	bl	80047a8 <__malloc_unlock>
 8004756:	f026 0607 	bic.w	r6, r6, #7
 800475a:	1d23      	adds	r3, r4, #4
 800475c:	1af2      	subs	r2, r6, r3
 800475e:	d0ae      	beq.n	80046be <_malloc_r+0x22>
 8004760:	1b9b      	subs	r3, r3, r6
 8004762:	50a3      	str	r3, [r4, r2]
 8004764:	e7ab      	b.n	80046be <_malloc_r+0x22>
 8004766:	42a3      	cmp	r3, r4
 8004768:	6862      	ldr	r2, [r4, #4]
 800476a:	d1dd      	bne.n	8004728 <_malloc_r+0x8c>
 800476c:	f8c8 2000 	str.w	r2, [r8]
 8004770:	e7ec      	b.n	800474c <_malloc_r+0xb0>
 8004772:	4623      	mov	r3, r4
 8004774:	6864      	ldr	r4, [r4, #4]
 8004776:	e7ac      	b.n	80046d2 <_malloc_r+0x36>
 8004778:	4634      	mov	r4, r6
 800477a:	6876      	ldr	r6, [r6, #4]
 800477c:	e7b4      	b.n	80046e8 <_malloc_r+0x4c>
 800477e:	4613      	mov	r3, r2
 8004780:	e7cc      	b.n	800471c <_malloc_r+0x80>
 8004782:	230c      	movs	r3, #12
 8004784:	603b      	str	r3, [r7, #0]
 8004786:	4638      	mov	r0, r7
 8004788:	f000 f80e 	bl	80047a8 <__malloc_unlock>
 800478c:	e797      	b.n	80046be <_malloc_r+0x22>
 800478e:	6025      	str	r5, [r4, #0]
 8004790:	e7dc      	b.n	800474c <_malloc_r+0xb0>
 8004792:	605b      	str	r3, [r3, #4]
 8004794:	deff      	udf	#255	; 0xff
 8004796:	bf00      	nop
 8004798:	20000278 	.word	0x20000278

0800479c <__malloc_lock>:
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <__malloc_lock+0x8>)
 800479e:	f7ff bf0f 	b.w	80045c0 <__retarget_lock_acquire_recursive>
 80047a2:	bf00      	nop
 80047a4:	20000274 	.word	0x20000274

080047a8 <__malloc_unlock>:
 80047a8:	4801      	ldr	r0, [pc, #4]	; (80047b0 <__malloc_unlock+0x8>)
 80047aa:	f7ff bf0a 	b.w	80045c2 <__retarget_lock_release_recursive>
 80047ae:	bf00      	nop
 80047b0:	20000274 	.word	0x20000274

080047b4 <__sfputc_r>:
 80047b4:	6893      	ldr	r3, [r2, #8]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	b410      	push	{r4}
 80047bc:	6093      	str	r3, [r2, #8]
 80047be:	da08      	bge.n	80047d2 <__sfputc_r+0x1e>
 80047c0:	6994      	ldr	r4, [r2, #24]
 80047c2:	42a3      	cmp	r3, r4
 80047c4:	db01      	blt.n	80047ca <__sfputc_r+0x16>
 80047c6:	290a      	cmp	r1, #10
 80047c8:	d103      	bne.n	80047d2 <__sfputc_r+0x1e>
 80047ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ce:	f000 bb73 	b.w	8004eb8 <__swbuf_r>
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	1c58      	adds	r0, r3, #1
 80047d6:	6010      	str	r0, [r2, #0]
 80047d8:	7019      	strb	r1, [r3, #0]
 80047da:	4608      	mov	r0, r1
 80047dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <__sfputs_r>:
 80047e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e4:	4606      	mov	r6, r0
 80047e6:	460f      	mov	r7, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	18d5      	adds	r5, r2, r3
 80047ec:	42ac      	cmp	r4, r5
 80047ee:	d101      	bne.n	80047f4 <__sfputs_r+0x12>
 80047f0:	2000      	movs	r0, #0
 80047f2:	e007      	b.n	8004804 <__sfputs_r+0x22>
 80047f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047f8:	463a      	mov	r2, r7
 80047fa:	4630      	mov	r0, r6
 80047fc:	f7ff ffda 	bl	80047b4 <__sfputc_r>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d1f3      	bne.n	80047ec <__sfputs_r+0xa>
 8004804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004808 <_vfiprintf_r>:
 8004808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	460d      	mov	r5, r1
 800480e:	b09d      	sub	sp, #116	; 0x74
 8004810:	4614      	mov	r4, r2
 8004812:	4698      	mov	r8, r3
 8004814:	4606      	mov	r6, r0
 8004816:	b118      	cbz	r0, 8004820 <_vfiprintf_r+0x18>
 8004818:	6a03      	ldr	r3, [r0, #32]
 800481a:	b90b      	cbnz	r3, 8004820 <_vfiprintf_r+0x18>
 800481c:	f7ff fdcc 	bl	80043b8 <__sinit>
 8004820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004822:	07d9      	lsls	r1, r3, #31
 8004824:	d405      	bmi.n	8004832 <_vfiprintf_r+0x2a>
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	059a      	lsls	r2, r3, #22
 800482a:	d402      	bmi.n	8004832 <_vfiprintf_r+0x2a>
 800482c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800482e:	f7ff fec7 	bl	80045c0 <__retarget_lock_acquire_recursive>
 8004832:	89ab      	ldrh	r3, [r5, #12]
 8004834:	071b      	lsls	r3, r3, #28
 8004836:	d501      	bpl.n	800483c <_vfiprintf_r+0x34>
 8004838:	692b      	ldr	r3, [r5, #16]
 800483a:	b99b      	cbnz	r3, 8004864 <_vfiprintf_r+0x5c>
 800483c:	4629      	mov	r1, r5
 800483e:	4630      	mov	r0, r6
 8004840:	f000 fb78 	bl	8004f34 <__swsetup_r>
 8004844:	b170      	cbz	r0, 8004864 <_vfiprintf_r+0x5c>
 8004846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004848:	07dc      	lsls	r4, r3, #31
 800484a:	d504      	bpl.n	8004856 <_vfiprintf_r+0x4e>
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	b01d      	add	sp, #116	; 0x74
 8004852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004856:	89ab      	ldrh	r3, [r5, #12]
 8004858:	0598      	lsls	r0, r3, #22
 800485a:	d4f7      	bmi.n	800484c <_vfiprintf_r+0x44>
 800485c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800485e:	f7ff feb0 	bl	80045c2 <__retarget_lock_release_recursive>
 8004862:	e7f3      	b.n	800484c <_vfiprintf_r+0x44>
 8004864:	2300      	movs	r3, #0
 8004866:	9309      	str	r3, [sp, #36]	; 0x24
 8004868:	2320      	movs	r3, #32
 800486a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800486e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004872:	2330      	movs	r3, #48	; 0x30
 8004874:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004a28 <_vfiprintf_r+0x220>
 8004878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800487c:	f04f 0901 	mov.w	r9, #1
 8004880:	4623      	mov	r3, r4
 8004882:	469a      	mov	sl, r3
 8004884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004888:	b10a      	cbz	r2, 800488e <_vfiprintf_r+0x86>
 800488a:	2a25      	cmp	r2, #37	; 0x25
 800488c:	d1f9      	bne.n	8004882 <_vfiprintf_r+0x7a>
 800488e:	ebba 0b04 	subs.w	fp, sl, r4
 8004892:	d00b      	beq.n	80048ac <_vfiprintf_r+0xa4>
 8004894:	465b      	mov	r3, fp
 8004896:	4622      	mov	r2, r4
 8004898:	4629      	mov	r1, r5
 800489a:	4630      	mov	r0, r6
 800489c:	f7ff ffa1 	bl	80047e2 <__sfputs_r>
 80048a0:	3001      	adds	r0, #1
 80048a2:	f000 80a9 	beq.w	80049f8 <_vfiprintf_r+0x1f0>
 80048a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048a8:	445a      	add	r2, fp
 80048aa:	9209      	str	r2, [sp, #36]	; 0x24
 80048ac:	f89a 3000 	ldrb.w	r3, [sl]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80a1 	beq.w	80049f8 <_vfiprintf_r+0x1f0>
 80048b6:	2300      	movs	r3, #0
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295
 80048bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c0:	f10a 0a01 	add.w	sl, sl, #1
 80048c4:	9304      	str	r3, [sp, #16]
 80048c6:	9307      	str	r3, [sp, #28]
 80048c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048cc:	931a      	str	r3, [sp, #104]	; 0x68
 80048ce:	4654      	mov	r4, sl
 80048d0:	2205      	movs	r2, #5
 80048d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d6:	4854      	ldr	r0, [pc, #336]	; (8004a28 <_vfiprintf_r+0x220>)
 80048d8:	f7fb fc7a 	bl	80001d0 <memchr>
 80048dc:	9a04      	ldr	r2, [sp, #16]
 80048de:	b9d8      	cbnz	r0, 8004918 <_vfiprintf_r+0x110>
 80048e0:	06d1      	lsls	r1, r2, #27
 80048e2:	bf44      	itt	mi
 80048e4:	2320      	movmi	r3, #32
 80048e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ea:	0713      	lsls	r3, r2, #28
 80048ec:	bf44      	itt	mi
 80048ee:	232b      	movmi	r3, #43	; 0x2b
 80048f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f4:	f89a 3000 	ldrb.w	r3, [sl]
 80048f8:	2b2a      	cmp	r3, #42	; 0x2a
 80048fa:	d015      	beq.n	8004928 <_vfiprintf_r+0x120>
 80048fc:	9a07      	ldr	r2, [sp, #28]
 80048fe:	4654      	mov	r4, sl
 8004900:	2000      	movs	r0, #0
 8004902:	f04f 0c0a 	mov.w	ip, #10
 8004906:	4621      	mov	r1, r4
 8004908:	f811 3b01 	ldrb.w	r3, [r1], #1
 800490c:	3b30      	subs	r3, #48	; 0x30
 800490e:	2b09      	cmp	r3, #9
 8004910:	d94d      	bls.n	80049ae <_vfiprintf_r+0x1a6>
 8004912:	b1b0      	cbz	r0, 8004942 <_vfiprintf_r+0x13a>
 8004914:	9207      	str	r2, [sp, #28]
 8004916:	e014      	b.n	8004942 <_vfiprintf_r+0x13a>
 8004918:	eba0 0308 	sub.w	r3, r0, r8
 800491c:	fa09 f303 	lsl.w	r3, r9, r3
 8004920:	4313      	orrs	r3, r2
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	46a2      	mov	sl, r4
 8004926:	e7d2      	b.n	80048ce <_vfiprintf_r+0xc6>
 8004928:	9b03      	ldr	r3, [sp, #12]
 800492a:	1d19      	adds	r1, r3, #4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	9103      	str	r1, [sp, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	bfbb      	ittet	lt
 8004934:	425b      	neglt	r3, r3
 8004936:	f042 0202 	orrlt.w	r2, r2, #2
 800493a:	9307      	strge	r3, [sp, #28]
 800493c:	9307      	strlt	r3, [sp, #28]
 800493e:	bfb8      	it	lt
 8004940:	9204      	strlt	r2, [sp, #16]
 8004942:	7823      	ldrb	r3, [r4, #0]
 8004944:	2b2e      	cmp	r3, #46	; 0x2e
 8004946:	d10c      	bne.n	8004962 <_vfiprintf_r+0x15a>
 8004948:	7863      	ldrb	r3, [r4, #1]
 800494a:	2b2a      	cmp	r3, #42	; 0x2a
 800494c:	d134      	bne.n	80049b8 <_vfiprintf_r+0x1b0>
 800494e:	9b03      	ldr	r3, [sp, #12]
 8004950:	1d1a      	adds	r2, r3, #4
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	9203      	str	r2, [sp, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	bfb8      	it	lt
 800495a:	f04f 33ff 	movlt.w	r3, #4294967295
 800495e:	3402      	adds	r4, #2
 8004960:	9305      	str	r3, [sp, #20]
 8004962:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004a38 <_vfiprintf_r+0x230>
 8004966:	7821      	ldrb	r1, [r4, #0]
 8004968:	2203      	movs	r2, #3
 800496a:	4650      	mov	r0, sl
 800496c:	f7fb fc30 	bl	80001d0 <memchr>
 8004970:	b138      	cbz	r0, 8004982 <_vfiprintf_r+0x17a>
 8004972:	9b04      	ldr	r3, [sp, #16]
 8004974:	eba0 000a 	sub.w	r0, r0, sl
 8004978:	2240      	movs	r2, #64	; 0x40
 800497a:	4082      	lsls	r2, r0
 800497c:	4313      	orrs	r3, r2
 800497e:	3401      	adds	r4, #1
 8004980:	9304      	str	r3, [sp, #16]
 8004982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004986:	4829      	ldr	r0, [pc, #164]	; (8004a2c <_vfiprintf_r+0x224>)
 8004988:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800498c:	2206      	movs	r2, #6
 800498e:	f7fb fc1f 	bl	80001d0 <memchr>
 8004992:	2800      	cmp	r0, #0
 8004994:	d03f      	beq.n	8004a16 <_vfiprintf_r+0x20e>
 8004996:	4b26      	ldr	r3, [pc, #152]	; (8004a30 <_vfiprintf_r+0x228>)
 8004998:	bb1b      	cbnz	r3, 80049e2 <_vfiprintf_r+0x1da>
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	3307      	adds	r3, #7
 800499e:	f023 0307 	bic.w	r3, r3, #7
 80049a2:	3308      	adds	r3, #8
 80049a4:	9303      	str	r3, [sp, #12]
 80049a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049a8:	443b      	add	r3, r7
 80049aa:	9309      	str	r3, [sp, #36]	; 0x24
 80049ac:	e768      	b.n	8004880 <_vfiprintf_r+0x78>
 80049ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b2:	460c      	mov	r4, r1
 80049b4:	2001      	movs	r0, #1
 80049b6:	e7a6      	b.n	8004906 <_vfiprintf_r+0xfe>
 80049b8:	2300      	movs	r3, #0
 80049ba:	3401      	adds	r4, #1
 80049bc:	9305      	str	r3, [sp, #20]
 80049be:	4619      	mov	r1, r3
 80049c0:	f04f 0c0a 	mov.w	ip, #10
 80049c4:	4620      	mov	r0, r4
 80049c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049ca:	3a30      	subs	r2, #48	; 0x30
 80049cc:	2a09      	cmp	r2, #9
 80049ce:	d903      	bls.n	80049d8 <_vfiprintf_r+0x1d0>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0c6      	beq.n	8004962 <_vfiprintf_r+0x15a>
 80049d4:	9105      	str	r1, [sp, #20]
 80049d6:	e7c4      	b.n	8004962 <_vfiprintf_r+0x15a>
 80049d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049dc:	4604      	mov	r4, r0
 80049de:	2301      	movs	r3, #1
 80049e0:	e7f0      	b.n	80049c4 <_vfiprintf_r+0x1bc>
 80049e2:	ab03      	add	r3, sp, #12
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	462a      	mov	r2, r5
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <_vfiprintf_r+0x22c>)
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	4630      	mov	r0, r6
 80049ee:	f3af 8000 	nop.w
 80049f2:	4607      	mov	r7, r0
 80049f4:	1c78      	adds	r0, r7, #1
 80049f6:	d1d6      	bne.n	80049a6 <_vfiprintf_r+0x19e>
 80049f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049fa:	07d9      	lsls	r1, r3, #31
 80049fc:	d405      	bmi.n	8004a0a <_vfiprintf_r+0x202>
 80049fe:	89ab      	ldrh	r3, [r5, #12]
 8004a00:	059a      	lsls	r2, r3, #22
 8004a02:	d402      	bmi.n	8004a0a <_vfiprintf_r+0x202>
 8004a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a06:	f7ff fddc 	bl	80045c2 <__retarget_lock_release_recursive>
 8004a0a:	89ab      	ldrh	r3, [r5, #12]
 8004a0c:	065b      	lsls	r3, r3, #25
 8004a0e:	f53f af1d 	bmi.w	800484c <_vfiprintf_r+0x44>
 8004a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a14:	e71c      	b.n	8004850 <_vfiprintf_r+0x48>
 8004a16:	ab03      	add	r3, sp, #12
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	462a      	mov	r2, r5
 8004a1c:	4b05      	ldr	r3, [pc, #20]	; (8004a34 <_vfiprintf_r+0x22c>)
 8004a1e:	a904      	add	r1, sp, #16
 8004a20:	4630      	mov	r0, r6
 8004a22:	f000 f879 	bl	8004b18 <_printf_i>
 8004a26:	e7e4      	b.n	80049f2 <_vfiprintf_r+0x1ea>
 8004a28:	08005178 	.word	0x08005178
 8004a2c:	08005182 	.word	0x08005182
 8004a30:	00000000 	.word	0x00000000
 8004a34:	080047e3 	.word	0x080047e3
 8004a38:	0800517e 	.word	0x0800517e

08004a3c <_printf_common>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	4616      	mov	r6, r2
 8004a42:	4699      	mov	r9, r3
 8004a44:	688a      	ldr	r2, [r1, #8]
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bfb8      	it	lt
 8004a50:	4613      	movlt	r3, r2
 8004a52:	6033      	str	r3, [r6, #0]
 8004a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a58:	4607      	mov	r7, r0
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	b10a      	cbz	r2, 8004a62 <_printf_common+0x26>
 8004a5e:	3301      	adds	r3, #1
 8004a60:	6033      	str	r3, [r6, #0]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	0699      	lsls	r1, r3, #26
 8004a66:	bf42      	ittt	mi
 8004a68:	6833      	ldrmi	r3, [r6, #0]
 8004a6a:	3302      	addmi	r3, #2
 8004a6c:	6033      	strmi	r3, [r6, #0]
 8004a6e:	6825      	ldr	r5, [r4, #0]
 8004a70:	f015 0506 	ands.w	r5, r5, #6
 8004a74:	d106      	bne.n	8004a84 <_printf_common+0x48>
 8004a76:	f104 0a19 	add.w	sl, r4, #25
 8004a7a:	68e3      	ldr	r3, [r4, #12]
 8004a7c:	6832      	ldr	r2, [r6, #0]
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	42ab      	cmp	r3, r5
 8004a82:	dc26      	bgt.n	8004ad2 <_printf_common+0x96>
 8004a84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a88:	1e13      	subs	r3, r2, #0
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	bf18      	it	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	0692      	lsls	r2, r2, #26
 8004a92:	d42b      	bmi.n	8004aec <_printf_common+0xb0>
 8004a94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a98:	4649      	mov	r1, r9
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	47c0      	blx	r8
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d01e      	beq.n	8004ae0 <_printf_common+0xa4>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	6922      	ldr	r2, [r4, #16]
 8004aa6:	f003 0306 	and.w	r3, r3, #6
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	bf02      	ittt	eq
 8004aae:	68e5      	ldreq	r5, [r4, #12]
 8004ab0:	6833      	ldreq	r3, [r6, #0]
 8004ab2:	1aed      	subeq	r5, r5, r3
 8004ab4:	68a3      	ldr	r3, [r4, #8]
 8004ab6:	bf0c      	ite	eq
 8004ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004abc:	2500      	movne	r5, #0
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	bfc4      	itt	gt
 8004ac2:	1a9b      	subgt	r3, r3, r2
 8004ac4:	18ed      	addgt	r5, r5, r3
 8004ac6:	2600      	movs	r6, #0
 8004ac8:	341a      	adds	r4, #26
 8004aca:	42b5      	cmp	r5, r6
 8004acc:	d11a      	bne.n	8004b04 <_printf_common+0xc8>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e008      	b.n	8004ae4 <_printf_common+0xa8>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	4652      	mov	r2, sl
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	4638      	mov	r0, r7
 8004ada:	47c0      	blx	r8
 8004adc:	3001      	adds	r0, #1
 8004ade:	d103      	bne.n	8004ae8 <_printf_common+0xac>
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae8:	3501      	adds	r5, #1
 8004aea:	e7c6      	b.n	8004a7a <_printf_common+0x3e>
 8004aec:	18e1      	adds	r1, r4, r3
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	2030      	movs	r0, #48	; 0x30
 8004af2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004af6:	4422      	add	r2, r4
 8004af8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004afc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b00:	3302      	adds	r3, #2
 8004b02:	e7c7      	b.n	8004a94 <_printf_common+0x58>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4622      	mov	r2, r4
 8004b08:	4649      	mov	r1, r9
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	47c0      	blx	r8
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d0e6      	beq.n	8004ae0 <_printf_common+0xa4>
 8004b12:	3601      	adds	r6, #1
 8004b14:	e7d9      	b.n	8004aca <_printf_common+0x8e>
	...

08004b18 <_printf_i>:
 8004b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b1c:	7e0f      	ldrb	r7, [r1, #24]
 8004b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b20:	2f78      	cmp	r7, #120	; 0x78
 8004b22:	4691      	mov	r9, r2
 8004b24:	4680      	mov	r8, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	469a      	mov	sl, r3
 8004b2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b2e:	d807      	bhi.n	8004b40 <_printf_i+0x28>
 8004b30:	2f62      	cmp	r7, #98	; 0x62
 8004b32:	d80a      	bhi.n	8004b4a <_printf_i+0x32>
 8004b34:	2f00      	cmp	r7, #0
 8004b36:	f000 80d4 	beq.w	8004ce2 <_printf_i+0x1ca>
 8004b3a:	2f58      	cmp	r7, #88	; 0x58
 8004b3c:	f000 80c0 	beq.w	8004cc0 <_printf_i+0x1a8>
 8004b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b48:	e03a      	b.n	8004bc0 <_printf_i+0xa8>
 8004b4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b4e:	2b15      	cmp	r3, #21
 8004b50:	d8f6      	bhi.n	8004b40 <_printf_i+0x28>
 8004b52:	a101      	add	r1, pc, #4	; (adr r1, 8004b58 <_printf_i+0x40>)
 8004b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b58:	08004bb1 	.word	0x08004bb1
 8004b5c:	08004bc5 	.word	0x08004bc5
 8004b60:	08004b41 	.word	0x08004b41
 8004b64:	08004b41 	.word	0x08004b41
 8004b68:	08004b41 	.word	0x08004b41
 8004b6c:	08004b41 	.word	0x08004b41
 8004b70:	08004bc5 	.word	0x08004bc5
 8004b74:	08004b41 	.word	0x08004b41
 8004b78:	08004b41 	.word	0x08004b41
 8004b7c:	08004b41 	.word	0x08004b41
 8004b80:	08004b41 	.word	0x08004b41
 8004b84:	08004cc9 	.word	0x08004cc9
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004c83 	.word	0x08004c83
 8004b90:	08004b41 	.word	0x08004b41
 8004b94:	08004b41 	.word	0x08004b41
 8004b98:	08004ceb 	.word	0x08004ceb
 8004b9c:	08004b41 	.word	0x08004b41
 8004ba0:	08004bf1 	.word	0x08004bf1
 8004ba4:	08004b41 	.word	0x08004b41
 8004ba8:	08004b41 	.word	0x08004b41
 8004bac:	08004c8b 	.word	0x08004c8b
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	1d1a      	adds	r2, r3, #4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	602a      	str	r2, [r5, #0]
 8004bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e09f      	b.n	8004d04 <_printf_i+0x1ec>
 8004bc4:	6820      	ldr	r0, [r4, #0]
 8004bc6:	682b      	ldr	r3, [r5, #0]
 8004bc8:	0607      	lsls	r7, r0, #24
 8004bca:	f103 0104 	add.w	r1, r3, #4
 8004bce:	6029      	str	r1, [r5, #0]
 8004bd0:	d501      	bpl.n	8004bd6 <_printf_i+0xbe>
 8004bd2:	681e      	ldr	r6, [r3, #0]
 8004bd4:	e003      	b.n	8004bde <_printf_i+0xc6>
 8004bd6:	0646      	lsls	r6, r0, #25
 8004bd8:	d5fb      	bpl.n	8004bd2 <_printf_i+0xba>
 8004bda:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	da03      	bge.n	8004bea <_printf_i+0xd2>
 8004be2:	232d      	movs	r3, #45	; 0x2d
 8004be4:	4276      	negs	r6, r6
 8004be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bea:	485a      	ldr	r0, [pc, #360]	; (8004d54 <_printf_i+0x23c>)
 8004bec:	230a      	movs	r3, #10
 8004bee:	e012      	b.n	8004c16 <_printf_i+0xfe>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	6820      	ldr	r0, [r4, #0]
 8004bf4:	1d19      	adds	r1, r3, #4
 8004bf6:	6029      	str	r1, [r5, #0]
 8004bf8:	0605      	lsls	r5, r0, #24
 8004bfa:	d501      	bpl.n	8004c00 <_printf_i+0xe8>
 8004bfc:	681e      	ldr	r6, [r3, #0]
 8004bfe:	e002      	b.n	8004c06 <_printf_i+0xee>
 8004c00:	0641      	lsls	r1, r0, #25
 8004c02:	d5fb      	bpl.n	8004bfc <_printf_i+0xe4>
 8004c04:	881e      	ldrh	r6, [r3, #0]
 8004c06:	4853      	ldr	r0, [pc, #332]	; (8004d54 <_printf_i+0x23c>)
 8004c08:	2f6f      	cmp	r7, #111	; 0x6f
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2308      	moveq	r3, #8
 8004c0e:	230a      	movne	r3, #10
 8004c10:	2100      	movs	r1, #0
 8004c12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c16:	6865      	ldr	r5, [r4, #4]
 8004c18:	60a5      	str	r5, [r4, #8]
 8004c1a:	2d00      	cmp	r5, #0
 8004c1c:	bfa2      	ittt	ge
 8004c1e:	6821      	ldrge	r1, [r4, #0]
 8004c20:	f021 0104 	bicge.w	r1, r1, #4
 8004c24:	6021      	strge	r1, [r4, #0]
 8004c26:	b90e      	cbnz	r6, 8004c2c <_printf_i+0x114>
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	d04b      	beq.n	8004cc4 <_printf_i+0x1ac>
 8004c2c:	4615      	mov	r5, r2
 8004c2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c32:	fb03 6711 	mls	r7, r3, r1, r6
 8004c36:	5dc7      	ldrb	r7, [r0, r7]
 8004c38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c3c:	4637      	mov	r7, r6
 8004c3e:	42bb      	cmp	r3, r7
 8004c40:	460e      	mov	r6, r1
 8004c42:	d9f4      	bls.n	8004c2e <_printf_i+0x116>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d10b      	bne.n	8004c60 <_printf_i+0x148>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	07de      	lsls	r6, r3, #31
 8004c4c:	d508      	bpl.n	8004c60 <_printf_i+0x148>
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6861      	ldr	r1, [r4, #4]
 8004c52:	4299      	cmp	r1, r3
 8004c54:	bfde      	ittt	le
 8004c56:	2330      	movle	r3, #48	; 0x30
 8004c58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c60:	1b52      	subs	r2, r2, r5
 8004c62:	6122      	str	r2, [r4, #16]
 8004c64:	f8cd a000 	str.w	sl, [sp]
 8004c68:	464b      	mov	r3, r9
 8004c6a:	aa03      	add	r2, sp, #12
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4640      	mov	r0, r8
 8004c70:	f7ff fee4 	bl	8004a3c <_printf_common>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d14a      	bne.n	8004d0e <_printf_i+0x1f6>
 8004c78:	f04f 30ff 	mov.w	r0, #4294967295
 8004c7c:	b004      	add	sp, #16
 8004c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	f043 0320 	orr.w	r3, r3, #32
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	4833      	ldr	r0, [pc, #204]	; (8004d58 <_printf_i+0x240>)
 8004c8c:	2778      	movs	r7, #120	; 0x78
 8004c8e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	6829      	ldr	r1, [r5, #0]
 8004c96:	061f      	lsls	r7, r3, #24
 8004c98:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c9c:	d402      	bmi.n	8004ca4 <_printf_i+0x18c>
 8004c9e:	065f      	lsls	r7, r3, #25
 8004ca0:	bf48      	it	mi
 8004ca2:	b2b6      	uxthmi	r6, r6
 8004ca4:	07df      	lsls	r7, r3, #31
 8004ca6:	bf48      	it	mi
 8004ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8004cac:	6029      	str	r1, [r5, #0]
 8004cae:	bf48      	it	mi
 8004cb0:	6023      	strmi	r3, [r4, #0]
 8004cb2:	b91e      	cbnz	r6, 8004cbc <_printf_i+0x1a4>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	f023 0320 	bic.w	r3, r3, #32
 8004cba:	6023      	str	r3, [r4, #0]
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	e7a7      	b.n	8004c10 <_printf_i+0xf8>
 8004cc0:	4824      	ldr	r0, [pc, #144]	; (8004d54 <_printf_i+0x23c>)
 8004cc2:	e7e4      	b.n	8004c8e <_printf_i+0x176>
 8004cc4:	4615      	mov	r5, r2
 8004cc6:	e7bd      	b.n	8004c44 <_printf_i+0x12c>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	6826      	ldr	r6, [r4, #0]
 8004ccc:	6961      	ldr	r1, [r4, #20]
 8004cce:	1d18      	adds	r0, r3, #4
 8004cd0:	6028      	str	r0, [r5, #0]
 8004cd2:	0635      	lsls	r5, r6, #24
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	d501      	bpl.n	8004cdc <_printf_i+0x1c4>
 8004cd8:	6019      	str	r1, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <_printf_i+0x1ca>
 8004cdc:	0670      	lsls	r0, r6, #25
 8004cde:	d5fb      	bpl.n	8004cd8 <_printf_i+0x1c0>
 8004ce0:	8019      	strh	r1, [r3, #0]
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	6123      	str	r3, [r4, #16]
 8004ce6:	4615      	mov	r5, r2
 8004ce8:	e7bc      	b.n	8004c64 <_printf_i+0x14c>
 8004cea:	682b      	ldr	r3, [r5, #0]
 8004cec:	1d1a      	adds	r2, r3, #4
 8004cee:	602a      	str	r2, [r5, #0]
 8004cf0:	681d      	ldr	r5, [r3, #0]
 8004cf2:	6862      	ldr	r2, [r4, #4]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	f7fb fa6a 	bl	80001d0 <memchr>
 8004cfc:	b108      	cbz	r0, 8004d02 <_printf_i+0x1ea>
 8004cfe:	1b40      	subs	r0, r0, r5
 8004d00:	6060      	str	r0, [r4, #4]
 8004d02:	6863      	ldr	r3, [r4, #4]
 8004d04:	6123      	str	r3, [r4, #16]
 8004d06:	2300      	movs	r3, #0
 8004d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0c:	e7aa      	b.n	8004c64 <_printf_i+0x14c>
 8004d0e:	6923      	ldr	r3, [r4, #16]
 8004d10:	462a      	mov	r2, r5
 8004d12:	4649      	mov	r1, r9
 8004d14:	4640      	mov	r0, r8
 8004d16:	47d0      	blx	sl
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d0ad      	beq.n	8004c78 <_printf_i+0x160>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	079b      	lsls	r3, r3, #30
 8004d20:	d413      	bmi.n	8004d4a <_printf_i+0x232>
 8004d22:	68e0      	ldr	r0, [r4, #12]
 8004d24:	9b03      	ldr	r3, [sp, #12]
 8004d26:	4298      	cmp	r0, r3
 8004d28:	bfb8      	it	lt
 8004d2a:	4618      	movlt	r0, r3
 8004d2c:	e7a6      	b.n	8004c7c <_printf_i+0x164>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	4632      	mov	r2, r6
 8004d32:	4649      	mov	r1, r9
 8004d34:	4640      	mov	r0, r8
 8004d36:	47d0      	blx	sl
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d09d      	beq.n	8004c78 <_printf_i+0x160>
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	68e3      	ldr	r3, [r4, #12]
 8004d40:	9903      	ldr	r1, [sp, #12]
 8004d42:	1a5b      	subs	r3, r3, r1
 8004d44:	42ab      	cmp	r3, r5
 8004d46:	dcf2      	bgt.n	8004d2e <_printf_i+0x216>
 8004d48:	e7eb      	b.n	8004d22 <_printf_i+0x20a>
 8004d4a:	2500      	movs	r5, #0
 8004d4c:	f104 0619 	add.w	r6, r4, #25
 8004d50:	e7f5      	b.n	8004d3e <_printf_i+0x226>
 8004d52:	bf00      	nop
 8004d54:	08005189 	.word	0x08005189
 8004d58:	0800519a 	.word	0x0800519a

08004d5c <__sflush_r>:
 8004d5c:	898a      	ldrh	r2, [r1, #12]
 8004d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d62:	4605      	mov	r5, r0
 8004d64:	0710      	lsls	r0, r2, #28
 8004d66:	460c      	mov	r4, r1
 8004d68:	d458      	bmi.n	8004e1c <__sflush_r+0xc0>
 8004d6a:	684b      	ldr	r3, [r1, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	dc05      	bgt.n	8004d7c <__sflush_r+0x20>
 8004d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	dc02      	bgt.n	8004d7c <__sflush_r+0x20>
 8004d76:	2000      	movs	r0, #0
 8004d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d7e:	2e00      	cmp	r6, #0
 8004d80:	d0f9      	beq.n	8004d76 <__sflush_r+0x1a>
 8004d82:	2300      	movs	r3, #0
 8004d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d88:	682f      	ldr	r7, [r5, #0]
 8004d8a:	6a21      	ldr	r1, [r4, #32]
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	d032      	beq.n	8004df6 <__sflush_r+0x9a>
 8004d90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d92:	89a3      	ldrh	r3, [r4, #12]
 8004d94:	075a      	lsls	r2, r3, #29
 8004d96:	d505      	bpl.n	8004da4 <__sflush_r+0x48>
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	1ac0      	subs	r0, r0, r3
 8004d9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d9e:	b10b      	cbz	r3, 8004da4 <__sflush_r+0x48>
 8004da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004da2:	1ac0      	subs	r0, r0, r3
 8004da4:	2300      	movs	r3, #0
 8004da6:	4602      	mov	r2, r0
 8004da8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004daa:	6a21      	ldr	r1, [r4, #32]
 8004dac:	4628      	mov	r0, r5
 8004dae:	47b0      	blx	r6
 8004db0:	1c43      	adds	r3, r0, #1
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	d106      	bne.n	8004dc4 <__sflush_r+0x68>
 8004db6:	6829      	ldr	r1, [r5, #0]
 8004db8:	291d      	cmp	r1, #29
 8004dba:	d82b      	bhi.n	8004e14 <__sflush_r+0xb8>
 8004dbc:	4a29      	ldr	r2, [pc, #164]	; (8004e64 <__sflush_r+0x108>)
 8004dbe:	410a      	asrs	r2, r1
 8004dc0:	07d6      	lsls	r6, r2, #31
 8004dc2:	d427      	bmi.n	8004e14 <__sflush_r+0xb8>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	6062      	str	r2, [r4, #4]
 8004dc8:	04d9      	lsls	r1, r3, #19
 8004dca:	6922      	ldr	r2, [r4, #16]
 8004dcc:	6022      	str	r2, [r4, #0]
 8004dce:	d504      	bpl.n	8004dda <__sflush_r+0x7e>
 8004dd0:	1c42      	adds	r2, r0, #1
 8004dd2:	d101      	bne.n	8004dd8 <__sflush_r+0x7c>
 8004dd4:	682b      	ldr	r3, [r5, #0]
 8004dd6:	b903      	cbnz	r3, 8004dda <__sflush_r+0x7e>
 8004dd8:	6560      	str	r0, [r4, #84]	; 0x54
 8004dda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ddc:	602f      	str	r7, [r5, #0]
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d0c9      	beq.n	8004d76 <__sflush_r+0x1a>
 8004de2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004de6:	4299      	cmp	r1, r3
 8004de8:	d002      	beq.n	8004df0 <__sflush_r+0x94>
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7ff fbea 	bl	80045c4 <_free_r>
 8004df0:	2000      	movs	r0, #0
 8004df2:	6360      	str	r0, [r4, #52]	; 0x34
 8004df4:	e7c0      	b.n	8004d78 <__sflush_r+0x1c>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4628      	mov	r0, r5
 8004dfa:	47b0      	blx	r6
 8004dfc:	1c41      	adds	r1, r0, #1
 8004dfe:	d1c8      	bne.n	8004d92 <__sflush_r+0x36>
 8004e00:	682b      	ldr	r3, [r5, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0c5      	beq.n	8004d92 <__sflush_r+0x36>
 8004e06:	2b1d      	cmp	r3, #29
 8004e08:	d001      	beq.n	8004e0e <__sflush_r+0xb2>
 8004e0a:	2b16      	cmp	r3, #22
 8004e0c:	d101      	bne.n	8004e12 <__sflush_r+0xb6>
 8004e0e:	602f      	str	r7, [r5, #0]
 8004e10:	e7b1      	b.n	8004d76 <__sflush_r+0x1a>
 8004e12:	89a3      	ldrh	r3, [r4, #12]
 8004e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	e7ad      	b.n	8004d78 <__sflush_r+0x1c>
 8004e1c:	690f      	ldr	r7, [r1, #16]
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	d0a9      	beq.n	8004d76 <__sflush_r+0x1a>
 8004e22:	0793      	lsls	r3, r2, #30
 8004e24:	680e      	ldr	r6, [r1, #0]
 8004e26:	bf08      	it	eq
 8004e28:	694b      	ldreq	r3, [r1, #20]
 8004e2a:	600f      	str	r7, [r1, #0]
 8004e2c:	bf18      	it	ne
 8004e2e:	2300      	movne	r3, #0
 8004e30:	eba6 0807 	sub.w	r8, r6, r7
 8004e34:	608b      	str	r3, [r1, #8]
 8004e36:	f1b8 0f00 	cmp.w	r8, #0
 8004e3a:	dd9c      	ble.n	8004d76 <__sflush_r+0x1a>
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e40:	4643      	mov	r3, r8
 8004e42:	463a      	mov	r2, r7
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b0      	blx	r6
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	dc06      	bgt.n	8004e5a <__sflush_r+0xfe>
 8004e4c:	89a3      	ldrh	r3, [r4, #12]
 8004e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e52:	81a3      	strh	r3, [r4, #12]
 8004e54:	f04f 30ff 	mov.w	r0, #4294967295
 8004e58:	e78e      	b.n	8004d78 <__sflush_r+0x1c>
 8004e5a:	4407      	add	r7, r0
 8004e5c:	eba8 0800 	sub.w	r8, r8, r0
 8004e60:	e7e9      	b.n	8004e36 <__sflush_r+0xda>
 8004e62:	bf00      	nop
 8004e64:	dfbffffe 	.word	0xdfbffffe

08004e68 <_fflush_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	690b      	ldr	r3, [r1, #16]
 8004e6c:	4605      	mov	r5, r0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	b913      	cbnz	r3, 8004e78 <_fflush_r+0x10>
 8004e72:	2500      	movs	r5, #0
 8004e74:	4628      	mov	r0, r5
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	b118      	cbz	r0, 8004e82 <_fflush_r+0x1a>
 8004e7a:	6a03      	ldr	r3, [r0, #32]
 8004e7c:	b90b      	cbnz	r3, 8004e82 <_fflush_r+0x1a>
 8004e7e:	f7ff fa9b 	bl	80043b8 <__sinit>
 8004e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f3      	beq.n	8004e72 <_fflush_r+0xa>
 8004e8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e8c:	07d0      	lsls	r0, r2, #31
 8004e8e:	d404      	bmi.n	8004e9a <_fflush_r+0x32>
 8004e90:	0599      	lsls	r1, r3, #22
 8004e92:	d402      	bmi.n	8004e9a <_fflush_r+0x32>
 8004e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e96:	f7ff fb93 	bl	80045c0 <__retarget_lock_acquire_recursive>
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	4621      	mov	r1, r4
 8004e9e:	f7ff ff5d 	bl	8004d5c <__sflush_r>
 8004ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ea4:	07da      	lsls	r2, r3, #31
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	d4e4      	bmi.n	8004e74 <_fflush_r+0xc>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	059b      	lsls	r3, r3, #22
 8004eae:	d4e1      	bmi.n	8004e74 <_fflush_r+0xc>
 8004eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004eb2:	f7ff fb86 	bl	80045c2 <__retarget_lock_release_recursive>
 8004eb6:	e7dd      	b.n	8004e74 <_fflush_r+0xc>

08004eb8 <__swbuf_r>:
 8004eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eba:	460e      	mov	r6, r1
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	b118      	cbz	r0, 8004eca <__swbuf_r+0x12>
 8004ec2:	6a03      	ldr	r3, [r0, #32]
 8004ec4:	b90b      	cbnz	r3, 8004eca <__swbuf_r+0x12>
 8004ec6:	f7ff fa77 	bl	80043b8 <__sinit>
 8004eca:	69a3      	ldr	r3, [r4, #24]
 8004ecc:	60a3      	str	r3, [r4, #8]
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	071a      	lsls	r2, r3, #28
 8004ed2:	d525      	bpl.n	8004f20 <__swbuf_r+0x68>
 8004ed4:	6923      	ldr	r3, [r4, #16]
 8004ed6:	b31b      	cbz	r3, 8004f20 <__swbuf_r+0x68>
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	6922      	ldr	r2, [r4, #16]
 8004edc:	1a98      	subs	r0, r3, r2
 8004ede:	6963      	ldr	r3, [r4, #20]
 8004ee0:	b2f6      	uxtb	r6, r6
 8004ee2:	4283      	cmp	r3, r0
 8004ee4:	4637      	mov	r7, r6
 8004ee6:	dc04      	bgt.n	8004ef2 <__swbuf_r+0x3a>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7ff ffbc 	bl	8004e68 <_fflush_r>
 8004ef0:	b9e0      	cbnz	r0, 8004f2c <__swbuf_r+0x74>
 8004ef2:	68a3      	ldr	r3, [r4, #8]
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	60a3      	str	r3, [r4, #8]
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	6022      	str	r2, [r4, #0]
 8004efe:	701e      	strb	r6, [r3, #0]
 8004f00:	6962      	ldr	r2, [r4, #20]
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d004      	beq.n	8004f12 <__swbuf_r+0x5a>
 8004f08:	89a3      	ldrh	r3, [r4, #12]
 8004f0a:	07db      	lsls	r3, r3, #31
 8004f0c:	d506      	bpl.n	8004f1c <__swbuf_r+0x64>
 8004f0e:	2e0a      	cmp	r6, #10
 8004f10:	d104      	bne.n	8004f1c <__swbuf_r+0x64>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7ff ffa7 	bl	8004e68 <_fflush_r>
 8004f1a:	b938      	cbnz	r0, 8004f2c <__swbuf_r+0x74>
 8004f1c:	4638      	mov	r0, r7
 8004f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f20:	4621      	mov	r1, r4
 8004f22:	4628      	mov	r0, r5
 8004f24:	f000 f806 	bl	8004f34 <__swsetup_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d0d5      	beq.n	8004ed8 <__swbuf_r+0x20>
 8004f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f30:	e7f4      	b.n	8004f1c <__swbuf_r+0x64>
	...

08004f34 <__swsetup_r>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4b2a      	ldr	r3, [pc, #168]	; (8004fe0 <__swsetup_r+0xac>)
 8004f38:	4605      	mov	r5, r0
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	b118      	cbz	r0, 8004f48 <__swsetup_r+0x14>
 8004f40:	6a03      	ldr	r3, [r0, #32]
 8004f42:	b90b      	cbnz	r3, 8004f48 <__swsetup_r+0x14>
 8004f44:	f7ff fa38 	bl	80043b8 <__sinit>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f4e:	0718      	lsls	r0, r3, #28
 8004f50:	d422      	bmi.n	8004f98 <__swsetup_r+0x64>
 8004f52:	06d9      	lsls	r1, r3, #27
 8004f54:	d407      	bmi.n	8004f66 <__swsetup_r+0x32>
 8004f56:	2309      	movs	r3, #9
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	e034      	b.n	8004fd0 <__swsetup_r+0x9c>
 8004f66:	0758      	lsls	r0, r3, #29
 8004f68:	d512      	bpl.n	8004f90 <__swsetup_r+0x5c>
 8004f6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f6c:	b141      	cbz	r1, 8004f80 <__swsetup_r+0x4c>
 8004f6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f72:	4299      	cmp	r1, r3
 8004f74:	d002      	beq.n	8004f7c <__swsetup_r+0x48>
 8004f76:	4628      	mov	r0, r5
 8004f78:	f7ff fb24 	bl	80045c4 <_free_r>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f80:	89a3      	ldrh	r3, [r4, #12]
 8004f82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f86:	81a3      	strh	r3, [r4, #12]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	6063      	str	r3, [r4, #4]
 8004f8c:	6923      	ldr	r3, [r4, #16]
 8004f8e:	6023      	str	r3, [r4, #0]
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f043 0308 	orr.w	r3, r3, #8
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	b94b      	cbnz	r3, 8004fb0 <__swsetup_r+0x7c>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fa6:	d003      	beq.n	8004fb0 <__swsetup_r+0x7c>
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4628      	mov	r0, r5
 8004fac:	f000 f850 	bl	8005050 <__smakebuf_r>
 8004fb0:	89a0      	ldrh	r0, [r4, #12]
 8004fb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fb6:	f010 0301 	ands.w	r3, r0, #1
 8004fba:	d00a      	beq.n	8004fd2 <__swsetup_r+0x9e>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60a3      	str	r3, [r4, #8]
 8004fc0:	6963      	ldr	r3, [r4, #20]
 8004fc2:	425b      	negs	r3, r3
 8004fc4:	61a3      	str	r3, [r4, #24]
 8004fc6:	6923      	ldr	r3, [r4, #16]
 8004fc8:	b943      	cbnz	r3, 8004fdc <__swsetup_r+0xa8>
 8004fca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fce:	d1c4      	bne.n	8004f5a <__swsetup_r+0x26>
 8004fd0:	bd38      	pop	{r3, r4, r5, pc}
 8004fd2:	0781      	lsls	r1, r0, #30
 8004fd4:	bf58      	it	pl
 8004fd6:	6963      	ldrpl	r3, [r4, #20]
 8004fd8:	60a3      	str	r3, [r4, #8]
 8004fda:	e7f4      	b.n	8004fc6 <__swsetup_r+0x92>
 8004fdc:	2000      	movs	r0, #0
 8004fde:	e7f7      	b.n	8004fd0 <__swsetup_r+0x9c>
 8004fe0:	20000064 	.word	0x20000064

08004fe4 <_sbrk_r>:
 8004fe4:	b538      	push	{r3, r4, r5, lr}
 8004fe6:	4d06      	ldr	r5, [pc, #24]	; (8005000 <_sbrk_r+0x1c>)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	4604      	mov	r4, r0
 8004fec:	4608      	mov	r0, r1
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	f7fb fe1c 	bl	8000c2c <_sbrk>
 8004ff4:	1c43      	adds	r3, r0, #1
 8004ff6:	d102      	bne.n	8004ffe <_sbrk_r+0x1a>
 8004ff8:	682b      	ldr	r3, [r5, #0]
 8004ffa:	b103      	cbz	r3, 8004ffe <_sbrk_r+0x1a>
 8004ffc:	6023      	str	r3, [r4, #0]
 8004ffe:	bd38      	pop	{r3, r4, r5, pc}
 8005000:	20000270 	.word	0x20000270

08005004 <__swhatbuf_r>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	460c      	mov	r4, r1
 8005008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500c:	2900      	cmp	r1, #0
 800500e:	b096      	sub	sp, #88	; 0x58
 8005010:	4615      	mov	r5, r2
 8005012:	461e      	mov	r6, r3
 8005014:	da0d      	bge.n	8005032 <__swhatbuf_r+0x2e>
 8005016:	89a3      	ldrh	r3, [r4, #12]
 8005018:	f013 0f80 	tst.w	r3, #128	; 0x80
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	bf0c      	ite	eq
 8005022:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005026:	2340      	movne	r3, #64	; 0x40
 8005028:	2000      	movs	r0, #0
 800502a:	6031      	str	r1, [r6, #0]
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	b016      	add	sp, #88	; 0x58
 8005030:	bd70      	pop	{r4, r5, r6, pc}
 8005032:	466a      	mov	r2, sp
 8005034:	f000 f848 	bl	80050c8 <_fstat_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	dbec      	blt.n	8005016 <__swhatbuf_r+0x12>
 800503c:	9901      	ldr	r1, [sp, #4]
 800503e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005042:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005046:	4259      	negs	r1, r3
 8005048:	4159      	adcs	r1, r3
 800504a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800504e:	e7eb      	b.n	8005028 <__swhatbuf_r+0x24>

08005050 <__smakebuf_r>:
 8005050:	898b      	ldrh	r3, [r1, #12]
 8005052:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005054:	079d      	lsls	r5, r3, #30
 8005056:	4606      	mov	r6, r0
 8005058:	460c      	mov	r4, r1
 800505a:	d507      	bpl.n	800506c <__smakebuf_r+0x1c>
 800505c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	2301      	movs	r3, #1
 8005066:	6163      	str	r3, [r4, #20]
 8005068:	b002      	add	sp, #8
 800506a:	bd70      	pop	{r4, r5, r6, pc}
 800506c:	ab01      	add	r3, sp, #4
 800506e:	466a      	mov	r2, sp
 8005070:	f7ff ffc8 	bl	8005004 <__swhatbuf_r>
 8005074:	9900      	ldr	r1, [sp, #0]
 8005076:	4605      	mov	r5, r0
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff fb0f 	bl	800469c <_malloc_r>
 800507e:	b948      	cbnz	r0, 8005094 <__smakebuf_r+0x44>
 8005080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005084:	059a      	lsls	r2, r3, #22
 8005086:	d4ef      	bmi.n	8005068 <__smakebuf_r+0x18>
 8005088:	f023 0303 	bic.w	r3, r3, #3
 800508c:	f043 0302 	orr.w	r3, r3, #2
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	e7e3      	b.n	800505c <__smakebuf_r+0xc>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	6020      	str	r0, [r4, #0]
 8005098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509c:	81a3      	strh	r3, [r4, #12]
 800509e:	9b00      	ldr	r3, [sp, #0]
 80050a0:	6163      	str	r3, [r4, #20]
 80050a2:	9b01      	ldr	r3, [sp, #4]
 80050a4:	6120      	str	r0, [r4, #16]
 80050a6:	b15b      	cbz	r3, 80050c0 <__smakebuf_r+0x70>
 80050a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ac:	4630      	mov	r0, r6
 80050ae:	f000 f81d 	bl	80050ec <_isatty_r>
 80050b2:	b128      	cbz	r0, 80050c0 <__smakebuf_r+0x70>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	f043 0301 	orr.w	r3, r3, #1
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	431d      	orrs	r5, r3
 80050c4:	81a5      	strh	r5, [r4, #12]
 80050c6:	e7cf      	b.n	8005068 <__smakebuf_r+0x18>

080050c8 <_fstat_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4d07      	ldr	r5, [pc, #28]	; (80050e8 <_fstat_r+0x20>)
 80050cc:	2300      	movs	r3, #0
 80050ce:	4604      	mov	r4, r0
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	602b      	str	r3, [r5, #0]
 80050d6:	f7fb fd80 	bl	8000bda <_fstat>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	d102      	bne.n	80050e4 <_fstat_r+0x1c>
 80050de:	682b      	ldr	r3, [r5, #0]
 80050e0:	b103      	cbz	r3, 80050e4 <_fstat_r+0x1c>
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	bd38      	pop	{r3, r4, r5, pc}
 80050e6:	bf00      	nop
 80050e8:	20000270 	.word	0x20000270

080050ec <_isatty_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4d06      	ldr	r5, [pc, #24]	; (8005108 <_isatty_r+0x1c>)
 80050f0:	2300      	movs	r3, #0
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	602b      	str	r3, [r5, #0]
 80050f8:	f7fb fd7f 	bl	8000bfa <_isatty>
 80050fc:	1c43      	adds	r3, r0, #1
 80050fe:	d102      	bne.n	8005106 <_isatty_r+0x1a>
 8005100:	682b      	ldr	r3, [r5, #0]
 8005102:	b103      	cbz	r3, 8005106 <_isatty_r+0x1a>
 8005104:	6023      	str	r3, [r4, #0]
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	20000270 	.word	0x20000270

0800510c <_init>:
 800510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800510e:	bf00      	nop
 8005110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005112:	bc08      	pop	{r3}
 8005114:	469e      	mov	lr, r3
 8005116:	4770      	bx	lr

08005118 <_fini>:
 8005118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511a:	bf00      	nop
 800511c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800511e:	bc08      	pop	{r3}
 8005120:	469e      	mov	lr, r3
 8005122:	4770      	bx	lr
